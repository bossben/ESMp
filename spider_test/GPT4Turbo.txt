SELECT COUNT(*) FROM club;
SELECT COUNT(*) FROM club
SELECT Name FROM club ORDER BY Name ASC
SELECT Name FROM club ORDER BY Name ASC
SELECT Manager, Captain FROM club
SELECT Manager, Captain FROM club
SELECT Name FROM club WHERE Manufacturer != 'Nike'
SELECT Name FROM club WHERE Manufacturer != 'Nike'
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT MAX(Earnings) FROM player;
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000;
SELECT Country FROM player WHERE Earnings > 1200000
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1
SELECT MAX(Earnings), Country FROM player WHERE Wins_count > 2 GROUP BY Country ORDER BY MAX(Earnings) DESC LIMIT 1
SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID
SELECT Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID
SELECT DISTINCT c.Name  FROM club c  JOIN player p ON c.Club_ID = p.Club_ID  WHERE p.Wins_count > 2;
SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2)
SELECT Name FROM player JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce';
SELECT player.Name FROM player JOIN club ON player.Club_ID = club.Club_ID WHERE club.Manager = 'Sam Allardyce'
SELECT AVG(player.Earnings) AS average_earnings, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID GROUP BY club.Name ORDER BY average_earnings DESC
SELECT AVG(player.Earnings) AS average_earnings, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID GROUP BY club.Name ORDER BY average_earnings DESC
SELECT COUNT(Club_ID) AS NumberOfClubs, Manufacturer FROM club GROUP BY Manufacturer
SELECT COUNT(Club_ID) AS NumberOfClubs, Manufacturer FROM club GROUP BY Manufacturer
SELECT MAX(Manufacturer) FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
SELECT MAX(Manufacturer) FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1;
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1;
SELECT COUNT(player.Country) AS CountryCount, player.Country FROM player GROUP BY player.Country HAVING COUNT(player.Country) > 1;
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player);
SELECT Club.Name FROM club LEFT JOIN player ON club.Club_ID = player.Club_ID WHERE player.Player_ID IS NULL
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000
SELECT Country FROM player WHERE Country IN (   SELECT Country FROM player WHERE Earnings > 1400000 ) AND Country IN (   SELECT Country FROM player WHERE Earnings < 1100000 ) GROUP BY Country
SELECT COUNT(DISTINCT Country) FROM player
SELECT COUNT(DISTINCT Country) FROM player
SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe');
SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe');
SELECT customers.customer_id, customers.customer_first_name, customers.customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id GROUP BY customers.customer_id HAVING COUNT(DISTINCT orders.order_id) > 2 AND COUNT(order_items.order_item_id) >= 3
SELECT customer_id, customer_first_name, customer_last_name FROM Customers WHERE customer_id IN (   SELECT o.customer_id   FROM Orders o   JOIN Order_Items oi ON o.order_id = oi.order_id   GROUP BY o.customer_id   HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3 )
SELECT order_id, order_status_code, COUNT(product_id) AS number_of_products FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY order_id, order_status_code
SELECT orders.order_id, orders.order_status_code, COUNT(order_items.product_id) AS product_count FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id, orders.order_status_code
SELECT DISTINCT o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.order_item_id) > 1 OR o.date_order_placed = (SELECT MIN(date_order_placed) FROM Orders);
SELECT MIN(date_order_placed) AS earliest_order_date FROM Orders UNION SELECT o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.order_item_id) > 1
SELECT customers.customer_first_name, customers.customer_middle_initial, customers.customer_last_name FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.customer_id IS NULL
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders);
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (   SELECT product_id   FROM Order_Items   GROUP BY product_id   HAVING COUNT(order_id) >= 2 )
SELECT product_id, product_name, product_price, product_color FROM Products WHERE product_id NOT IN (   SELECT product_id   FROM Order_Items   GROUP BY product_id   HAVING COUNT(order_id) >= 2 )
SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (   SELECT order_id   FROM Order_Items   GROUP BY order_id   HAVING COUNT(product_id) >= 2 )
SELECT order_id, date_order_placed FROM Orders WHERE order_id IN (   SELECT order_id   FROM Order_Items   GROUP BY order_id   HAVING COUNT(product_id) >= 2 );
SELECT product_id, product_name, product_price FROM Products WHERE product_id = (   SELECT product_id   FROM Order_Items   GROUP BY product_id   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT product_id, product_name, product_price FROM Products WHERE product_id IN (   SELECT product_id   FROM Order_Items   GROUP BY product_id   ORDER BY COUNT(order_item_id) DESC   LIMIT 1 )
SELECT oi.order_id, SUM(p.product_price) AS total_price FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY oi.order_id ORDER BY total_price ASC LIMIT 1
SELECT MIN(SUM(product_price)) AS total_cost, Orders.order_id FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id ORDER BY total_cost ASC LIMIT 1
SELECT payment_method_code, COUNT(*) AS method_count FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY method_count DESC LIMIT 1
SELECT payment_method_code, COUNT(customer_id) AS customer_count FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY customer_count DESC LIMIT 1
SELECT c.gender_code, COUNT(oi.product_id) AS number_of_products FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.gender_code
SELECT COUNT(DISTINCT p.product_id) AS product_count, c.gender_code FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id GROUP BY c.gender_code
SELECT COUNT(orders.order_id) AS order_count, customers.gender_code FROM orders JOIN customers ON orders.customer_id = customers.customer_id GROUP BY customers.gender_code
SELECT COUNT(orders.order_id) AS order_count, customers.gender_code FROM orders JOIN customers ON orders.customer_id = customers.customer_id GROUP BY customers.gender_code
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id
SELECT customers.customer_first_name, customers.customer_middle_initial, customers.customer_last_name, Customer_Payment_Methods.payment_method_code FROM customers JOIN Customer_Payment_Methods ON customers.customer_id = Customer_Payment_Methods.customer_id
SELECT invoices.invoice_status_code, invoices.invoice_date, shipments.shipment_date FROM invoices JOIN shipments ON invoices.invoice_number = shipments.invoice_number;
SELECT invoices.invoice_status_code, invoices.invoice_date, shipments.shipment_date FROM invoices LEFT JOIN shipments ON invoices.invoice_number = shipments.invoice_number
SELECT products.product_name, shipments.shipment_date FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id
SELECT products.product_name, shipments.shipment_date FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id
SELECT order_items.order_item_status_code, shipments.shipment_tracking_number FROM order_items JOIN shipments ON order_items.order_id = shipments.order_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id;
SELECT order_items.order_item_status_code, shipments.shipment_tracking_number FROM order_items JOIN shipments ON order_items.order_id = shipments.order_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id;
SELECT product_name, product_color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id AND Order_Items.order_item_id = Shipment_Items.order_item_id
SELECT product_name, product_color FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Shipments ON Order_Items.order_id = Shipments.order_id JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id GROUP BY product_name, product_color
SELECT DISTINCT Products.product_name, Products.product_price, Products.product_description FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.gender_code = 'Female'
SELECT products.product_name, products.product_price, products.product_description FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN orders ON order_items.order_id = orders.order_id JOIN customers ON orders.customer_id = customers.customer_id WHERE customers.gender_code = 'Female'
SELECT invoices.invoice_status_code FROM invoices JOIN orders ON orders.order_id NOT IN (   SELECT shipments.order_id   FROM shipments ) WHERE invoices.invoice_number IN (   SELECT shipments.invoice_number   FROM shipments );
SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments);
SELECT SUM(product_price) AS total_cost, Orders.order_id, date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, date_order_placed
SELECT SUM(product_price) AS total_amount_paid, Orders.order_id, date_order_placed FROM Orders JOIN Order_Items ON Orders.order_id = Order_Items.order_id JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Orders.order_id, date_order_placed
SELECT COUNT(DISTINCT customer_id) FROM Orders
SELECT COUNT(DISTINCT customer_id) FROM Orders
SELECT COUNT(DISTINCT order_status_code) FROM Orders;
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods;
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods;
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%';
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%';
SELECT AVG(product_price) FROM Products) AS AvgPrice WHERE product_price > AvgPrice;
SELECT AVG(product_price) FROM Products) AS AvgPrice WHERE product_price > AvgPrice;
SELECT COUNT(DISTINCT p.product_id) FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.order_item_id IS NULL
SELECT COUNT(product_id) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods);
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods);
SELECT order_status_code, date_order_placed FROM Orders;
SELECT order_status_code, date_order_placed FROM Orders;
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA';
SELECT addresses, towns, and county FROM Customers WHERE country = 'USA';
SELECT customers.customer_first_name, products.product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id
SELECT customers.customer_first_name, products.product_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id
SELECT COUNT(order_item_id) FROM Shipment_Items
SELECT COUNT(DISTINCT order_items.product_id) FROM order_items JOIN shipments ON order_items.order_id = shipments.order_id JOIN shipment_items ON shipments.shipment_id = shipment_items.shipment_id AND order_items.order_item_id = shipment_items.order_item_id;
SELECT AVG(product_price) FROM Products
SELECT AVG(product_price) FROM Products
SELECT AVG(product_price) FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id
SELECT AVG(product_price) FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id;
SELECT gender_code, email_address, town_city, county FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT c.email_address, c.town_city, c.county FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY COUNT(o.order_id) LIMIT 1;
SELECT orders.date_order_placed FROM orders JOIN customers ON orders.customer_id = customers.customer_id WHERE customers.customer_id IN (     SELECT customer_id     FROM Customer_Payment_Methods     GROUP BY customer_id     HAVING COUNT(payment_method_code) >= 2 )
SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(payment_method_code) >= 2)
SELECT order_status_code, COUNT(*) AS status_count FROM Orders GROUP BY order_status_code ORDER BY status_count ASC LIMIT 1
SELECT order_status_code, COUNT(*) AS status_count FROM Orders GROUP BY order_status_code ORDER BY status_count ASC LIMIT 1
SELECT product_id, product_description FROM Products WHERE product_id IN (   SELECT product_id   FROM Order_Items   GROUP BY product_id   HAVING COUNT(order_item_id) > 3 )
SELECT product_id, product_description FROM Products WHERE product_id IN (   SELECT product_id   FROM Order_Items   GROUP BY product_id   HAVING COUNT(order_item_id) > 3 )
SELECT invoice_number, invoice_date FROM Invoices WHERE invoice_number IN (   SELECT invoice_number   FROM Shipments   GROUP BY invoice_number   HAVING COUNT(shipment_id) >= 2 )
SELECT invoice_number, invoice_date FROM Invoices WHERE invoice_number IN (   SELECT invoice_number   FROM Shipments   GROUP BY invoice_number   HAVING COUNT(shipment_id) >= 2 )
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);
SELECT AVG(d.Age) FROM director d) AS avg_age WHERE d.Age > avg_age;
SELECT Name FROM director ORDER BY Age DESC LIMIT 1
SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%';
SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel
SELECT ORDER BY Start_Year DESC;
SELECT director.Name, COUNT(program.Program_ID) AS Program_Count FROM director JOIN program ON director.Director_ID = program.Director_ID GROUP BY director.Director_ID ORDER BY Program_Count DESC LIMIT 1
SELECT COUNT(program.Director_ID) AS ProgramCount, director.Name, director.Age FROM program JOIN director ON program.Director_ID = director.Director_ID GROUP BY program.Director_ID ORDER BY ProgramCount DESC LIMIT 1
SELECT MAX(Start_Year), Title FROM program GROUP BY Title ORDER BY Start_Year DESC LIMIT 1
SELECT COUNT(program.Channel_ID) AS ProgramCount, channel.Name, channel.Internet FROM program JOIN channel ON program.Channel_ID = channel.Channel_ID GROUP BY program.Channel_ID HAVING COUNT(program.Channel_ID) > 1
SELECT COUNT(program.Program_ID) AS NumberOfPrograms, channel.Name FROM program JOIN channel ON program.Channel_ID = channel.Channel_ID GROUP BY channel.Name
SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program);
SELECT director.Name FROM director JOIN program ON director.Director_ID = program.Director_ID WHERE program.Title = 'Dracula';
SELECT COUNT(director_admin.Director_ID) AS DirectorCount, channel.Name, channel.Internet FROM director_admin JOIN channel ON director_admin.Channel_ID = channel.Channel_ID GROUP BY director_admin.Channel_ID ORDER BY DirectorCount DESC LIMIT 1
SELECT Name FROM director WHERE Age > 30 AND Age < 60
SELECT channel.Name FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID JOIN director ON director_admin.Director_ID = director.Director_ID WHERE director.Age < 40 INTERSECT SELECT channel.Name FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID JOIN director ON director_admin.Director_ID = director.Director_ID WHERE director.Age > 60
SELECT channel.Channel_ID, channel.Name FROM channel LEFT JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID LEFT JOIN director ON director_admin.Director_ID = director.Director_ID WHERE director.Name != 'Hank Baskett' OR director.Name IS NULL
SELECT COUNT(Radio_ID) FROM radio;
SELECT Transmitter FROM radio ORDER BY ERP_kW ASC
SELECT tv_show_name, Original_Airdate FROM tv_show
SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC';
SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30
SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1
SELECT AVG(ERP_kW) FROM radio;
SELECT COUNT(ID) AS NumberOfChannels, Affiliation FROM city_channel GROUP BY Affiliation;
SELECT Affiliation, COUNT(*) AS AffiliationCount FROM city_channel GROUP BY Affiliation ORDER BY AffiliationCount DESC LIMIT 1
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(ID) > 3
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC
SELECT transmitter, City FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID
SELECT transmitter, Station_name FROM radio JOIN city_channel_radio ON radio.Radio_ID = city_channel_radio.Radio_ID JOIN city_channel ON city_channel_radio.City_channel_ID = city_channel.ID ORDER BY ERP_kW DESC
SELECT r.Transmitter, COUNT(ccr.City_channel_ID) AS NumberOfCityChannels FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter
SELECT DISTINCT r.Transmitter FROM radio r LEFT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID WHERE ccr.City_channel_ID IS NULL
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1
SELECT MAX(Top_Speed), Model FROM vehicle WHERE Power > 6000 GROUP BY Model ORDER BY Top_Speed DESC LIMIT 1
SELECT Name FROM driver WHERE Citizenship = 'United States'
SELECT Name FROM driver WHERE Citizenship = 'United States'
SELECT COUNT(vehicle_driver.Vehicle_ID) AS NumberOfVehicles, vehicle_driver.Driver_ID FROM vehicle_driver GROUP BY vehicle_driver.Driver_ID ORDER BY NumberOfVehicles DESC LIMIT 1
SELECT driver_id, COUNT(vehicle_id) AS num_vehicles FROM vehicle_driver GROUP BY driver_id ORDER BY num_vehicles DESC LIMIT 1
SELECT MAX(Power) AS Max_Power, AVG(Power) AS Average_Power FROM vehicle WHERE Builder = 'Zhuzhou'
SELECT MAX(Power) AS Max_Power, AVG(Power) AS Avg_Power FROM vehicle WHERE Builder = 'Zhuzhou'
SELECT Vehicle_ID, COUNT(Driver_ID) AS Times_Driven FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY Times_Driven ASC LIMIT 1
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Driver_ID) ASC LIMIT 1
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996
SELECT Build_Year, Model, Builder FROM vehicle
SELECT Build_Year, Model, Builder FROM vehicle
SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Build_Year = 2012
SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Build_Year = 2012
SELECT COUNT(DISTINCT driver.Driver_ID) FROM driver WHERE driver.Racing_Series = 'NASCAR';
SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR'
SELECT AVG(Top_Speed) FROM vehicle
SELECT AVG(Top_Speed) FROM vehicle;
SELECT DISTINCT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000
SELECT Name FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE Power > 5000
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%';
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID GROUP BY vehicle.Vehicle_ID HAVING COUNT(vehicle_driver.Driver_ID) = 2 OR vehicle.Builder = 'Ziyang';
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) = 2) OR Builder = 'Ziyang'
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon' OR vehicle.Vehicle_ID IN (   SELECT Vehicle_ID   FROM vehicle_driver   GROUP BY Vehicle_ID   HAVING COUNT(Driver_ID) > 2 )
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon' OR vehicle.Vehicle_ID IN (   SELECT Vehicle_ID   FROM vehicle_driver   GROUP BY Vehicle_ID   HAVING COUNT(Driver_ID) > 2 )
SELECT MAX(Top_Speed) FROM vehicle;
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle)
SELECT Name FROM driver ORDER BY Name ASC
SELECT Name FROM driver ORDER BY Name ASC
SELECT COUNT(driver.Driver_ID) AS NumberOfDrivers, driver.Racing_Series FROM driver GROUP BY driver.Racing_Series
SELECT COUNT(driver.Driver_ID) AS NumberOfDrivers, driver.Racing_Series FROM driver GROUP BY driver.Racing_Series
SELECT Name, Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID JOIN vehicle ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Model = 'DJ1'
SELECT Name, Citizenship FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model = 'DJ1'))
SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT COUNT(Exam_ID) FROM Exams
SELECT COUNT(Exam_ID) FROM Exams;
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;
SELECT Exams.Exam_Name, Exams.Exam_Date FROM Exams WHERE Exams.Subject_Code != 'Database';
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database';
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;
SELECT COUNT(Type_of_Question_Code), Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code
SELECT Type_of_Question_Code, COUNT(*) AS Occurrence FROM Questions GROUP BY Type_of_Question_Code
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal';
SELECT COUNT(DISTINCT Comments) FROM Student_Answers
SELECT COUNT(DISTINCT Comments) FROM Student_Answers
SELECT COUNT(Student_Answer_Text) AS Answer_Count, Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Answer_Count DESC;
SELECT COUNT(Student_Answer_Text) AS Frequency, Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC;
SELECT First_Name, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID;
SELECT First_Name, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID
SELECT Email_Adress, Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC
SELECT Email_Adress, Date_of_Answer FROM Student_Answers JOIN Students ON Student_Answers.Student_ID = Students.Student_ID ORDER BY Date_of_Answer DESC
SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1;
SELECT Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1
SELECT FIRST_NAME FROM Students WHERE Student_ID IN (   SELECT Student_ID   FROM Student_Answers   GROUP BY Student_ID   HAVING COUNT(Student_Answer_ID) >= 2 )
SELECT First_Name FROM Students WHERE Student_ID IN (   SELECT Student_ID   FROM Student_Answers   GROUP BY Student_ID   HAVING COUNT(Student_Answer_ID) >= 2 )
SELECT Valid_Answer_Text, COUNT(*) AS Frequency FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY Frequency DESC LIMIT 1
SELECT Valid_Answer_Text, COUNT(*) AS Frequency FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY Frequency DESC LIMIT 1
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'
SELECT Gender_MFU, COUNT(*) AS Number_of_Students FROM Students GROUP BY Gender_MFU
SELECT Gender_MFU, COUNT(*) AS Number_of_Students FROM Students GROUP BY Gender_MFU
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M');
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
SELECT First_Name FROM Students WHERE Student_ID NOT IN (   SELECT DISTINCT Student_ID   FROM Student_Answers )
SELECT Student_Answers.Student_Answer_Text FROM Student_Answers WHERE Student_Answers.Comments IN ('Normal', 'Absent');
SELECT Student_Answers.Student_Answer_Text FROM Student_Answers WHERE Student_Answers.Comments IN ('Normal', 'Absent');
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3
SELECT COUNT(Question_ID) AS Question_Count, Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING Question_Count >= 3
SELECT * FROM Students;
SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students
SELECT COUNT(address_id) FROM Addresses;
SELECT COUNT(address_id) FROM Addresses
SELECT address_id, address_details FROM Addresses;
SELECT address_id, address_details FROM Addresses
SELECT COUNT(product_id) FROM Products
SELECT COUNT(product_id) FROM Products;
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_price FROM Products WHERE product_name = 'Monitor'
SELECT product_price FROM Products WHERE product_name = 'Monitor';
SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products
SELECT MIN(product_price) AS MinPrice, AVG(product_price) AS AvgPrice, MAX(product_price) AS MaxPrice FROM Products
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes';
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes';
SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'Hardware';
SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware';
SELECT product_name, product_price FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT product_name, product_price FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (   SELECT AVG(product_price)   FROM Products   WHERE product_type_code = 'Hardware' )
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC
SELECT product_type_code, COUNT(product_id) AS number_of_products FROM Products GROUP BY product_type_code
SELECT COUNT(product_id) AS product_count, product_type_code FROM Products GROUP BY product_type_code
SELECT product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code
SELECT AVG(product_price) AS average_price, product_type_code FROM Products GROUP BY product_type_code
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT product_type_code, COUNT(*) AS frequency FROM Products GROUP BY product_type_code ORDER BY frequency DESC LIMIT 1;
SELECT COUNT(customer_id) FROM Customers;
SELECT COUNT(customer_id) FROM Customers;
SELECT customer_id, customer_name FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy';
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy';
SELECT payment_method_code, COUNT(customer_id) AS number_of_customers FROM Customers GROUP BY payment_method_code
SELECT COUNT(customer_id) AS customer_count, payment_method_code FROM Customers GROUP BY payment_method_code
SELECT payment_method_code, COUNT(*) AS customer_count FROM Customers GROUP BY payment_method_code ORDER BY customer_count DESC LIMIT 1
SELECT payment_method_code, COUNT(*) AS method_count FROM Customers GROUP BY payment_method_code ORDER BY method_count DESC LIMIT 1
SELECT customer_name, payment_method_code FROM Customers WHERE payment_method_code = (   SELECT payment_method_code   FROM Customers   GROUP BY payment_method_code   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy';
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy';
SELECT payment_method_code FROM Customers GROUP BY payment_method_code;
SELECT DISTINCT payment_method_code FROM Customers;
SELECT product_id, product_type_code FROM Products ORDER BY product_name;
SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1
SELECT product_type_code, COUNT(*) AS type_count FROM Products GROUP BY product_type_code ORDER BY type_count ASC LIMIT 1
SELECT COUNT(order_id) FROM Customer_Orders
SELECT COUNT(order_id) FROM Customer_Orders
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')
SELECT customers.customer_name, customers.customer_id, COUNT(customer_orders.order_id) AS number_of_orders FROM customers LEFT JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id, customers.customer_name
SELECT customers.customer_name, customers.customer_id, COUNT(customer_orders.order_id) AS number_of_orders FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_id, customers.customer_name
SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (   SELECT customer_id   FROM Customer_Orders   GROUP BY customer_id   ORDER BY COUNT(order_id) DESC   LIMIT 1 )
SELECT customer_id, customer_name, customer_phone, customer_email FROM Customers WHERE customer_id = (   SELECT customer_id   FROM Customer_Orders   GROUP BY customer_id   ORDER BY COUNT(order_id) DESC   LIMIT 1 )
SELECT order_status_code, COUNT(order_id) AS number_of_orders FROM Customer_Orders GROUP BY order_status_code
SELECT COUNT(order_id) AS total_orders, order_status_code FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code, COUNT(*) AS status_count FROM Customer_Orders GROUP BY order_status_code ORDER BY status_count DESC LIMIT 1
SELECT order_status_code, COUNT(*) AS status_count FROM Customer_Orders GROUP BY order_status_code ORDER BY status_count DESC LIMIT 1
SELECT COUNT(DISTINCT c.customer_id)  FROM Customers c  LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id  WHERE co.order_id IS NULL
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.order_id IS NULL
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);
SELECT COUNT(DISTINCT oi.product_id) FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor';
SELECT SUM(order_quantity) AS total_monitors_ordered FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id WHERE product_name = 'Monitor';
SELECT COUNT(DISTINCT co.customer_id) FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor';
SELECT COUNT(DISTINCT co.customer_id) FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor'
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders);
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders);
SELECT order_date, customer_orders.order_id FROM customer_orders JOIN order_items ON customer_orders.order_id = order_items.order_id GROUP BY customer_orders.order_id, order_date HAVING MAX(order_items.order_quantity) > 6 OR COUNT(order_items.order_item_id) > 3
SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (   SELECT order_id   FROM Order_Items   GROUP BY order_id   HAVING SUM(order_quantity) > 6 OR COUNT(order_item_id) > 3 )
SELECT COUNT(Building_ID) FROM building;
SELECT COUNT(Building_ID) FROM building;
SELECT Name FROM building ORDER BY Number_of_Stories ASC;
SELECT Name FROM building ORDER BY Number_of_Stories ASC;
SELECT Address FROM building ORDER BY Completed_Year DESC;
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980
SELECT AVG(Population) FROM region;
SELECT AVG(Population) FROM region;
SELECT Name FROM region ORDER BY Name ASC;
SELECT Name FROM region ORDER BY Name ASC;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
SELECT Name FROM region ORDER BY Population DESC LIMIT 1;
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID
SELECT Region.Name FROM Region JOIN Building ON Region.Region_ID = Building.Region_ID GROUP BY Region.Region_ID HAVING COUNT(Building.Building_ID) > 1
SELECT Region.Name FROM region JOIN building ON region.Region_ID = building.Region_ID GROUP BY Region.Name HAVING COUNT(building.Building_ID) > 1
SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT COUNT(building.Region_ID) AS NumberOfBuildings, region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID GROUP BY building.Region_ID ORDER BY NumberOfBuildings DESC LIMIT 1;
SELECT addresses of buildings and the capitals of regions they are in.  FROM building  JOIN region ON building.Region_ID = region.Region_ID
SELECT Address, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID
SELECT Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo';
SELECT building.Name, building.Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo';
SELECT COUNT(Building_ID) AS Number_of_Buildings, Completed_Year FROM building GROUP BY Completed_Year ORDER BY Completed_Year;
SELECT YEAR(Completed_Year) AS Year, COUNT(*) AS NumberOfBuildingsCompleted FROM building GROUP BY YEAR(Completed_Year)
SELECT MAX(Completed_Year) AS Most_Buildings_Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MAX(Completed_Year) AS Most_Construction_Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Building_ID) DESC LIMIT 1;
SELECT region.Name FROM region LEFT JOIN building ON region.Region_ID = building.Region_ID WHERE building.Building_ID IS NULL
SELECT region.Name FROM region LEFT JOIN building ON region.Region_ID = building.Region_ID WHERE building.Building_ID IS NULL
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15
SELECT YEAR(Completed_Year) FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT YEAR(Completed_Year) FROM building WHERE Number_of_Stories < 15
SELECT DISTINCT Address FROM building;
SELECT DISTINCT Address FROM building
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC
SELECT COUNT(Service_ID) FROM Services
SELECT COUNT(Service_ID) FROM Services
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Frequency FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Frequency DESC LIMIT 1;
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Services.Service_ID, Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch';
SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch';
SELECT COUNT(Customers_and_Services.Service_ID) AS UsageCount, Services.Service_Details FROM Customers_and_Services JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID GROUP BY Customers_and_Services.Service_ID HAVING COUNT(Customers_and_Services.Service_ID) > 3
SELECT Service_Details FROM Services WHERE Service_ID IN (   SELECT Service_ID   FROM Customers_and_Services   GROUP BY Service_ID   HAVING COUNT(Service_ID) > 3 )
SELECT COUNT(Service_ID) AS Service_Usage, Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY Service_Usage DESC LIMIT 1
SELECT COUNT(Service_ID) AS Service_Count, Customer_ID FROM Customers_and_Services GROUP BY Customer_ID ORDER BY Service_Count DESC LIMIT 1;
SELECT COUNT(DISTINCT Service_ID) AS Service_Types, Customer_Details FROM Customers_and_Services JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID GROUP BY Customers_and_Services.Customer_ID ORDER BY Service_Types DESC LIMIT 1
SELECT COUNT(DISTINCT Service_ID) AS Service_Types_Used, Customer_Details FROM Customers_and_Services JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID GROUP BY Customers_and_Services.Customer_ID ORDER BY Service_Types_Used DESC LIMIT 1
SELECT Customers.Customer_ID, Customers.Customer_Details FROM Customers LEFT JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID WHERE Customers_and_Services.Customer_ID IS NULL
SELECT Customers.Customer_Details FROM Customers LEFT JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID WHERE Customers_and_Services.Customer_ID IS NULL
SELECT Service_ID, COUNT(Service_ID) AS ServiceUsage FROM Customers_and_Services GROUP BY Service_ID ORDER BY ServiceUsage ASC LIMIT 1;
SELECT MIN(Service_Count) AS Least_Used_Service_Count FROM (   SELECT Service_ID, COUNT(Service_ID) AS Service_Count   FROM Customers_and_Services   GROUP BY Service_ID ) AS ServiceUsage JOIN Customers_and_Services ON ServiceUsage.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID GROUP BY Customers.Customer_Details ORDER BY Least_Used_Service_Count ASC LIMIT 1;
SELECT COUNT(DISTINCT Customer_Details) + COUNT(DISTINCT Service_Details) FROM Customers, Services
SELECT COUNT(DISTINCT Customer_ID) AS Total_Customers, COUNT(DISTINCT Service_ID) AS Total_Services FROM Customers_and_Services;
SELECT Customer_ID, Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'
SELECT Customer_ID, Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'
SELECT Services.Service_Details FROM Services LEFT JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID LEFT JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID LEFT JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID WHERE Customers.Customer_Details = 'Hardy Kutch' OR Customer_Interactions.Services_and_Channels_Details = 'good'
SELECT Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID LEFT JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID WHERE Customers.Customer_Details = 'Hardy Kutch' OR Customer_Interactions.Services_and_Channels_Details = 'good'
SELECT Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID AND Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch' AND Customer_Interactions.Services_and_Channels_Details = 'bad'
SELECT Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID AND Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customers.Customer_Details = 'Hardy Kutch' AND Customer_Interactions.Services_and_Channels_Details = 'bad'
SELECT s.Service_ID, s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID JOIN Channels c ON ci.Channel_ID = c.Channel_ID WHERE c.Channel_Details = '15 ij'
SELECT Services.Service_ID, Services.Service_Details FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Channels.Channel_Details = '15 ij'
SELECT Customers.Customer_ID, Customers.Customer_Details FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details = 'bad';
SELECT C.Customer_Details FROM Customers C JOIN Customer_Interactions CI ON C.Customer_ID = CI.Customer_ID WHERE CI.Status_Code = 'Stuck' AND CI.Services_and_Channels_Details = 'bad'
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details = 'Success'
SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details = 'Success';
SELECT Customers.Customer_ID, Customers.Customer_Details FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform.Integration_Platform_Details = 'Fail'
SELECT Customers.Customer_Details FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform.Integration_Platform_Details = 'Fail'
SELECT Services.Service_ID, Services.Service_Details FROM Services LEFT JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Service_ID IS NULL
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services);
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT COUNT(Analytical_ID) AS Usage_Count, Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT Services.Service_ID, Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details = 'Unsatisfied'
SELECT Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services_Details = 'Unsatisfied'
SELECT COUNT(*) FROM Vehicles
SELECT COUNT(*) FROM Vehicles
SELECT names FROM Vehicles ORDER BY Model_year DESC
SELECT names FROM Vehicles ORDER BY Model_year DESC
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT DISTINCT Type_of_powertrain FROM Vehicles;
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Model_year) = 2
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014) GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Model_year) = 2
SELECT Type_of_powertrain, COUNT(*) AS number_of_vehicles FROM Vehicles GROUP BY Type_of_powertrain
SELECT COUNT(id) AS number_of_vehicles, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain
SELECT COUNT(id) AS NumberOfVehicles, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY NumberOfVehicles DESC LIMIT 1
SELECT COUNT(Type_of_powertrain), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1
SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles
SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) >= 2
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) >= 2
SELECT name, age, membership_credit FROM Customers
SELECT names, ages, membership_credits FROM Customers
SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers);
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers);
SELECT * FROM Discount;
SELECT * FROM Discount;
SELECT vehicles.name, SUM(Renting_history.total_hours) AS total_hours FROM Renting_history JOIN vehicles ON Renting_history.vehicles_id = vehicles.id GROUP BY vehicles.name
SELECT vehicles.name, SUM(Renting_history.total_hours) AS total_rental_hours FROM vehicles JOIN Renting_history ON vehicles.id = Renting_history.vehicles_id GROUP BY vehicles.name
SELECT vehicles.name FROM vehicles LEFT JOIN renting_history ON vehicles.id = renting_history.vehicles_id WHERE renting_history.id IS NULL
SELECT vehicles.name FROM vehicles LEFT JOIN renting_history ON vehicles.id = renting_history.vehicles_id WHERE renting_history.id IS NULL
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2)
SELECT GROUP_CONCAT(name) AS customer_names FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.id HAVING COUNT(Renting_history.id) >= 2
SELECT vehicle_name, Model_year FROM Vehicles JOIN (   SELECT vehicles_id, COUNT(*) AS rent_count   FROM Renting_history   GROUP BY vehicles_id   ORDER BY rent_count DESC   LIMIT 1 ) AS MostRented ON Vehicles.id = MostRented.vehicles_id
SELECT vehicles.name, vehicles.Model_year FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id GROUP BY vehicles.id ORDER BY COUNT(renting_history.id) DESC LIMIT 1
SELECT vehicle_name, SUM(total_hours) AS total_renting_hours FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY vehicle_name ORDER BY total_renting_hours DESC
SELECT vehicles.name, SUM(Renting_history.total_hours) AS total_hours_rented FROM vehicles JOIN Renting_history ON vehicles.id = Renting_history.vehicles_id GROUP BY vehicles.name ORDER BY total_hours_rented DESC
SELECT discount.name, COUNT(renting_history.id) AS rental_count FROM discount JOIN renting_history ON discount.id = renting_history.discount_id GROUP BY discount.id ORDER BY rental_count DESC LIMIT 1
SELECT COUNT(renting_history.id) AS rental_count, discount.name FROM renting_history JOIN discount ON renting_history.discount_id = discount.id GROUP BY discount.id ORDER BY rental_count DESC LIMIT 1
SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history WHERE total_hours > 30);
SELECT name, Type_of_powertrain FROM Vehicles WHERE id IN (SELECT vehicles_id FROM Renting_history GROUP BY vehicles_id HAVING SUM(total_hours) > 30)
SELECT AVG(City_fuel_economy_rate) AS Average_City_Fuel_Rate, AVG(Highway_fuel_economy_rate) AS Average_Highway_Fuel_Rate, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain;
SELECT AVG(City_fuel_economy_rate) AS average_city_fuel_economy, AVG(Highway_fuel_economy_rate) AS average_highway_fuel_economy, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain
SELECT AVG(amount_of_loan) FROM Student_Loans
SELECT AVG(amount_of_loan) FROM Student_Loans
SELECT s.student_id, s.bio_data FROM Students s WHERE s.student_id IN (     SELECT c.student_id     FROM Classes c     GROUP BY c.student_id     HAVING COUNT(c.class_id) >= 2 ) OR s.student_id NOT IN (     SELECT d.student_id     FROM Detention d     GROUP BY d.student_id     HAVING COUNT(d.detention_id) >= 2 );
SELECT students.student_id, students.bio_data FROM students WHERE students.student_id IN (   SELECT student_id   FROM Classes   GROUP BY student_id   HAVING COUNT(class_id) >= 2 ) OR students.student_id NOT IN (   SELECT student_id   FROM Detention   GROUP BY student_id   HAVING COUNT(detention_id) >= 2 );
SELECT DISTINCT t.teacher_id, t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details LIKE '%data%' AND t.teacher_id NOT IN (   SELECT c.teacher_id   FROM Classes c   WHERE c.class_details LIKE 'net%' )
SELECT teacher_details FROM Teachers WHERE teacher_id IN (   SELECT teacher_id   FROM Classes   WHERE class_details LIKE '%data%'   EXCEPT   SELECT teacher_id   FROM Classes   WHERE class_details LIKE 'net%' )
SELECT biographical data of students who never had a detention or student loan.    SELECT s.bio_data FROM Students s LEFT JOIN Detention d ON s.student_id = d.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE d.detention_id IS NULL AND sl.student_loan_id IS NULL;
SELECT biographical_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)
SELECT loan_amounts, date_of_loan FROM Student_Loans WHERE student_id IN (   SELECT student_id   FROM Achievements   GROUP BY student_id   HAVING COUNT(achievement_id) >= 2 )
SELECT amount_of_loan, date_of_loan FROM Student_Loans WHERE student_id IN (   SELECT student_id   FROM Achievements   GROUP BY student_id   HAVING COUNT(achievement_id) >= 2 )
SELECT teacher_details, teacher_id FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id GROUP BY Teachers.teacher_id, Teachers.teacher_details ORDER BY COUNT(*) DESC LIMIT 1
SELECT teacher_details, teacher_id FROM Teachers WHERE teacher_id = (   SELECT teacher_id   FROM Classes   GROUP BY teacher_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT DISTINCT detention_summary FROM Detention;
SELECT DISTINCT detention_summary FROM Detention;
SELECT s.bio_data, s.student_details, rat.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code
SELECT Students.student_id, Students.bio_data, Students.student_details, Ref_Address_Types.address_type_description FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code
SELECT Addresses.address_details, Students.bio_data FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id
SELECT s.bio_data, a.address_details FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id
SELECT Students.bio_data, Transcripts.date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id
SELECT bio_data, date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id
SELECT COUNT(*) AS student_count, behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY student_count DESC LIMIT 1
SELECT behaviour_monitoring_details, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1
SELECT s.bio_data, s.student_details FROM Students s JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id WHERE bm.behaviour_monitoring_details IN (     SELECT behaviour_monitoring_details     FROM Behaviour_Monitoring     GROUP BY behaviour_monitoring_details     ORDER BY COUNT(*) DESC     LIMIT 1 ) OR bm.behaviour_monitoring_details IN (     SELECT behaviour_monitoring_details     FROM Behaviour_Monitoring     GROUP BY behaviour_monitoring_details     HAVING COUNT(*) = 3 ) GROUP BY s.bio_data, s.student_details
SELECT biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring cannot be determined with a single SQL query without additional information or clarification on what constitutes a "result" in the context of behavior monitoring. The query would typically involve aggregating behavior monitoring results to find the most common result and those obtained by exactly 3 students, then joining with the students table. However, without a clear definition of "result" or further instructions, a precise SQL query cannot be generated.
SELECT biographical_data FROM Students WHERE student_id IN (   SELECT student_id FROM Behaviour_Monitoring   GROUP BY student_id   HAVING COUNT(DISTINCT behaviour_monitoring_details) = 1   AND behaviour_monitoring_details = (     SELECT behaviour_monitoring_details FROM Behaviour_Monitoring     GROUP BY behaviour_monitoring_details     ORDER BY COUNT(*) DESC     LIMIT 1   ) )
SELECT bio_data FROM Students WHERE student_id IN (   SELECT student_id   FROM Behaviour_Monitoring   GROUP BY behaviour_monitoring_details   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id
SELECT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id
SELECT COUNT(student_id) AS number_of_students, event_type_code, event_type_description FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code, event_type_description ORDER BY number_of_students DESC LIMIT 1
SELECT event_type_code, event_type_description, COUNT(student_id) AS number_of_students FROM Student_Events JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY event_type_code, event_type_description ORDER BY number_of_students DESC LIMIT 1
SELECT achievement_details, achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code
SELECT achievement_details, achievement_type_description FROM Achievements JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code
SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE NOT EXISTS (   SELECT 1   FROM Achievements a   WHERE a.student_id = c.student_id );
SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id LEFT JOIN Achievements a ON c.student_id = a.student_id WHERE a.achievement_id IS NULL
SELECT date_of_transcript, transcript_details FROM Transcripts
SELECT date_of_transcript, transcript_details FROM Transcripts
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements
SELECT datetime_detention_start, datetime_detention_end FROM Detention
SELECT datetime_detention_start, datetime_detention_end FROM Detention
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%';
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%';
SELECT teachers.teacher_id, teachers.teacher_details, classes.student_id, classes.class_details FROM teachers JOIN classes ON teachers.teacher_id = classes.teacher_id
SELECT teacher_details, class_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Students ON Classes.student_id = Students.student_id;
SELECT MAX(course_count) AS max_courses_taught, teacher_id FROM (   SELECT teacher_id, COUNT(class_id) AS course_count   FROM Classes   GROUP BY teacher_id ) AS course_count_per_teacher ORDER BY max_courses_taught DESC LIMIT 1;
SELECT teacher_id, COUNT(class_id) AS number_of_courses FROM Classes GROUP BY teacher_id ORDER BY number_of_courses DESC LIMIT 1
SELECT MAX(course_count) AS max_courses, student_id FROM (   SELECT student_id, COUNT(class_id) AS course_count   FROM Classes   GROUP BY student_id ) AS course_counts ORDER BY max_courses DESC LIMIT 1;
SELECT student_id, COUNT(class_id) AS number_of_courses FROM Classes GROUP BY student_id ORDER BY number_of_courses DESC LIMIT 1
SELECT student_id, COUNT(class_id) AS courses_taken FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2;
SELECT student_id, COUNT(class_id) AS courses_taken, GROUP_CONCAT(class_details) AS course_details FROM Classes GROUP BY student_id HAVING COUNT(class_id) = 2
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type LEFT JOIN Detention ON Ref_Detention_Type.detention_type_code = Detention.detention_type_code GROUP BY Ref_Detention_Type.detention_type_code ORDER BY COUNT(Detention.detention_id) ASC LIMIT 1
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type WHERE detention_type_code = (   SELECT detention_type_code   FROM Detention   GROUP BY detention_type_code   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT bio_data, other_details FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)
SELECT bio_data, student_details FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Loans   WHERE amount_of_loan > (     SELECT AVG(amount_of_loan)     FROM Student_Loans   ) )
SELECT MIN(date_of_loan) FROM Student_Loans
SELECT MIN(date_of_loan) FROM Student_Loans;
SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1)
SELECT bio_data FROM Students WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1)
SELECT t.date_of_transcript  FROM Transcripts t  JOIN Student_Loans sl ON t.student_id = sl.student_id  ORDER BY sl.amount_of_loan DESC  LIMIT 1
SELECT date_of_transcript FROM Transcripts WHERE student_id = (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1)
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Transcripts tr ON c.student_id = tr.student_id ORDER BY tr.date_of_transcript ASC LIMIT 1
SELECT teacher_details FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id JOIN Transcripts ON Classes.student_id = Transcripts.student_id ORDER BY Transcripts.date_of_transcript ASC LIMIT 1
SELECT SUM(amount_of_loan) AS total_loan, student_id FROM Student_Loans GROUP BY student_id
SELECT student_id, SUM(amount_of_loan) AS total_loan_amount FROM Student_Loans GROUP BY student_id
SELECT student_id, bio_data, COUNT(class_id) AS course_count FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id, bio_data
SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS number_of_courses FROM Students s LEFT JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data
SELECT COUNT(DISTINCT student_id) FROM Detention
SELECT COUNT(DISTINCT student_id) FROM Detention
SELECT address_type_code, address_type_description FROM Ref_Address_Types JOIN Students_Addresses ON Ref_Address_Types.address_type_code = Students_Addresses.address_type_code GROUP BY Ref_Address_Types.address_type_code, Ref_Address_Types.address_type_description ORDER BY COUNT(*) DESC LIMIT 1
SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code = (   SELECT address_type_code   FROM Students_Addresses   GROUP BY address_type_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL
SELECT bio_data FROM Students WHERE student_id IN (     SELECT student_id     FROM Student_Events ) AND student_id NOT IN (     SELECT student_id     FROM Student_Loans );
SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (   SELECT student_id   FROM Transcripts   GROUP BY student_id   HAVING COUNT(transcript_id) = 2 );
SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN (   SELECT student_id   FROM Transcripts   GROUP BY student_id   HAVING COUNT(transcript_id) = 2 );
SELECT datetime_detention_start FROM Detention
SELECT datetime_detention_start FROM Detention
SELECT Author.Name FROM Author
SELECT Name FROM Author
SELECT Name, Address FROM Client
SELECT Name, Address FROM Client
SELECT Title, ISBN, SalePrice FROM Book
SELECT Title, ISBN, SalePrice FROM Book
SELECT COUNT(ISBN) FROM Book;
SELECT COUNT(*) FROM Book;
SELECT COUNT(idAuthor) FROM Author
SELECT COUNT(idAuthor) FROM Author
SELECT COUNT(IdClient) FROM Client
SELECT COUNT(IdClient) FROM Client
SELECT Name, Address FROM Client ORDER BY Name ASC
SELECT Name, Address FROM Client ORDER BY Name ASC
SELECT Book.Title, Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor
SELECT Book.Title, Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor
SELECT Orders.IdOrder, Client.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient
SELECT Orders.IdOrder, Client.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient
SELECT Author.Name, COUNT(Author_Book.ISBN) AS NumberOfBooks FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.Name
SELECT Author.Name, COUNT(Author_Book.ISBN) AS NumberOfBooks FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.Name
SELECT ISBN, COUNT(IdOrder) AS NumberOfOrders FROM Books_Order GROUP BY ISBN
SELECT b.ISBN, COUNT(bo.ISBN) AS NumberOfOrders FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN
SELECT ISBN, SUM(amount) AS total_amount_ordered FROM Books_Order GROUP BY ISBN
SELECT ISBN, SUM(amount) AS total_amount_ordered FROM Books_Order GROUP BY ISBN
SELECT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY COUNT(Books_Order.IdOrder) DESC LIMIT 1
SELECT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.Title ORDER BY COUNT(bo.IdOrder) DESC LIMIT 1
SELECT b.Title, b.PurchasePrice FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY SUM(bo.amount) DESC LIMIT 1
SELECT SUM(Books_Order.amount) AS TotalAmount, Book.Title, Book.PurchasePrice FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN GROUP BY Books_Order.ISBN ORDER BY TotalAmount DESC LIMIT 1
SELECT DISTINCT Book.Title  FROM Book  JOIN Books_Order ON Book.ISBN = Books_Order.ISBN;
SELECT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.Title
SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name HAVING COUNT(Orders.IdOrder) >= 1
SELECT DISTINCT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient
SELECT Client.Name, COUNT(Orders.IdOrder) AS NumberOfOrders FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name
SELECT Client.Name, COUNT(Orders.IdOrder) AS NumberOfOrders FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.Name
SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient ORDER BY COUNT(Orders.IdOrder) DESC LIMIT 1
SELECT COUNT(IdOrder) AS OrderCount, IdClient FROM Orders GROUP BY IdClient ORDER BY OrderCount DESC LIMIT 1;
SELECT Client.Name, SUM(Books_Order.amount) AS TotalBooksOrdered FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name
SELECT Client.Name, COUNT(Books_Order.ISBN) AS TotalBooksOrdered FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient LEFT JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.Name
SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient ORDER BY SUM(Books_Order.amount) DESC LIMIT 1;
SELECT SUM(Books_Order.amount) AS TotalAmount, Client.Name FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient GROUP BY Client.IdClient ORDER BY TotalAmount DESC LIMIT 1;
SELECT Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.ISBN IS NULL
SELECT Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.ISBN IS NULL
SELECT Client.Name FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdOrder IS NULL
SELECT Client.Name FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdOrder IS NULL
SELECT MAX(SalePrice) AS MaxSalePrice, MIN(SalePrice) AS MinSalePrice FROM Book;
SELECT MAX(SalePrice) AS MaxSalePrice, MIN(SalePrice) AS MinSalePrice FROM Book
SELECT AVG(PurchasePrice) AS AveragePurchasePrice, AVG(SalePrice) AS AverageSalePrice FROM Book;
SELECT AVG(PurchasePrice) AS AveragePurchasePrice, AVG(SalePrice) AS AverageSalePrice FROM Book
SELECT MAX(SalePrice - PurchasePrice) AS MaxDifference FROM Book;
SELECT MAX(SalePrice - PurchasePrice) AS LargestDifference FROM Book
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)
SELECT Title  FROM Book  WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)
SELECT MAX(PurchasePrice) FROM Book;
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1
SELECT AVG(Book.SalePrice) FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell'
SELECT AVG(Book.SalePrice) FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell';
SELECT SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato';
SELECT Book.SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato';
SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell' ORDER BY SalePrice LIMIT 1
SELECT b.Title  FROM Book b  JOIN Author_Book ab ON b.ISBN = ab.ISBN  JOIN Author a ON ab.Author = a.idAuthor  WHERE a.Name = 'George Orwell'  ORDER BY b.SalePrice ASC  LIMIT 1
SELECT Title FROM Book WHERE Author IN (SELECT idAuthor FROM Author WHERE Name = 'Plato') AND SalePrice < (SELECT AVG(SalePrice) FROM Book)
SELECT Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato' AND Book.SalePrice < (SELECT AVG(SalePrice) FROM Book);
SELECT Author.Name FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT Author.Name FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%';
SELECT Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%'
SELECT COUNT(Books_Order.IdOrder) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT COUNT(Books_Order.IdOrder) FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT Orders.IdOrder FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY Orders.IdOrder HAVING COUNT(DISTINCT Book.Title) = 2
SELECT Orders.IdOrder FROM Orders JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY Orders.IdOrder HAVING COUNT(DISTINCT Book.Title) = 2
SELECT B1.ISBN FROM Books_Order B1 JOIN Orders O1 ON B1.IdOrder = O1.IdOrder JOIN Client C1 ON O1.IdClient = C1.IdClient AND C1.Name = 'Peter Doe' JOIN Books_Order B2 ON B1.ISBN = B2.ISBN JOIN Orders O2 ON B2.IdOrder = O2.IdOrder JOIN Client C2 ON O2.IdClient = C2.IdClient AND C2.Name = 'James Smith' GROUP BY B1.ISBN
SELECT ISBN FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name IN ('Peter Doe', 'James Smith') GROUP BY ISBN HAVING COUNT(DISTINCT Client.Name) = 2
SELECT Title FROM Book WHERE ISBN IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe'))) AND ISBN NOT IN (SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith')))
SELECT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name = 'Peter Doe' AND Book.ISBN NOT IN (   SELECT Book.ISBN   FROM Book   JOIN Books_Order ON Book.ISBN = Books_Order.ISBN   JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder   JOIN Client ON Orders.IdClient = Client.IdClient   WHERE Client.Name = 'James Smith' )
SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT COUNT(*) FROM book;
SELECT Title FROM book ORDER BY Title ASC
SELECT Title FROM book ORDER BY Pages DESC
SELECT Type, Release FROM book
SELECT Title, MAX(Chapters) AS Maximum_Chapters, MIN(Chapters) AS Minimum_Chapters FROM book GROUP BY Title;
SELECT Title FROM book WHERE Type != 'Poet';
SELECT AVG(Rating) FROM review
SELECT Title, Rating FROM book JOIN review ON book.Book_ID = review.Book_ID
SELECT Rating FROM review JOIN book ON review.Book_ID = book.Book_ID ORDER BY book.Chapters DESC LIMIT 1
SELECT MIN(Pages), Rank FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY Pages ASC LIMIT 1
SELECT Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY Rank DESC LIMIT 1
SELECT AVG(Readers_in_Million) FROM review JOIN book ON review.Book_ID = book.Book_ID WHERE Type = 'Novel'
SELECT Type, COUNT(Book_ID) AS NumberOfBooks FROM book GROUP BY Type
SELECT Type, COUNT(*) AS Count FROM book GROUP BY Type ORDER BY Count DESC LIMIT 1;
SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3
SELECT book.Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC
SELECT Title, Audio FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC
SELECT COUNT(*) FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Book_ID IS NULL;
SELECT Type FROM book WHERE Book_ID IN (   SELECT Book_ID FROM book WHERE Chapters > 75 ) AND Book_ID IN (   SELECT Book_ID FROM book WHERE Chapters < 50 ) GROUP BY Type;
SELECT COUNT(DISTINCT Type) FROM book;
SELECT Type, Title FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rating IS NULL
SELECT COUNT(Customer_ID) FROM customer
SELECT COUNT(Customer_ID) FROM customer
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Nationality, Card_Credit FROM customer
SELECT Nationality, Card_Credit FROM customer
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia');
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia')
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1
SELECT MAX(Level_of_Membership), Card_Credit FROM customer GROUP BY Card_Credit ORDER BY Level_of_Membership DESC LIMIT 1
SELECT MAX(Level_of_Membership), Card_Credit FROM customer GROUP BY Card_Credit ORDER BY Level_of_Membership DESC LIMIT 1
SELECT NATIONALITY, COUNT(Customer_ID) AS Number_of_Customers FROM customer GROUP BY NATIONALITY
SELECT COUNT(Customer_ID) AS Number_of_Customers, Nationality FROM customer GROUP BY Nationality
SELECT COUNT(Nationality) AS NationalityCount, Nationality FROM customer GROUP BY Nationality ORDER BY NationalityCount DESC LIMIT 1
SELECT NATIONALITY, COUNT(*) AS NumberOfCustomers FROM customer GROUP BY NATIONALITY ORDER BY NumberOfCustomers DESC LIMIT 1
SELECT Nations with both conditions can be found by using two subqueries or a join that filters for both conditions separately and then finds the intersection.   SELECT DISTINCT c1.Nationality FROM customer c1 JOIN customer c2 ON c1.Nationality = c2.Nationality WHERE c1.Card_Credit < 50 AND c2.Card_Credit > 75;
SELECT Nations FROM customer WHERE Nationality IN (   SELECT Nationality FROM customer WHERE Card_Credit > 50 ) AND Nationality IN (   SELECT Nationality FROM customer WHERE Card_Credit < 75 ) GROUP BY Nationality
SELECT customer.Name, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID
SELECT customer.Name, customer_order.Dish_Name FROM customer_order JOIN customer ON customer.Customer_ID = customer_order.Customer_ID
SELECT Name, Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID ORDER BY Quantity DESC
SELECT customer.Name, customer_order.Dish_Name FROM customer_order JOIN customer ON customer.Customer_ID = customer_order.Customer_ID ORDER BY customer_order.Quantity DESC
SELECT customer.Name, SUM(customer_order.Quantity) AS Total_Quantities FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name
SELECT Customer.Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY Customer.Name
SELECT customer.Customer_ID, customer.Name, SUM(customer_order.Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Customer_ID HAVING SUM(customer_order.Quantity) > 1;
SELECT customer.Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY customer.Name HAVING SUM(customer_order.Quantity) > 1
SELECT DISTINCT Manager FROM branch
SELECT DISTINCT Manager FROM branch
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT customer.Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL
SELECT COUNT(Member_ID) FROM member
SELECT Name FROM member ORDER BY Age ASC
SELECT Name, Nationality FROM member
SELECT Name FROM member WHERE Nationality != 'England';
SELECT Name FROM member WHERE Age IN (19, 20)
SELECT Name FROM member ORDER BY Age DESC LIMIT 1
SELECT COUNT(Member_ID) AS NumberOfMembers, Nationality FROM member GROUP BY Nationality
SELECT Nationality, COUNT(*) AS Count FROM member GROUP BY Nationality ORDER BY Count DESC LIMIT 1
SELECT COUNT(Nationality) AS NumberOfMembers FROM member GROUP BY Nationality HAVING COUNT(Nationality) >= 2;
SELECT member.Name, club.Club_Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID
SELECT Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club.Overall_Ranking > 100
SELECT member.Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.Year_Join < 2018
SELECT member.Name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club.Club_Name = 'Houston';
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
SELECT Nations FROM member WHERE Age > 22 INTERSECT SELECT Nations FROM member WHERE Age < 19
SELECT AVG(m.Age) FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%';
SELECT Collection_Subset_Name FROM Collection_Subsets
SELECT Collection_Subset_Name FROM Collection_Subsets
SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, Collection_Subsets.Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Top collection'
SELECT Document_Subset_Name FROM Document_Subsets
SELECT Document_Subset_Name FROM Document_Subsets
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Object_ID FROM Document_Objects
SELECT Document_Object_ID FROM Document_Objects
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection';
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')
SELECT Document_Object_ID, Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL
SELECT DISTINCT Description FROM Document_Objects WHERE Document_Object_ID = Parent_Document_Object_ID;
SELECT COUNT(Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin';
SELECT COUNT(Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL)
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID != Parent_Document_Object_ID
SELECT Document_Object_ID, COUNT(Parent_Document_Object_ID) AS NumberOfChildDocuments FROM Document_Objects WHERE Document_Object_ID != Parent_Document_Object_ID GROUP BY Document_Object_ID;
SELECT COUNT(Document_Object_ID) AS NumberOfChildDocuments, Parent_Document_Object_ID  FROM Document_Objects  WHERE Parent_Document_Object_ID IS NOT NULL  GROUP BY Parent_Document_Object_ID
SELECT Collection_Name FROM Collections
SELECT Collection_Name FROM Collections
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice');
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL);
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections WHERE Parent_Collection_ID IS NOT NULL);
SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID HAVING COUNT(Parent_Document_Object_ID) > 1
SELECT Document_Object_ID FROM Document_Objects GROUP BY Document_Object_ID HAVING COUNT(Parent_Document_Object_ID) > 1
SELECT COUNT(Collection_ID) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT COUNT(Collection_ID) FROM Collections WHERE Parent_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best');
SELECT DISTINCT dsm.Related_Document_Object_ID FROM Document_Objects do INNER JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID WHERE do.Owner = 'Ransom'
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom');
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS NumberOfCollections FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name
SELECT COUNT(Collection_ID) AS NumberOfCollections, Collection_Subset_ID, Collection_Subset_Name FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID GROUP BY Collection_Subset_ID, Collection_Subset_Name
SELECT Document_Object_ID, COUNT(Parent_Document_Object_ID) AS NumberOfChildren FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL GROUP BY Parent_Document_Object_ID ORDER BY NumberOfChildren DESC LIMIT 1
SELECT COUNT(Parent_Document_Object_ID) AS Children_Count, Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING Parent_Document_Object_ID IS NOT NULL
SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS NumberOfRelatedDocuments FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY NumberOfRelatedDocuments ASC LIMIT 1
SELECT MIN(Document_Object_ID) FROM Document_Objects
SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS NumberOfRelatedDocuments FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) BETWEEN 2 AND 4
SELECT Document_Object_ID, COUNT(Related_Document_Object_ID) AS Related_Items_Count FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING COUNT(Related_Document_Object_ID) BETWEEN 2 AND 4
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden'));
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')) AND Owner != 'Braeden'
SELECT DISTINCT ds.Document_Subset_Name FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects do ON dsm.Document_Object_ID = do.Document_Object_ID WHERE do.Owner = 'Braeden'
SELECT Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Owner = 'Braeden' GROUP BY Document_Subset_Name
SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name
SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name
SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subset_ID, Document_Subset_Name ORDER BY NumberOfDocuments DESC LIMIT 1
SELECT Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(Document_Subset_Members.Document_Object_ID) AS NumberOfDocuments FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Document_Subset_ID, Document_Subsets.Document_Subset_Name ORDER BY NumberOfDocuments DESC LIMIT 1
SELECT Document_Object_ID FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')
SELECT Document_Subset_Members.Document_Object_ID, Document_Subsets.Document_Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID
SELECT Document_Subsets.Document_Subset_Name, Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID
SELECT Collection_Name FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom';
SELECT Collection_Name FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'
SELECT COUNT(Collection_ID) AS Collection_Count, Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT COUNT(Collection_ID) AS NumberOfCollections, Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT COUNT(Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best'
SELECT COUNT(Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best'
SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'
SELECT COUNT(Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best'
SELECT COUNT(Document_Object_ID) AS NumberOfDocuments, Collection_ID, Collection_Name FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID GROUP BY Collection_ID ORDER BY NumberOfDocuments DESC LIMIT 1
SELECT Collections.Collection_ID, Collections.Collection_Name, COUNT(Documents_in_Collections.Document_Object_ID) AS NumberOfDocuments FROM Collections JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collections.Collection_Name = 'Best' GROUP BY Collections.Collection_ID, Collections.Collection_Name ORDER BY NumberOfDocuments DESC LIMIT 1
SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' AND Collections.Collection_Name = 'Best';
SELECT Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' AND Collections.Collection_Name = 'Best';
SELECT Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID LEFT JOIN Document_Subset_Members ON Documents_in_Collections.Document_Object_ID = Document_Subset_Members.Document_Object_ID LEFT JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Collections.Collection_Name = 'Best' AND (Document_Subsets.Document_Subset_Name != 'Best for 2000' OR Document_Subsets.Document_Subset_Name IS NULL)
SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID LEFT JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID LEFT JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Collections.Collection_Name = 'Best' AND (Document_Subsets.Document_Subset_Name != 'Best for 2000' OR Document_Subsets.Document_Subset_Name IS NULL)
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (   SELECT Document_Object_ID   FROM Document_Subset_Members   JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID   WHERE Document_Subset_Name = 'Best for 2000' ) OR Document_Object_ID IN (   SELECT Document_Object_ID   FROM Documents_in_Collections   JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID   WHERE Collection_Name = 'Best' );
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (   SELECT Document_Object_ID   FROM Document_Subset_Members   WHERE Document_Subset_ID IN (     SELECT Document_Subset_ID     FROM Document_Subsets     WHERE Document_Subset_Name = 'Best for 2000'   )   UNION   SELECT Document_Object_ID   FROM Documents_in_Collections   WHERE Collection_ID IN (     SELECT Collection_ID     FROM Collections     WHERE Collection_Name = 'Best'   ) )
SELECT Collection_Name FROM Collections JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Related_Collection_ID JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Best';
SELECT Collection_Name FROM Collections JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Related_Collection_ID JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Collections.Collection_Name = 'Best';
SELECT COUNT(DISTINCT csm.Related_Collection_ID) FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(DISTINCT csm.Related_Collection_ID)  FROM Collections c  JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID  WHERE c.Collection_Name = 'Best';
SELECT Collection_Subset_Name FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best';
SELECT Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best';
SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%';
SELECT name FROM songs ORDER BY name ASC;
SELECT names, language FROM songs
SELECT MAX(voice_sound_quality) AS MaxVoiceSoundQuality, MIN(voice_sound_quality) AS MinVoiceSoundQuality FROM performance_score
SELECT performance_score.voice_sound_quality, performance_score.rhythm_tempo, performance_score.stage_presence FROM performance_score JOIN participants ON performance_score.participant_id = participants.id WHERE participants.name = 'Freeway';
SELECT id, language, original_artist FROM songs WHERE name != 'Love'
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'
SELECT DISTINCT performance_score.stage_presence FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language LIKE '%English%';
SELECT participant_id, name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participant_id HAVING COUNT(songs_id) >= 2
SELECT participants.id, participants.name, participants.popularity FROM participants LEFT JOIN performance_score ON participants.id = performance_score.participant_id GROUP BY participants.id ORDER BY COUNT(performance_score.songs_id) DESC;
SELECT id, name FROM participants WHERE id IN (SELECT participant_id FROM performance_score WHERE voice_sound_quality = 5 OR rhythm_tempo = 5)
SELECT voice_sound_quality FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE songs.name = ' The Balkan Girls ' AND songs.language = 'English'
SELECT songs.id, songs.name FROM songs JOIN performance_score ON songs.id = performance_score.songs_id GROUP BY songs.id, songs.name ORDER BY COUNT(performance_score.participant_id) DESC LIMIT 1
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9;
SELECT COUNT(songs.id) FROM songs LEFT JOIN performance_score ON songs.id = performance_score.songs_id WHERE performance_score.songs_id IS NULL
SELECT AVG(performance_score.rhythm_tempo) AS average_rhythm_score, songs.language FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY songs.language
SELECT DISTINCT participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language LIKE '%English%'
SELECT participants.name, participants.popularity FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language IN ('Croatian', 'English') GROUP BY participants.id HAVING COUNT(DISTINCT songs.language) = 2
SELECT name FROM songs WHERE name LIKE '%Is%';
SELECT original_artist FROM songs JOIN performance_score ON songs.id = performance_score.songs_id WHERE rhythm_tempo > 5 ORDER BY voice_sound_quality DESC
SELECT COUNT(*) FROM City;
SELECT COUNT(*) FROM City
SELECT DISTINCT state FROM City
SELECT DISTINCT state FROM City;
SELECT COUNT(DISTINCT country) FROM City
SELECT COUNT(DISTINCT country) FROM City
SELECT city_name, city_code, state, country FROM City
SELECT city_name, city_code, state, country FROM City
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT city_name FROM City WHERE state = 'PA';
SELECT city_name FROM City WHERE state = 'PA';
SELECT COUNT(*) FROM City WHERE country = 'CANADA';
SELECT COUNT(*) FROM City WHERE country = 'CANADA';
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC
SELECT state, COUNT(city_code) AS number_of_cities FROM City GROUP BY state
SELECT COUNT(city_code) AS NumberOfCities, state FROM City GROUP BY state
SELECT country, COUNT(city_code) AS number_of_cities FROM City GROUP BY country
SELECT COUNT(city_code) AS NumberOfCities, country FROM City GROUP BY country
SELECT city.state, COUNT(city.city_code) AS city_count FROM city GROUP BY city.state HAVING COUNT(city.city_code) >= 2
SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2
SELECT state, COUNT(city_code) AS num_cities FROM City GROUP BY state ORDER BY num_cities DESC LIMIT 1
SELECT COUNT(city_code) AS city_count, state FROM City GROUP BY state ORDER BY city_count DESC LIMIT 1;
SELECT country, COUNT(city_code) AS num_cities FROM City GROUP BY country ORDER BY num_cities ASC LIMIT 1
SELECT country, COUNT(city_code) AS city_count FROM City GROUP BY country ORDER BY city_count ASC LIMIT 1;
SELECT Fname, LName FROM Student JOIN City ON Student.city_code = City.city_code WHERE state = 'MD';
SELECT Fname || ' ' || LName AS FullName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD';
SELECT COUNT(*) FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country = 'CHINA';
SELECT COUNT(*) FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.country = 'CHINA';
SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'
SELECT Fname, Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'
SELECT COUNT(Student.StuID) AS NumberOfStudents, City.country FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.country
SELECT COUNT(Student.StuID) AS NumberOfStudents, City.country FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.country
SELECT COUNT(Student.StuID) AS NumberOfStudents, City.city_name FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name
SELECT COUNT(Student.StuID) AS NumberOfStudents, City.city_name FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.city_name
SELECT city.state, COUNT(*) AS NumberOfStudents FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city.state ORDER BY NumberOfStudents DESC LIMIT 1
SELECT COUNT(StuID) AS StudentCount, City.state FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.state ORDER BY StudentCount DESC LIMIT 1
SELECT country, COUNT(StuID) AS NumberOfStudents FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY country ORDER BY NumberOfStudents ASC LIMIT 1;
SELECT MIN(Country) FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY Country ORDER BY COUNT(StuID) ASC LIMIT 1;
SELECT city_name FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY City.city_name HAVING COUNT(Student.StuID) >= 3
SELECT City.city_name FROM City JOIN Student ON City.city_code = Student.city_code GROUP BY City.city_name HAVING COUNT(Student.StuID) >= 3
SELECT COUNT(Student.StuID) AS NumberOfStudents, City.state FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.state HAVING COUNT(Student.StuID) > 5;
SELECT COUNT(Student.StuID) AS NumberOfStudents, City.state FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY City.state HAVING COUNT(Student.StuID) > 5;
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Country != 'USA';
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Country != 'USA';
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA'
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'F' AND state = 'PA'
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'M' AND country != 'USA';
SELECT StuID FROM Student JOIN City ON Student.city_code = City.city_code WHERE Sex = 'M' AND country != 'USA'
SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'
SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'
SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark');
SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')
SELECT AVG(distance) AS AverageDistance, MIN(distance) AS MinimumDistance, MAX(distance) AS MaximumDistance FROM Direct_distance
SELECT AVG(distance) AS AverageDistance, MIN(distance) AS MinimumDistance, MAX(distance) AS MaximumDistance FROM Direct_distance
SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1;
SELECT MAX(distance) FROM Direct_distance;
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance) UNION SELECT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000;
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS';
SELECT AVG(distance) FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS';
SELECT city_name FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city2_code WHERE Direct_distance.city1_code = 'CHI' ORDER BY distance ASC LIMIT 1
SELECT city_name FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city2_code WHERE Direct_distance.city1_code = 'CHI' ORDER BY distance ASC LIMIT 1
SELECT MAX(distance), city2_code FROM Direct_distance WHERE city1_code = 'BOS' GROUP BY city2_code ORDER BY MAX(distance) DESC LIMIT 1;
SELECT city_name FROM City JOIN Direct_distance ON City.city_code = Direct_distance.city2_code WHERE Direct_distance.city1_code = 'BOS' ORDER BY distance DESC LIMIT 1
SELECT city1_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city1_code
SELECT city1_code, SUM(distance) FROM Direct_distance GROUP BY city1_code
SELECT city.city_name, AVG(direct_distance.distance)  FROM city  JOIN direct_distance ON city.city_code = direct_distance.city1_code  GROUP BY city.city_name
SELECT city.city_name, AVG(direct_distance.distance) FROM city LEFT JOIN direct_distance ON city.city_code = direct_distance.city1_code GROUP BY city.city_name
SELECT distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code = (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')
SELECT Direct_distance.distance FROM Student AS S1 JOIN Student AS S2 ON S1.city_code != S2.city_code JOIN Direct_distance ON S1.city_code = Direct_distance.city1_code AND S2.city_code = Direct_distance.city2_code WHERE S1.Fname = 'Linda' AND S1.LName = 'Smith' AND S2.Fname = 'Tracy' AND S2.LName = 'Kim'
SELECT Fname, LName FROM Student WHERE city_code = (SELECT city_code FROM Student JOIN City ON Student.city_code = City.city_code JOIN Direct_distance ON City.city_code = Direct_distance.city1_code OR City.city_code = Direct_distance.city2_code WHERE Student.LName = 'Smith' AND Student.Fname = 'Linda' ORDER BY distance DESC LIMIT 1) AND NOT (LName = 'Smith' AND Fname = 'Linda')
SELECT Fname, LName FROM Student WHERE city_code = (SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') ORDER BY (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = Student.city_code OR city2_code = Student.city_code) DESC LIMIT 1
SELECT city.state FROM Student JOIN City ON Student.city_code = City.city_code WHERE Student.Fname = 'Linda';
SELECT City.state FROM Student JOIN City ON Student.city_code = City.city_code WHERE Student.Fname = 'Linda'
SELECT age FROM Sailors WHERE age > 30;
SELECT age, name FROM Sailors WHERE age > 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT name, age FROM Sailors WHERE age < 30
SELECT Boats.name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid WHERE Reserves.sid = 1
SELECT bid FROM Reserves WHERE sid = 1
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 102);
SELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.bid = 102
SELECT DISTINCT bid FROM Reserves
SELECT bid FROM Reserves GROUP BY bid
SELECT name FROM Sailors WHERE name LIKE '%e%';
SELECT name FROM Sailors WHERE name LIKE '%e%';
SELECT age FROM Sailors WHERE age > ALL (SELECT age FROM Sailors)
SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors)
SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.age > ALL (SELECT s2.age FROM Sailors s2 WHERE s2.rating > 7)
SELECT DISTINCT s1.name FROM Sailors s1, Sailors s2 WHERE s1.age > s2.age AND s2.rating > 7
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves);
SELECT name, sid FROM Sailors WHERE sid IN (SELECT DISTINCT sid FROM Reserves);
SELECT sid, name FROM Sailors WHERE sid IN (   SELECT sid   FROM Reserves   GROUP BY sid   HAVING COUNT(DISTINCT bid) > 1 )
SELECT GROUP_CONCAT(DISTINCT s.name) AS sailor_names FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid HAVING COUNT(DISTINCT r.bid) >= 2
SELECT sid FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue')
SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue')))
SELECT sailors.sid, sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color IN ('red', 'blue')
SELECT sid FROM Reserves JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color IN ('red', 'blue') GROUP BY sid HAVING COUNT(DISTINCT Boats.color) = 2
SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue')))
SELECT sailors.sid, sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.color IN ('red', 'blue') GROUP BY sailors.sid, sailors.name HAVING COUNT(DISTINCT boats.color) = 2
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT s.sid, s.name FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL
SELECT sailors.sid, sailors.name FROM sailors LEFT JOIN reserves ON sailors.sid = reserves.sid WHERE reserves.sid IS NULL
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103);
SELECT name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103)
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')
SELECT MIN(rating) FROM Sailors WHERE name = 'Luis') AS LuisRating) WHERE rating > LuisRating;
SELECT name, sid FROM Sailors WHERE rating > 2 AND sid IN (SELECT sid FROM Reserves);
SELECT sailors.name, sailors.sid FROM sailors JOIN reserves ON sailors.sid = reserves.sid WHERE sailors.rating >= 3;
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT MAX(age) FROM Sailors;
SELECT COUNT(*) FROM Sailors;
SELECT COUNT(*) FROM Sailors;
SELECT AVG(age) FROM Sailors WHERE rating = 7;
SELECT AVG(age) FROM Sailors WHERE rating = 7;
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'
SELECT AVG(rating) AS average_rating, MAX(age) AS max_age FROM Sailors;
SELECT AVG(rating) AS average_rating, MAX(age) AS largest_age FROM Sailors;
SELECT COUNT(reserves.bid) AS reservation_count, boats.name FROM reserves JOIN boats ON reserves.bid = boats.bid GROUP BY reserves.bid, boats.name
SELECT COUNT(reserves.bid) AS reservation_count, reserves.bid FROM reserves GROUP BY reserves.bid
SELECT COUNT(reserves.bid) AS reservation_count, reserves.bid FROM reserves WHERE reserves.bid > 50 GROUP BY reserves.bid
SELECT COUNT(reserves.bid) AS reservation_count, reserves.bid FROM reserves JOIN boats ON reserves.bid = boats.bid WHERE boats.bid > 50 GROUP BY reserves.bid
SELECT COUNT(reserves.bid) AS reservation_count, reserves.bid FROM reserves GROUP BY reserves.bid HAVING COUNT(reserves.bid) > 1
SELECT COUNT(reserves.bid) AS reservation_count, reserves.bid FROM reserves GROUP BY reserves.bid HAVING COUNT(reserves.bid) > 1
SELECT COUNT(reserves.sid) AS reservation_count, reserves.bid FROM reserves JOIN sailors ON reserves.sid = sailors.sid WHERE sailors.sid > 1 GROUP BY reserves.bid
SELECT COUNT(Reserves.bid) AS reservation_count, Reserves.bid FROM Reserves JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.sid > 1 GROUP BY Reserves.bid
SELECT rating, AVG(age) AS average_age FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')) GROUP BY rating
SELECT AVG(s.age) AS average_age, s.rating FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT COUNT(*) FROM Boats
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats WHERE color = 'red'
SELECT COUNT(*) FROM Boats WHERE color = 'red';
SELECT boats.name FROM boats JOIN reserves ON boats.bid = reserves.bid JOIN sailors ON reserves.sid = sailors.sid WHERE sailors.age BETWEEN 20 AND 30
SELECT boats.name FROM boats JOIN reserves ON boats.bid = reserves.bid JOIN sailors ON reserves.sid = sailors.sid WHERE sailors.age BETWEEN 20 AND 30
SELECT s.name FROM Sailors s WHERE s.rating > ALL (   SELECT s2.rating   FROM Sailors s2   JOIN Reserves r ON s2.sid = r.sid   JOIN Boats b ON r.bid = b.bid   WHERE b.color = 'red' )
SELECT S.name FROM Sailors S WHERE S.rating > ALL (   SELECT S2.rating   FROM Sailors S2   JOIN Reserves R ON S2.sid = R.sid   JOIN Boats B ON R.bid = B.bid   WHERE B.color = 'red' )
SELECT MAX(rating) FROM Sailors
SELECT MAX(rating) FROM Sailors;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name = 'Melon'
SELECT sailors.name FROM sailors JOIN reserves ON sailors.sid = reserves.sid JOIN boats ON reserves.bid = boats.bid WHERE boats.name = 'Melon'
SELECT names, ages FROM Sailors ORDER BY rating DESC
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone ORDER BY Model ASC
SELECT Model FROM headphone ORDER BY Model ASC;
SELECT COUNT(Class), Class FROM headphone GROUP BY Class ORDER BY COUNT(Class) DESC LIMIT 1
SELECT COUNT(Headphone_ID) AS NumberOfHeadphones, Class FROM headphone GROUP BY Class ORDER BY NumberOfHeadphones DESC LIMIT 1
SELECT COUNT(Headphone_ID) AS NumberOfHeadphones, Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) > 2
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) <= 2
SELECT COUNT(Headphone_ID) AS NumberOfHeadphones, Class FROM headphone WHERE Price > 200 GROUP BY Class
SELECT COUNT(Headphone_ID) AS NumberOfHeadphones, Class FROM headphone WHERE Price > 200 GROUP BY Class
SELECT COUNT(DISTINCT Earpads) FROM headphone;
SELECT COUNT(DISTINCT Earpads) FROM headphone;
SELECT Earpads, COUNT(*) AS UsageCount FROM headphone GROUP BY Earpads ORDER BY UsageCount DESC LIMIT 2
SELECT COUNT(Headphone_ID) AS NumberOfHeadphones, Earpads FROM headphone GROUP BY Earpads ORDER BY NumberOfHeadphones DESC LIMIT 2
SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1
SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1
SELECT AVG(Price) AS Average_Price, Construction FROM headphone GROUP BY Construction
SELECT AVG(Price) AS Average_Price, Construction FROM headphone GROUP BY Construction
SELECT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2
SELECT DISTINCT h1.Class FROM headphone h1 JOIN headphone h2 ON h1.Class = h2.Class WHERE h1.Earpads = 'Bowls' AND h2.Earpads = 'Comfort Pads';
SELECT Model FROM headphone WHERE Construction != 'Plastic' AND Earpads = 'Comfort Pads'
SELECT EarPads FROM headphone WHERE Construction != 'Plastic'
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)
SELECT Name FROM store ORDER BY Date_Opened ASC
SELECT Name FROM store ORDER BY Date_Opened ASC
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'
SELECT COUNT(DISTINCT Neighborhood) FROM store
SELECT COUNT(DISTINCT Neighborhood) FROM store
SELECT COUNT(Store_ID) AS NumberOfStores, Neighborhood FROM store GROUP BY Neighborhood
SELECT COUNT(Store_ID) AS NumberOfStores, Neighborhood FROM store GROUP BY Neighborhood
SELECT MAX(Quantity) AS MaxQuantity, Name FROM stock JOIN store ON stock.Store_ID = store.Store_ID GROUP BY stock.Store_ID ORDER BY MaxQuantity DESC LIMIT 1
SELECT store.Name, SUM(stock.Quantity)  FROM store  JOIN stock ON store.Store_ID = stock.Store_ID  GROUP BY store.Name
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT store.Name FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Headphone_ID IS NULL;
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
SELECT MAX(stock.Quantity), headphone.Model FROM stock JOIN headphone ON stock.Headphone_ID = headphone.Headphone_ID GROUP BY headphone.Model ORDER BY MAX(stock.Quantity) DESC LIMIT 1
SELECT Model FROM headphone JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY SUM(stock.Quantity) DESC LIMIT 1
SELECT COUNT(stock.Headphone_ID) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman';
SELECT SUM(stock.Quantity) FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman'
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock);
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock);
SELECT COUNT(DISTINCT author_id) FROM Author
SELECT COUNT(author_id) FROM Author
SELECT COUNT(paper_id) FROM Paper
SELECT COUNT(paper_id) FROM Paper
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000
SELECT COUNT(paper_id) FROM Paper WHERE venue LIKE '%NAACL%' AND year = 2000
SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Paper.year = 2009 AND Affiliation.name = 'Columbia University';
SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year = 2009
SELECT names, addresses FROM Affiliation
SELECT name, address FROM Affiliation;
SELECT venue, year FROM Paper ORDER BY year;
SELECT venues FROM Paper GROUP BY venue ORDER BY year ASC
SELECT titles FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University';
SELECT titles, paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Harvard University'))
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'McKeown, Kathleen R.'
SELECT titles and paper_ids FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown'
SELECT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name IN ('Stanford University', 'Columbia University') GROUP BY paper.paper_id HAVING COUNT(DISTINCT affiliation.name) = 2
SELECT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name IN ('Stanford', 'Columbia University') GROUP BY paper.paper_id HAVING COUNT(DISTINCT affiliation.name) = 2
SELECT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name IN ('McKeown, Kathleen', 'Rambow, Owen') GROUP BY paper.paper_id HAVING COUNT(DISTINCT author.name) = 2
SELECT paper.paper_id, paper.title FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name IN ('McKeown, Kathleen', 'Rambow, Owen') GROUP BY paper.paper_id HAVING COUNT(DISTINCT author.author_id) = 2
SELECT titles and paper IDs for papers which have Mckeown but not Rambow in the author list cannot be directly queried without a more complex subquery or join that filters based on the presence of one author and absence of another. However, assuming a simplified approach to demonstrate the concept:   SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown' AND p.paper_id NOT IN (   SELECT p.paper_id   FROM Paper p   JOIN Author_list al ON p.paper_id = al.paper_id   JOIN Author a ON al.author_id = a.author_id   WHERE a.name = 'Rambow' );
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown')) AND paper_id NOT IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow'))
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen')
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen')
SELECT author.name, COUNT(author_list.paper_id) AS number_of_papers FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.name ORDER BY number_of_papers DESC
SELECT COUNT(paper_id) AS number_of_papers, author_id FROM Author_list GROUP BY author_id ORDER BY number_of_papers DESC
SELECT COUNT(p.paper_id) AS paper_count, a.name FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id LEFT JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name ORDER BY paper_count ASC
SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id GROUP BY affiliation.name ORDER BY COUNT(paper.paper_id) ASC
SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.name HAVING COUNT(author_list.paper_id) > 50
SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(author_list.paper_id) > 50
SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.author_id HAVING COUNT(DISTINCT author_list.paper_id) = 1
SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id GROUP BY author.name HAVING COUNT(DISTINCT author_list.paper_id) = 1
SELECT venue, year, COUNT(*) AS publications FROM Paper GROUP BY venue, year ORDER BY publications DESC LIMIT 1
SELECT venue, year, COUNT(*) AS publications FROM Paper GROUP BY venue, year ORDER BY publications DESC LIMIT 1
SELECT venue, COUNT(paper_id) AS publication_count FROM Paper GROUP BY venue ORDER BY publication_count ASC LIMIT 1
SELECT venue, COUNT(paper_id) AS publication_count FROM Paper GROUP BY venue ORDER BY publication_count ASC LIMIT 1
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'
SELECT COUNT(DISTINCT paper_id) FROM Citation WHERE cited_paper_id = 'A00-1002';
SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027';
SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027';
SELECT paper_id, COUNT(cited_paper_id) AS number_of_citations FROM Citation GROUP BY paper_id ORDER BY number_of_citations DESC LIMIT 1
SELECT paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1
SELECT title FROM Paper WHERE paper_id = (   SELECT paper_id   FROM Citation   GROUP BY paper_id   ORDER BY COUNT(cited_paper_id) DESC   LIMIT 1 )
SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Citation GROUP BY paper_id ORDER BY COUNT(cited_paper_id) DESC LIMIT 1)
SELECT p.paper_id, p.title, COUNT(c.cited_paper_id) AS citations FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id, p.title ORDER BY citations DESC LIMIT 10
SELECT COUNT(cited_paper_id) AS citation_count, cited_paper_id FROM Citation GROUP BY cited_paper_id ORDER BY citation_count DESC LIMIT 10
SELECT COUNT(citation.paper_id) FROM citation JOIN author_list ON citation.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen';
SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen';  SELECT paper_id FROM Author_list WHERE author_id = [Result from previous query];  SELECT COUNT(*) FROM Citation WHERE paper_id IN ([Result from second query]);
SELECT COUNT(citation.paper_id) FROM citation JOIN author_list ON citation.paper_id = author_list.paper_id JOIN author ON author_list.author_id = author.author_id WHERE author.name = 'Mckeown, Kathleen';
SELECT COUNT(DISTINCT Citation.cited_paper_id) FROM Citation JOIN Author_list ON Citation.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen';
SELECT author.name, COUNT(citation.cited_paper_id) AS citation_count FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN citation ON author_list.paper_id = citation.cited_paper_id GROUP BY author.name ORDER BY citation_count DESC LIMIT 1
SELECT author.name, COUNT(citation.cited_paper_id) AS num_citations FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN citation ON author_list.paper_id = citation.cited_paper_id GROUP BY author.author_id ORDER BY num_citations DESC LIMIT 1
SELECT venues, years FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name = 'Mckeown, Kathleen'
SELECT venues, years FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen'))
SELECT venues, years FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' GROUP BY venues, years
SELECT venues, years FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University'
SELECT author.name, COUNT(paper.paper_id) AS paper_count FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author.name ORDER BY paper_count DESC LIMIT 1
SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author.name ORDER BY COUNT(paper.paper_id) DESC LIMIT 1
SELECT affiliation.name, COUNT(paper.paper_id) AS paper_count FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY affiliation.name ORDER BY paper_count DESC LIMIT 3
SELECT a.affiliation_id, a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.affiliation_id, a.name ORDER BY paper_count DESC LIMIT 3
SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Columbia University' AND Paper.year <= 2009
SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009
SELECT COUNT(DISTINCT Paper.paper_id) FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Stanford University' AND Paper.year BETWEEN 2000 AND 2009
SELECT COUNT(DISTINCT p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009
SELECT MAX(author_count) AS max_author_count FROM (   SELECT paper_id, COUNT(author_id) AS author_count   FROM Author_list   GROUP BY paper_id ) AS author_counts JOIN Paper ON author_counts.paper_id = Paper.paper_id ORDER BY max_author_count DESC LIMIT 1;
SELECT p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id GROUP BY p.paper_id ORDER BY COUNT(al.author_id) DESC LIMIT 1
SELECT COUNT(DISTINCT al.author_id) FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Author_list al2 ON al.paper_id = al2.paper_id JOIN Author a2 ON al2.author_id = a2.author_id WHERE a.name = 'Mckeown, Kathleen' AND a2.name != 'Mckeown, Kathleen'
SELECT COUNT(DISTINCT al2.author_id) FROM Author_list al1 JOIN Author a1 ON al1.author_id = a1.author_id JOIN Paper p ON al1.paper_id = p.paper_id JOIN Author_list al2 ON p.paper_id = al2.paper_id JOIN Author a2 ON al2.author_id = a2.author_id WHERE a1.name = 'Mckeown, Kathleen' AND a2.name != 'Mckeown, Kathleen'
SELECT author_id, COUNT(paper_id) AS paper_count FROM Author_list WHERE author_id IN (     SELECT author_id     FROM Author     WHERE name LIKE '%Mckeown, Kathleen%' ) GROUP BY author_id ORDER BY paper_count DESC LIMIT 1;
SELECT author.name, COUNT(*) AS coauthored_papers FROM Author author JOIN Author_list al1 ON author.author_id = al1.author_id JOIN Author_list al2 ON al1.paper_id = al2.paper_id JOIN Author mckeown ON al2.author_id = mckeown.author_id AND mckeown.name = 'Mckeown, Kathleen' WHERE author.name != 'Mckeown, Kathleen' GROUP BY author.name ORDER BY coauthored_papers DESC LIMIT 1
SELECT paper_id FROM Paper WHERE title LIKE '%translation%';
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT paper.paper_id, paper.title FROM paper LEFT JOIN citation ON paper.paper_id = citation.cited_paper_id WHERE citation.cited_paper_id IS NULL
SELECT paper.paper_id, paper.title FROM paper LEFT JOIN citation ON paper.paper_id = citation.cited_paper_id WHERE citation.cited_paper_id IS NULL
SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE affiliation.address LIKE '%China%' GROUP BY affiliation.name ORDER BY COUNT(paper.paper_id) DESC LIMIT 1
SELECT affiliation.name FROM affiliation JOIN author_list ON affiliation.affiliation_id = author_list.affiliation_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE affiliation.address LIKE '%China%' GROUP BY affiliation.name ORDER BY COUNT(paper.paper_id) DESC LIMIT 1
SELECT COUNT(paper_id) AS number_of_papers, venue, year FROM Paper GROUP BY venue, year
SELECT COUNT(paper_id) AS total_papers, venue, year FROM Paper GROUP BY venue, year
SELECT COUNT(paper.paper_id) AS total_papers, affiliation.name FROM paper JOIN author_list ON paper.paper_id = author_list.paper_id JOIN affiliation ON author_list.affiliation_id = affiliation.affiliation_id GROUP BY affiliation.name
SELECT COUNT(p.paper_id) AS published_papers, a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name
SELECT titles FROM Paper WHERE paper_id IN (SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50)
SELECT COUNT(cited_paper_id) AS citation_count, paper.title FROM Citation JOIN Paper ON Citation.cited_paper_id = Paper.paper_id GROUP BY cited_paper_id HAVING citation_count > 50
SELECT COUNT(DISTINCT a.author_id) FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id LEFT JOIN (     SELECT p.paper_id     FROM Paper p     JOIN Citation c ON p.paper_id = c.cited_paper_id     GROUP BY p.paper_id     HAVING COUNT(c.cited_paper_id) > 50 ) AS cited_papers ON al.paper_id = cited_papers.paper_id WHERE cited_papers.paper_id IS NULL
SELECT COUNT(DISTINCT author.author_id) FROM author LEFT JOIN author_list ON author.author_id = author_list.author_id LEFT JOIN (   SELECT paper_id   FROM citation   GROUP BY paper_id   HAVING COUNT(cited_paper_id) > 50 ) AS highly_cited_papers ON author_list.paper_id = highly_cited_papers.paper_id WHERE highly_cited_papers.paper_id IS NULL
SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('Proceedings of the NAACL HLT Workshop on Extracting and Using Constructions in Computational Linguistics', 'ACL') AND p.year = 2009
SELECT author.name FROM author JOIN author_list ON author.author_id = author_list.author_id JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue IN ('Proceedings of the NAACL HLT Workshop on Extracting and Using Constructions in Computational Linguistics', 'ACL') AND paper.year = 2009 GROUP BY author.name HAVING COUNT(DISTINCT paper.venue) = 2
SELECT author.name FROM author LEFT JOIN author_list ON author.author_id = author_list.author_id LEFT JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue NOT LIKE '%ACL%' OR paper.venue IS NULL GROUP BY author.name;
SELECT author.name FROM author LEFT JOIN author_list ON author.author_id = author_list.author_id LEFT JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.venue NOT LIKE '%ACL%' OR paper.venue IS NULL
SELECT COUNT(*) FROM conference
SELECT COUNT(*) FROM conference;
SELECT DISTINCT Conference_Name FROM conference
SELECT Conference_Name FROM conference;
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, COUNT(*) AS Number_of_Times FROM conference GROUP BY Conference_Name
SELECT COUNT(Conference_ID) AS Occurrences, Conference_Name FROM conference GROUP BY Conference_Name
SELECT YEAR, COUNT(Conference_ID) AS NumberOfConferences FROM conference GROUP BY Year
SELECT COUNT(DISTINCT Year) FROM conference;
SELECT YEAR, COUNT(Conference_ID) AS ConferenceCount FROM conference GROUP BY YEAR ORDER BY ConferenceCount ASC LIMIT 1
SELECT YEAR, COUNT(Conference_ID) AS Conference_Count FROM conference GROUP BY Year ORDER BY Conference_Count ASC LIMIT 1
SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2
SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2
SELECT Institution_Name, Location, Founded FROM institution
SELECT Institution_Name, Location, Founded FROM institution
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900;
SELECT COUNT(*) FROM institution WHERE Founded >= 1850 AND Founded <= 1900
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1
SELECT institution_name, COUNT(staff.staff_ID) AS number_of_staff FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE Founded > 1800 GROUP BY institution.Institution_ID, institution_name
SELECT institution.Institution_ID, COUNT(staff.staff_ID) AS Staff_Count, GROUP_CONCAT(staff.name) AS Staff_Names FROM institution JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID
SELECT Institution_Name FROM institution LEFT JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE staff.staff_ID IS NULL
SELECT Institution_Name FROM institution LEFT JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE staff.staff_ID IS NULL
SELECT AVG(Age) FROM staff) AS AvgAge WHERE Age > AvgAge;
SELECT AVG(Age) FROM staff) AS avg_age WHERE Age > avg_age;
SELECT MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM staff WHERE Nationality = 'United States'
SELECT MAX(Age) AS MaxAge, MIN(Age) AS MinAge FROM staff
SELECT Conference_Name FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE staff.Nationality = 'Canada';
SELECT conference.Conference_Name FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE staff.Nationality = 'Canada'
SELECT staff.name FROM staff JOIN conference_participation AS cp1 ON staff.staff_ID = cp1.staff_ID JOIN conference_participation AS cp2 ON staff.staff_ID = cp2.staff_ID WHERE cp1.role = 'Speaker' AND cp2.role = 'Sponsor' AND cp1.Conference_ID = cp2.Conference_ID;
SELECT staff.name FROM staff JOIN conference_participation AS cp1 ON staff.staff_ID = cp1.staff_ID JOIN conference_participation AS cp2 ON staff.staff_ID = cp2.staff_ID WHERE cp1.role = 'Speaker' AND cp2.role = 'Sponsor' GROUP BY staff.name
SELECT staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Conference_Name IN ('ACL', 'NACCL') GROUP BY staff.name HAVING COUNT(DISTINCT conference.Conference_Name) = 2
SELECT staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Conference_Name IN ('ACL', 'NACCL') GROUP BY staff.name HAVING COUNT(DISTINCT conference.Conference_Name) = 2
SELECT staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year IN (2003, 2004)
SELECT staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Year BETWEEN 2003 AND 2004
SELECT conference.Conference_Name, conference.Year, COUNT(conference_participation.staff_ID) AS NumberOfParticipants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_Name, conference.Year
SELECT conference.Conference_ID, conference.Conference_Name, conference.Year, COUNT(conference_participation.staff_ID) AS Number_of_Participants FROM conference LEFT JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_ID, conference.Conference_Name, conference.Year
SELECT COUNT(conference_participation.staff_ID) AS NumberOfAttendants, conference.Conference_Name FROM conference_participation JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID GROUP BY conference_participation.Conference_ID ORDER BY NumberOfAttendants DESC LIMIT 2
SELECT Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2
SELECT staff.name, staff.Nationality FROM staff LEFT JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID LEFT JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Conference_Name IS NULL OR conference.Conference_Name != 'ACL'
SELECT staff.name, staff.Nationality FROM staff LEFT JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID LEFT JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID WHERE conference.Conference_Name IS NULL OR conference.Conference_Name != 'ACL'
SELECT institution_name, location FROM institution WHERE institution_id NOT IN (   SELECT institution_id   FROM staff   WHERE staff_id IN (     SELECT staff_id     FROM conference_participation     WHERE conference_id IN (       SELECT conference_id       FROM conference       WHERE year = 2004     )   ) )
SELECT institution.Institution_Name, institution.Location FROM institution LEFT JOIN staff ON institution.Institution_ID = staff.Institution_ID LEFT JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID LEFT JOIN conference ON conference_participation.Conference_ID = conference.Conference_ID AND conference.Year = 2004 WHERE conference.Conference_ID IS NULL
SELECT MAX(age) FROM PilotSkills;
SELECT MAX(age) FROM PilotSkills;
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age;
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC
SELECT * FROM PilotSkills WHERE age < 30;
SELECT age FROM PilotSkills WHERE age < 30;
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub';
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT COUNT(DISTINCT location) FROM Hangar;
SELECT COUNT(DISTINCT location) FROM Hangar;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32
SELECT COUNT(*) FROM PilotSkills WHERE age > 40;
SELECT COUNT(*) FROM PilotSkills WHERE age > 40;
SELECT COUNT(plane_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35;
SELECT COUNT(*) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35;
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1
SELECT COUNT(pilot_name) AS pilot_count, plane_name FROM PilotSkills GROUP BY plane_name ORDER BY pilot_count DESC LIMIT 1
SELECT COUNT(pilot_name) AS flight_count, plane_name FROM PilotSkills GROUP BY plane_name ORDER BY flight_count DESC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) ASC LIMIT 1
SELECT COUNT(pilot_name) AS flight_count, plane_name FROM PilotSkills GROUP BY plane_name ORDER BY flight_count ASC LIMIT 1;
SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago';
SELECT COUNT(DISTINCT PilotSkills.pilot_name) FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago';
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills;
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills;
SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith';
SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith';
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT location FROM Hangar ORDER BY plane_name;
SELECT location FROM Hangar ORDER BY plane_name;
SELECT DISTINCT Hangar.plane_name FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name ORDER BY Hangar.plane_name ASC;
SELECT plane_name FROM Hangar ORDER BY plane_name ASC;
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30;
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30;
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber')
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) = 2
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) = 2
SELECT AVG(age) AS average_age, MIN(age) AS smallest_age FROM PilotSkills;
SELECT AVG(age) AS average_age, MIN(age) AS minimum_age FROM PilotSkills;
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (   SELECT plane_name FROM Hangar WHERE location = 'Austin' ) AND pilot_name IN (   SELECT pilot_name FROM PilotSkills WHERE plane_name IN (     SELECT plane_name FROM Hangar WHERE location = 'Boston'   ) )
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location IN ('Austin', 'Boston'));
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT AVG(age) AS average_age, plane_name FROM PilotSkills GROUP BY plane_name
SELECT AVG(age) AS average_age, plane_name FROM PilotSkills GROUP BY plane_name;
SELECT COUNT(plane_name) AS number_of_planes, plane_name FROM Hangar GROUP BY plane_name
SELECT COUNT(*) AS entry_count, plane_name FROM PilotSkills GROUP BY plane_name
SELECT MAX(age) AS oldest_age, plane_name FROM PilotSkills GROUP BY plane_name ORDER BY plane_name;
SELECT plane_name, MAX(age) AS oldest_pilot_age FROM PilotSkills GROUP BY plane_name ORDER BY plane_name;
SELECT MAX(age) AS oldest_age, plane_name FROM PilotSkills GROUP BY plane_name;
SELECT plane_name, pilot_name FROM PilotSkills WHERE (plane_name, age) IN (   SELECT plane_name, MAX(age)   FROM PilotSkills   GROUP BY plane_name );
SELECT MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name
SELECT GROUP BY pilot_name ORDER BY MAX(age) DESC;
SELECT location, COUNT(pilot_name) AS number_of_pilots, AVG(age) AS average_age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name GROUP BY location
SELECT GROUP_CONCAT(DISTINCT Hangar.location) AS locations, COUNT(PilotSkills.pilot_name) AS num_pilots, AVG(PilotSkills.age) AS average_age FROM Hangar JOIN PilotSkills ON Hangar.plane_name = PilotSkills.plane_name GROUP BY Hangar.location
SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE plane_name IN (   SELECT plane_name   FROM PilotSkills   GROUP BY plane_name   HAVING AVG(age) < 35 )
SELECT plane_name, COUNT(pilot_name) AS number_of_pilots FROM PilotSkills WHERE age < 35 GROUP BY plane_name;
SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills ORDER BY age ASC LIMIT 1)
SELECT location FROM Hangar WHERE plane_name = (SELECT plane_name FROM PilotSkills ORDER BY age ASC LIMIT 1)
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin');
SELECT pilot_name, age FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin');
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC;
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC;
SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter')
SELECT COUNT(*) FROM PilotSkills WHERE age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter')
SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%';
SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%';
SELECT COUNT(DISTINCT pilot_name) FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub');
SELECT COUNT(*) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')
SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1
SELECT Area_km, Government_website FROM district ORDER BY Population ASC LIMIT 1
SELECT AVG(Area_km) FROM district) AS AvgArea WHERE Area_km > AvgArea;
SELECT MAX(Area_km) AS Biggest_Area, AVG(Area_km) AS Average_Area FROM district
SELECT SUM(Population) FROM district ORDER BY Area_km DESC LIMIT 3
SELECT population, District_ID, Name, Government_website FROM district ORDER BY Population ASC
SELECT Name FROM district WHERE Government_website LIKE '%.gov%'
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000
SELECT Names, Speach_title FROM spokesman
SELECT AVG(Points) AS Average_Points, AVG(Age) AS Average_Age FROM spokesman WHERE Rank_position = 1;
SELECT Name, Points FROM spokesman WHERE Age < 40
SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1
SELECT s.Name  FROM spokesman s  WHERE s.Points < (SELECT AVG(Points) FROM spokesman);
SELECT district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID ORDER BY COUNT(spokesman_district.Spokesman_ID) DESC LIMIT 1
SELECT Name FROM spokesman WHERE Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman_district WHERE Start_year < 2004)
SELECT COUNT(spokesman.Spokesman_ID) AS NumberOfSpokesmen, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.Name
SELECT DISTINCT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position IN (1, 2) GROUP BY d.Name HAVING COUNT(DISTINCT s.Rank_position) = 2
SELECT DISTINCT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.District_ID HAVING COUNT(sd.Spokesman_ID) > 1
SELECT COUNT(District_ID) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district);
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district);
SELECT SUM(Population) AS Total_Population, AVG(Population) AS Average_Population FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district);
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1
SELECT title FROM Sculptures WHERE location = 'Gallery 226';
SELECT title FROM Sculptures WHERE location = 'Gallery 226'
SELECT title, location FROM Paintings
SELECT title, location FROM Paintings
SELECT title, location FROM Sculptures
SELECT title, location FROM Sculptures
SELECT medium, mediumOn FROM Paintings WHERE paintingID = 80;
SELECT medium FROM Paintings WHERE paintingID = 80;
SELECT fname, lname FROM Artists WHERE birthYear > 1850
SELECT fname || ' ' || lname AS FullName FROM Artists WHERE birthYear > 1850
SELECT title, year FROM Sculptures WHERE location != 'Gallery 226';
SELECT lname, fname, title, year FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE location != 'Gallery 226'
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900)
SELECT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920)
SELECT birthYear FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year > 1920)
SELECT fname, lname FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1
SELECT fname || ' ' || lname AS FullName FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1
SELECT deathYear - birthYear AS age FROM Artists ORDER BY age ASC LIMIT 1
SELECT MIN(deathYear - birthYear) AS shortest_lifespan FROM Artists
SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY age DESC LIMIT 1
SELECT fname, MAX(deathYear - birthYear) AS age FROM Artists GROUP BY artistID, fname, birthYear, deathYear ORDER BY age DESC LIMIT 1;
SELECT COUNT(*) FROM Paintings WHERE location = 'Gallery 240'
SELECT COUNT(*) FROM Paintings WHERE location = 'Gallery 240'
SELECT COUNT(p.paintingID) FROM Paintings p JOIN Artists a ON p.painterID = a.artistID ORDER BY (a.deathYear - a.birthYear) DESC LIMIT 1
SELECT COUNT(paintingID) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)
SELECT lname, title, year FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE fname = 'Mary';
SELECT lname, title, year FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE fname = 'Mary';
SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)
SELECT width_mm FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850
SELECT location, medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo';
SELECT location, medium FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Pablo'
SELECT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID
SELECT a.fname || ' ' || a.lname AS FullName FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID;
SELECT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND a.artistID IN (   SELECT painterID   FROM Paintings   WHERE medium = 'lithographic' ) GROUP BY a.artistID;
SELECT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' INTERSECT SELECT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'lithographic';
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884 AND mediumOn = 'canvas')
SELECT birthYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year = 1884);
SELECT DISTINCT a.fname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'Gallery 241'
SELECT fname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 241')
SELECT COUNT(*) AS NumberOfWorks, medium FROM (   SELECT medium FROM Paintings   UNION ALL   SELECT medium FROM Sculptures ) AS CombinedMediums GROUP BY medium
SELECT medium, COUNT(*) AS total_works FROM (     SELECT medium     FROM Paintings     UNION ALL     SELECT medium     FROM Sculptures ) AS combined GROUP BY medium
SELECT AVG(height_mm) AS average_height, medium FROM Paintings GROUP BY medium;
SELECT AVG(height_mm) AS average_height, medium FROM Paintings GROUP BY medium;
SELECT COUNT(paintingID) AS NumberOfPaintings, location FROM Paintings WHERE year < 1900 GROUP BY location
SELECT COUNT(DISTINCT location) FROM Paintings WHERE year < 1900;
SELECT titles FROM Paintings WHERE year > 1910 AND medium = 'oil';
SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910
SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 240' GROUP BY painterID;
SELECT painterID FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 240' GROUP BY painterID
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE mediumOn = 'canvas')
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings WHERE mediumOn = 'canvas')
SELECT DISTINCT p1.paintingID FROM Paintings p1, Paintings p2 WHERE p1.year < p2.year AND p2.location = 'Gallery 240'
SELECT DISTINCT p1.paintingID FROM Paintings p1, Paintings p2 WHERE p1.year < p2.year AND p2.location = 'Gallery 240'
SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1
SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1
SELECT lname, fname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE title LIKE '%female%')
SELECT lname || ', ' || fname AS FullName FROM Artists JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE title LIKE '%female%';
SELECT title FROM Paintings ORDER BY title ASC;
SELECT title FROM Paintings ORDER BY title ASC;
SELECT title FROM Paintings ORDER BY width_mm ASC
SELECT title FROM Paintings ORDER BY height_mm ASC
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950
SELECT p.title AS PaintingTitle, s.title AS SculptureTitle FROM Paintings p FULL OUTER JOIN Sculptures s ON 1 = 0 WHERE (p.year BETWEEN 1900 AND 1950) OR (s.year BETWEEN 1900 AND 1950);
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;
SELECT artistID, COUNT(paintingID) AS NumberOfPaintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE year < 1900 GROUP BY artistID ORDER BY NumberOfPaintings DESC LIMIT 1
SELECT artistID FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT fname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT titles FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT location FROM Paintings WHERE mediumOn IN ('panel', 'canvas');
SELECT location FROM Paintings WHERE mediumOn IN ('panels', 'canvas');
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT AVG(height_mm) AS average_height, AVG(width_mm) AS average_width FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 241';
SELECT AVG(height_mm) AS average_height, AVG(width_mm) AS average_width FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 241';
SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year
SELECT AVG(height_mm) AS average_height, AVG(width_mm) AS average_width, a.fname, a.lname FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY p.painterID, a.fname, a.lname ORDER BY a.lname, a.fname;
SELECT AVG(height_mm) AS average_height, AVG(width_mm) AS average_width, a.fname, a.lname FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY p.painterID, a.fname, a.lname ORDER BY a.lname, a.fname;
SELECT fname, COUNT(paintingID) AS NumberOfPaintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(paintingID) >= 2
SELECT fname, COUNT(*) AS NumberOfPaintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.artistID HAVING COUNT(*) >= 2
SELECT a.deathYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID HAVING COUNT(p.paintingID) <= 3
SELECT deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING COUNT(paintingID) < 4)
SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)
SELECT a.deathYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID ORDER BY COUNT(s.sculptureID) ASC LIMIT 1
SELECT paintingID, height_mm FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1
SELECT height_mm, paintingID FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1
SELECT paintingID FROM Paintings WHERE year < ALL (SELECT year FROM Paintings WHERE location = 'Gallery 240')
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240')
SELECT paintingID FROM Paintings AS p1 WHERE height_mm > ALL (SELECT height_mm FROM Paintings WHERE year > 1900)
SELECT height_mm FROM Paintings WHERE year > 1900 ORDER BY height_mm DESC LIMIT 1) AS LongestPost1900Height)
SELECT COUNT(p.paintingID) AS NumberOfPaintings, a.fname, a.lname FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.medium = 'oil' GROUP BY a.artistID ORDER BY NumberOfPaintings DESC LIMIT 3
SELECT artistID, lname, fname, COUNT(*) AS NumberOfOilPaintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE medium = 'oil' GROUP BY artistID ORDER BY NumberOfOilPaintings DESC LIMIT 1
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year;
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year;
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title;
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures);
SELECT fname, lname FROM Artists WHERE artistID NOT IN (SELECT sculptorID FROM Sculptures) AND artistID IN (SELECT painterID FROM Paintings);
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas' GROUP BY location;
SELECT title, year, medium, mediumOn, location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas';
SELECT COUNT(*) FROM race;
SELECT COUNT(*) FROM race;
SELECT WINNING_DRIVER, WINNING_TEAM FROM RACE ORDER BY WINNING_TEAM ASC;
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC;
SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous';
SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous';
SELECT Constructors FROM driver ORDER BY Age ASC
SELECT Constructors FROM driver ORDER BY Age ASC;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20
SELECT MAX(Age) AS Maximum_Age, MIN(Age) AS Minimum_Age FROM driver
SELECT MAX(Age) AS Maximum_Age, MIN(Age) AS Minimum_Age FROM driver
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT Driver_Name, Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID;
SELECT Driver_Name, Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID;
SELECT Driver_Name, COUNT(race.Driver_ID) AS NumberOfRaces FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_Name;
SELECT COUNT(race.Driver_ID) AS Race_Count, driver.Driver_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID GROUP BY race.Driver_ID, driver.Driver_Name
SELECT MAX(d.Age) AS Age FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID ORDER BY COUNT(r.Road) DESC LIMIT 1
SELECT COUNT(race.Driver_ID) AS Race_Count, driver.Age FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID GROUP BY race.Driver_ID ORDER BY Race_Count DESC LIMIT 1
SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (   SELECT Driver_ID   FROM race   GROUP BY Driver_ID   HAVING COUNT(Road) >= 2 )
SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(Road) >= 2)
SELECT FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE driver.Age >= 26 GROUP BY race.Race_Name;
SELECT Race_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE driver.Age >= 26
SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti';
SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti';
SELECT COUNT(Driver_ID) AS NumberOfDrivers, Constructor FROM driver GROUP BY Constructor
SELECT COUNT(Driver_ID) AS NumberOfDrivers, Constructor FROM driver GROUP BY Constructor
SELECT COUNT(Engine), Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1
SELECT COUNT(Engine), Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) >= 2
SELECT COUNT(Driver_ID) AS Driver_Count, Engine FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) >= 2
SELECT Driver_Name FROM driver LEFT JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Driver_ID IS NULL;
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race);
SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30
SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30;
SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1
SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1;
SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' INTERSECT SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')
SELECT Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY Driver_Name HAVING COUNT(DISTINCT Pole_Position) = 2
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')
SELECT COUNT(*) FROM languages;
SELECT COUNT(id) FROM languages;
SELECT name FROM languages ORDER BY name ASC;
SELECT name FROM languages ORDER BY name ASC;
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT names FROM countries ORDER BY overall_score DESC;
SELECT names FROM countries ORDER BY overall_score DESC
SELECT AVG(justice_score) FROM countries
SELECT AVG(justice_score) FROM countries;
SELECT MAX(health_score) AS MaxHealthScore, MIN(health_score) AS MinHealthScore FROM countries WHERE name != 'Norway'
SELECT MAX(health_score) AS MaxHealthScore, MIN(health_score) AS MinHealthScore FROM countries WHERE name != 'Norway';
SELECT COUNT(DISTINCT language_id) FROM official_languages
SELECT COUNT(DISTINCT language_id) FROM official_languages;
SELECT names FROM countries ORDER BY education_score DESC;
SELECT countries.name FROM countries ORDER BY countries.education_score DESC
SELECT MAX(politics_score) FROM countries;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT countries.name, languages.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id
SELECT countries.name AS country_name, languages.name AS language_name FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id
SELECT languages.name, COUNT(official_languages.country_id) AS number_of_countries FROM languages JOIN official_languages ON languages.id = official_language.language_id GROUP BY languages.name
SELECT languages.name, COUNT(official_languages.country_id) AS number_of_countries FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.name
SELECT language_id, COUNT(country_id) AS country_count FROM official_languages GROUP BY language_id ORDER BY country_count DESC LIMIT 1
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(official_languages.country_id) >= 2
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(official_languages.country_id) >= 2
SELECT AVG(countries.overall_score) FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'
SELECT AVG(countries.overall_score) FROM countries JOIN official_languages ON countries.id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id WHERE languages.name = 'English'
SELECT languages.name, COUNT(official_languages.language_id) AS language_count FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name ORDER BY language_count DESC LIMIT 3
SELECT languages.name, COUNT(official_languages.country_id) AS country_count FROM official_languages JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.name ORDER BY country_count DESC LIMIT 3
SELECT languages.name, AVG(countries.overall_score) AS avg_overall_score FROM official_languages JOIN languages ON official_languages.language_id = languages.id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY avg_overall_score DESC
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.name ORDER BY AVG(countries.overall_score) DESC
SELECT countries.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.id ORDER BY COUNT(official_languages.language_id) DESC LIMIT 1
SELECT COUNT(official_languages.language_id) AS num_languages, countries.name FROM official_languages JOIN countries ON official_languages.country_id = countries.id GROUP BY official_languages.country_id ORDER BY num_languages DESC LIMIT 1
SELECT languages.name FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.country_id IS NULL
SELECT languages.name FROM languages LEFT JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.language_id IS NULL
SELECT countries.name FROM countries LEFT JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IS NULL
SELECT countries.name FROM countries LEFT JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IS NULL
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id WHERE countries.overall_score > 95 OR countries.overall_score < 90 GROUP BY languages.name HAVING COUNT(DISTINCT countries.id) > 1
SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries AS countries_above_95 ON official_languages.country_id = countries_above_95.id AND countries_above_95.overall_score > 95 JOIN countries AS countries_below_90 ON official_languages.country_id = countries_below_90.id AND countries_below_90.overall_score < 90 GROUP BY languages.name
SELECT country, town_city FROM Addresses GROUP BY country, town_city
SELECT country, town_city FROM Addresses;
SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id
SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id
SELECT feature_description FROM Features WHERE feature_name = 'rooftop';
SELECT feature_description FROM Features WHERE feature_name = 'rooftop';
SELECT feature_name, feature_description FROM Features WHERE feature_id = (   SELECT feature_id   FROM Property_Features   GROUP BY feature_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT feature_name, feature_description FROM Features WHERE feature_id = (   SELECT feature_id   FROM Property_Features   GROUP BY feature_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT MIN(room_count) FROM Properties;
SELECT MIN(room_count) FROM Properties
SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 1
SELECT COUNT(*) FROM Properties WHERE parking_lots = 1 OR garage_yn = 1
SELECT age_category_code FROM Users JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE user_category_description LIKE '%Mother%'
SELECT age_category_code FROM Ref_User_Categories WHERE user_category_description LIKE '%Mother%';
SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(property_id) DESC LIMIT 1)
SELECT first_name FROM Users WHERE user_id = (SELECT owner_user_id FROM Properties GROUP BY owner_user_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT AVG(room_count) FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden';
SELECT AVG(room_count) FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'garden'
SELECT town_city FROM Addresses  JOIN Properties ON Addresses.address_id = Properties.property_address_id  JOIN Property_Features ON Properties.property_id = Property_Features.property_id  JOIN Features ON Property_Features.feature_id = Features.feature_id  WHERE Features.feature_name = 'swimming pool'
SELECT town_city FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE property_id IN (SELECT property_id FROM Property_Features WHERE feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool')))
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1
SELECT AVG(room_count) FROM Properties;
SELECT AVG(room_count) FROM Properties;
SELECT COUNT(DISTINCT room_size) FROM Rooms;
SELECT COUNT(DISTINCT room_size) FROM Rooms;
SELECT user_id, search_string FROM User_Searches GROUP BY user_id, search_string HAVING COUNT(search_seq) >= 2
SELECT user_id, COUNT(search_seq) AS search_count FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2;
SELECT MAX(search_datetime) FROM User_Searches
SELECT MAX(search_datetime) FROM User_Searches
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC
SELECT A.zip_postcode FROM Addresses A JOIN Properties P ON A.address_id = P.property_address_id WHERE P.owner_user_id NOT IN (     SELECT owner_user_id     FROM Properties     GROUP BY owner_user_id     HAVING COUNT(property_id) <= 2 )
SELECT zip_postcode FROM Addresses JOIN Properties ON Addresses.address_id = Properties.property_address_id WHERE Properties.owner_user_id NOT IN (   SELECT owner_user_id   FROM Properties   GROUP BY owner_user_id   HAVING COUNT(property_id) <= 2 )
SELECT user_id, user_category_code FROM Users WHERE user_id IN (   SELECT user_id   FROM User_Searches   GROUP BY user_id   HAVING COUNT(search_seq) = 1 )
SELECT user_id, user_category_code FROM Users WHERE user_id IN (   SELECT user_id   FROM User_Searches   GROUP BY user_id   HAVING COUNT(search_seq) = 1 )
SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1)
SELECT age_category_code FROM Users WHERE user_id = (SELECT user_id FROM User_Searches ORDER BY search_datetime ASC LIMIT 1)
SELECT login_name FROM Users WHERE user_category_code = 'Senior Citizen' ORDER BY first_name
SELECT login_name FROM Users WHERE user_category_code = 'Senior Citizen' ORDER BY first_name
SELECT COUNT(*) FROM User_Searches WHERE user_id IN (SELECT user_id FROM Users WHERE is_buyer = 1)
SELECT COUNT(*) FROM User_Searches JOIN Users ON User_Searches.user_id = Users.user_id WHERE Users.is_buyer = 1
SELECT date_registered FROM Users WHERE login_name = 'ratione';
SELECT date_registered FROM Users WHERE login_name = 'ratione';
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller IS NOT NULL
SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM Addresses a JOIN Users u ON a.address_id = u.user_address_id JOIN Ref_User_Categories ruc ON u.user_category_code = ruc.user_category_code WHERE ruc.user_category_description = 'Senior Citizen'
SELECT addresses.line_1_number_building, addresses.line_2_number_street, addresses.town_city FROM addresses JOIN users ON addresses.address_id = users.user_address_id JOIN ref_user_categories ON users.user_category_code = ref_user_categories.user_category_code WHERE ref_user_categories.user_category_description = 'Senior Citizen'
SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2
SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2
SELECT COUNT(photo_seq) AS photo_count, property_id FROM Property_Photos GROUP BY property_id
SELECT COUNT(photo_seq) AS photo_count, property_id FROM Property_Photos GROUP BY property_id
SELECT users.user_id, COUNT(property_photos.photo_seq) AS number_of_photos FROM users JOIN properties ON users.user_id = properties.owner_user_id JOIN property_photos ON properties.property_id = property_photos.property_id GROUP BY users.user_id
SELECT owner_user_id AS user_id, COUNT(photo_seq) AS photo_count FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY owner_user_id
SELECT SUM(price_max) FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id WHERE Users.user_category_code IN ('Single Mother', 'Student');
SELECT SUM(price_max) FROM Properties  JOIN Users ON Properties.owner_user_id = Users.user_id  WHERE Users.user_category_code IN ('Single Mother', 'Student');
SELECT datestamp, property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp
SELECT datestamp, property_name FROM User_Property_History JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY datestamp;
SELECT property_type_code, property_type_description FROM Ref_Property_Types WHERE property_type_code = (   SELECT property_type_code   FROM Properties   GROUP BY property_type_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT property_type_code, COUNT(property_type_code) AS type_count, property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code GROUP BY property_type_code ORDER BY type_count DESC LIMIT 1
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60';
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60';
SELECT room_size, COUNT(*) AS count FROM Rooms GROUP BY room_size;
SELECT COUNT(room_number) AS room_count, room_size FROM Rooms GROUP BY room_size
SELECT country FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.first_name = 'Robbie';
SELECT country FROM Addresses JOIN Users ON Addresses.address_id = Users.user_address_id WHERE Users.first_name = 'Robbie';
SELECT Users.first_name, Users.middle_name, Users.last_name FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE Users.user_address_id = Properties.property_address_id
SELECT Users.first_name || ' ' || Users.middle_name || ' ' || Users.last_name AS full_name FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN Addresses ON Users.user_address_id = Addresses.address_id WHERE Properties.property_address_id = Addresses.address_id
SELECT Users.user_id, User_Searches.search_string FROM Users LEFT JOIN Properties ON Users.user_id = Properties.owner_user_id INNER JOIN User_Searches ON Users.user_id = User_Searches.user_id WHERE Properties.owner_user_id IS NULL
SELECT search_string FROM User_Searches WHERE user_id NOT IN (   SELECT owner_user_id   FROM Properties )
SELECT last_name, Users.user_id FROM Users JOIN Properties ON Users.user_id = Properties.owner_user_id JOIN User_Searches ON Users.user_id = User_Searches.user_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Properties.property_id) >= 2 AND COUNT(DISTINCT User_Searches.search_seq) <= 2
SELECT u.last_name, u.user_id FROM Users u JOIN (     SELECT owner_user_id     FROM Properties     GROUP BY owner_user_id     HAVING COUNT(property_id) >= 2 ) AS p ON u.user_id = p.owner_user_id LEFT JOIN (     SELECT user_id, COUNT(search_seq) AS search_count     FROM User_Searches     GROUP BY user_id ) AS s ON u.user_id = s.user_id WHERE COALESCE(s.search_count, 0) <= 2
SELECT COUNT(*) FROM bike WHERE weight > 780;
SELECT product_name, weight FROM bike ORDER BY price ASC
SELECT heat, name, nation FROM cyclist
SELECT MAX(weight) AS MaxWeight, MIN(weight) AS MinWeight FROM bike
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC';
SELECT name, result FROM cyclist WHERE nation != 'Russia'
SELECT DISTINCT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015
SELECT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id HAVING COUNT(cyclists_own_bikes.cyclist_id) >= 4
SELECT MAX(bike_count) AS max_bikes, cyclist_id, name FROM (   SELECT COUNT(cb.bike_id) AS bike_count, c.id AS cyclist_id, c.name   FROM cyclists_own_bikes cb   JOIN cyclist c ON cb.cyclist_id = c.id   GROUP BY c.id ) AS subquery GROUP BY cyclist_id, name ORDER BY max_bikes DESC LIMIT 1
SELECT DISTINCT bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.nation IN ('Russia', 'Great Britain')
SELECT COUNT(DISTINCT heat) FROM cyclist;
SELECT COUNT(DISTINCT cyclist.id)  FROM cyclist  LEFT JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id  WHERE cyclists_own_bikes.purchase_year IS NULL OR cyclists_own_bikes.purchase_year <= 2015
SELECT product_name FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE result < '4:21.558')) GROUP BY product_name
SELECT bike.product_name, bike.price FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY bike.product_name, bike.price HAVING COUNT(DISTINCT cyclist.name) = 2
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes);
SELECT product_name FROM bike WHERE material LIKE '%fiber%';
SELECT COUNT(bike_id) AS number_of_bikes FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id
SELECT MAX(Price), Flavor FROM goods WHERE Food = 'Cake' GROUP BY Flavor ORDER BY Price DESC LIMIT 1;
SELECT MAX(Price), Id, Flavor FROM goods WHERE Food = 'Cake' GROUP BY Id, Flavor ORDER BY Price DESC LIMIT 1
SELECT MIN(Price), Flavor FROM goods WHERE Food = 'Cookie' GROUP BY Flavor ORDER BY Price ASC LIMIT 1
SELECT Id, Flavor FROM goods WHERE Food = 'Cookie' ORDER BY Price ASC LIMIT 1
SELECT Flavor FROM goods WHERE Flavor = 'Apple';
SELECT Flavor FROM goods WHERE Flavor = 'Apple';
SELECT Price FROM goods WHERE Price < 3;
SELECT Price FROM goods WHERE Price < 3;
SELECT DISTINCT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' AND goods.Flavor = 'Lemon'
SELECT DISTINCT customers.Id FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'Lemon' AND goods.Food = 'Cake'
SELECT COUNT(DISTINCT r.CustomerId) AS CustomerCount, g.Food FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food
SELECT COUNT(DISTINCT r.CustomerId) AS NumberOfCustomers, g.Food FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food
SELECT COUNT(receipts.CustomerId) AS NumberOfVisits, receipts.CustomerId FROM receipts GROUP BY receipts.CustomerId HAVING COUNT(receipts.CustomerId) >= 15;
SELECT COUNT(receipts.ReceiptNumber) AS NumberOfReceipts, receipts.CustomerId FROM receipts GROUP BY receipts.CustomerId HAVING COUNT(receipts.ReceiptNumber) >= 15
SELECT LastName FROM customers WHERE Id IN (     SELECT CustomerId     FROM receipts     GROUP BY CustomerId     HAVING COUNT(ReceiptNumber) > 10 )
SELECT LastName FROM customers WHERE Id IN (     SELECT CustomerId     FROM receipts     GROUP BY CustomerId     HAVING COUNT(ReceiptNumber) > 10 )
SELECT COUNT(DISTINCT Id) FROM goods WHERE Food = 'Cake';
SELECT COUNT(DISTINCT Id) FROM goods WHERE Food = 'Cake';
SELECT Flavor FROM goods WHERE Food = 'Croissant';
SELECT Flavor FROM goods WHERE Food = 'Croissant';
SELECT goods.Flavor, goods.Food, goods.Price FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15 GROUP BY goods.Flavor, goods.Food, goods.Price
SELECT goods.Id, goods.Flavor, goods.Food, goods.Price FROM goods JOIN items ON goods.Id = items.Item JOIN receipts ON items.Receipt = receipts.ReceiptNumber WHERE receipts.CustomerId = 15 GROUP BY goods.Id, goods.Flavor, goods.Food, goods.Price;
SELECT Food, AVG(Price) AS AveragePrice, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice FROM goods GROUP BY Food
SELECT AVG(Price) AS AveragePrice, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice, Food FROM goods GROUP BY Food;
SELECT Receipt FROM items i1 JOIN items i2 ON i1.Receipt = i2.Receipt JOIN goods g1 ON i1.Item = g1.Id JOIN goods g2 ON i2.Item = g2.Id WHERE g1.Food = 'Cake' AND g2.Food = 'Cookie' GROUP BY i1.Receipt
SELECT Receipt FROM items i1 JOIN items i2 ON i1.Receipt = i2.Receipt JOIN goods g1 ON i1.Item = g1.Id JOIN goods g2 ON i2.Item = g2.Id WHERE g1.Food = 'Cake' AND g2.Food = 'Cookie' GROUP BY i1.Receipt
SELECT receipts.ReceiptNumber FROM receipts JOIN customers ON receipts.CustomerId = customers.Id JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE customers.LastName = 'LOGAN' AND goods.Food = 'Croissant'
SELECT receipts.ReceiptNumber FROM receipts JOIN customers ON receipts.CustomerId = customers.Id JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE customers.LastName = 'Logan' AND goods.Food = 'Croissant'
SELECT MAX(g.Price) AS MaxPrice FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber;
SELECT MAX(g.Price) AS MaxPrice FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber;
SELECT Item, COUNT(*) AS PurchaseCount FROM items GROUP BY Item ORDER BY PurchaseCount ASC LIMIT 1
SELECT Item, COUNT(*) AS PurchaseCount FROM items GROUP BY Item ORDER BY PurchaseCount ASC LIMIT 1
SELECT COUNT(Id) AS NumberOfGoods, Food FROM goods GROUP BY Food
SELECT COUNT(Id) AS NumberOfGoods, Food FROM goods GROUP BY Food
SELECT AVG(Price) AS AveragePrice, Food FROM goods GROUP BY Food
SELECT AVG(Price) AS AveragePrice, Food FROM goods GROUP BY Food
SELECT Flavor, Price FROM goods WHERE Flavor = 'Apricot' AND Price < 5;
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5;
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Price > 10;
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Price > 10;
SELECT DISTINCT goods.Id, goods.Price FROM goods WHERE goods.Price < (SELECT AVG(Price) FROM goods);
SELECT DISTINCT goods.Id, goods.Price FROM goods WHERE goods.Price < (SELECT AVG(Price) FROM goods);
SELECT DISTINCT goods.Id FROM goods WHERE goods.Price < (SELECT MIN(goods.Price) FROM goods WHERE goods.Food = 'Tart')
SELECT DISTINCT goods.Id FROM goods WHERE goods.Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Tart');
SELECT DISTINCT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13;
SELECT DISTINCT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13;
SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15
SELECT Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15
SELECT Id FROM goods WHERE Id LIKE '%APP%'
SELECT Id FROM goods WHERE Id LIKE '%APP%';
SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%';
SELECT Id, Price FROM goods WHERE Id LIKE '%70%'
SELECT LastName FROM customers ORDER BY LastName ASC
SELECT LastName FROM customers ORDER BY LastName ASC
SELECT goods.Id FROM goods ORDER BY goods.Id ASC
SELECT DISTINCT Id FROM goods ORDER BY Id;
SELECT DISTINCT r.ReceiptNumber, r.Date, r.CustomerId FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Apple' AND g.Food = 'Pie' OR r.CustomerId = 12
SELECT DISTINCT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id LEFT JOIN customers c ON r.CustomerId = c.Id WHERE g.Flavor = 'Apple' AND g.Food = 'Pie' OR r.CustomerId = 12;
SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts);
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1
SELECT DISTINCT r.* FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE r.Date = (SELECT MIN(Date) FROM receipts) OR g.Price > 10
SELECT MIN(Date) AS EarliestDate FROM receipts UNION SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 10;
SELECT Id FROM goods WHERE Food IN ('Cookie', 'Cake') AND Price BETWEEN 3 AND 7;
SELECT Id FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND Price BETWEEN 3 AND 7;
SELECT FirstName, LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY Date ASC LIMIT 1
SELECT FirstName, LastName FROM customers WHERE Id = (SELECT CustomerId FROM receipts ORDER BY Date ASC LIMIT 1)
SELECT AVG(Price) FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry');
SELECT AVG(Price) FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry');
SELECT MIN(Price) FROM goods WHERE Flavor = 'Cheese';
SELECT MIN(Price) FROM goods WHERE Flavor = 'Cheese';
SELECT Flavor, MAX(Price) AS HighestPrice, MIN(Price) AS LowestPrice, AVG(Price) AS AveragePrice FROM goods GROUP BY Flavor ORDER BY Flavor;
SELECT MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice, AVG(Price) AS AvgPrice, Flavor FROM goods GROUP BY Flavor ORDER BY Flavor;
SELECT MIN(Price) AS LowestPrice, MAX(Price) AS HighestPrice, Food FROM goods GROUP BY Food ORDER BY Food;
SELECT MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice, Food FROM goods GROUP BY Food ORDER BY Food;
SELECT DATE, COUNT(ReceiptNumber) AS NumberOfReceipts FROM receipts GROUP BY Date ORDER BY NumberOfReceipts DESC LIMIT 3
SELECT DATE, COUNT(ReceiptNumber) AS ReceiptCount FROM receipts GROUP BY Date ORDER BY ReceiptCount DESC LIMIT 3
SELECT COUNT(receipts.ReceiptNumber) AS NumberOfTimes, customers.FirstName, customers.LastName FROM receipts JOIN customers ON receipts.CustomerId = customers.Id GROUP BY customers.Id ORDER BY NumberOfTimes DESC LIMIT 1;
SELECT COUNT(items.Receipt) AS NumberOfPurchases, receipts.CustomerId FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY receipts.CustomerId ORDER BY NumberOfPurchases DESC LIMIT 1;
SELECT DATE(Date), COUNT(DISTINCT CustomerId) FROM receipts GROUP BY DATE(Date)
SELECT COUNT(customers.Id) AS NumberOfCustomers, receipts.Date FROM customers JOIN receipts ON customers.Id = receipts.CustomerId GROUP BY receipts.Date
SELECT FirstName, LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts WHERE ReceiptNumber IN (SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Flavor = 'Apple' AND Food = 'Tart')))
SELECT customers.FirstName, customers.LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'Apple' AND goods.Food = 'Tart';
SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant')
SELECT goods.Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant') AND Food = 'Cookie';
SELECT goods.Id FROM goods WHERE goods.Food = 'Cake' AND goods.Price >= (SELECT AVG(goods.Price) FROM goods WHERE goods.Food = 'Tart')
SELECT AVG(Price) FROM goods WHERE Food = 'Tart') AS AvgTartPrice WHERE Food = 'Cake' AND Price >= AvgTartPrice;
SELECT AVG(Price) FROM goods) AS AvgPrice WHERE Price > 2 * AvgPrice;
SELECT AVG(Price) FROM goods) AS AvgPrice WHERE Price > 2 * AvgPrice;
SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY goods.Price;
SELECT goods.Id, goods.Flavor, goods.Food FROM goods ORDER BY goods.Price ASC
SELECT goods.Id, goods.Flavor FROM goods WHERE goods.Food = 'Cake' ORDER BY goods.Flavor;
SELECT Flavor, Id FROM goods WHERE Food = 'Cake' ORDER BY Flavor;
SELECT goods.Id, goods.Flavor, goods.Food, goods.Price FROM goods LEFT JOIN items ON goods.Id = items.Item GROUP BY goods.Id HAVING goods.Flavor = 'Chocolate' AND COUNT(items.Item) <= 10
SELECT goods.Id, goods.Flavor, COUNT(items.Receipt) AS PurchaseCount FROM goods JOIN items ON goods.Id = items.Item WHERE goods.Flavor = 'Chocolate' GROUP BY goods.Id HAVING COUNT(items.Receipt) <= 10
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart');
SELECT TOP 3 goods.Id, goods.Flavor, goods.Food, COUNT(items.Item) AS NumberOfOrders FROM goods JOIN items ON goods.Id = items.Item GROUP BY goods.Id, goods.Flavor, goods.Food ORDER BY NumberOfOrders DESC
SELECT TOP 3 items.Item, COUNT(*) AS PurchaseCount FROM items GROUP BY items.Item ORDER BY PurchaseCount DESC
SELECT SUM(g.Price) AS TotalSpent, r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING TotalSpent > 150
SELECT SUM(g.Price) AS TotalSpent, r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING TotalSpent > 150
SELECT AVG(g.Price) AS AverageSpending, r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.CustomerId HAVING AverageSpending > 5;
SELECT AVG(g.Price) AS AveragePrice, r.CustomerId FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY r.CustomerId HAVING AveragePrice > 5
SELECT SUM(g.Price), r.Date FROM items i JOIN goods g ON i.Item = g.Id JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY r.Date HAVING SUM(g.Price) > 100;
SELECT SUM(g.Price) AS TotalSales, r.Date FROM items i JOIN goods g ON i.Item = g.Id JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY r.Date HAVING SUM(g.Price) > 100;
SELECT COUNT(Driver_ID) FROM driver;
SELECT COUNT(Driver_ID) FROM driver;
SELECT COUNT(driver.Driver_ID) AS NumberOfDrivers, driver.Make FROM driver WHERE driver.Points > 150 GROUP BY driver.Make
SELECT MAKE, COUNT(*) AS NumberOfDrivers FROM driver WHERE Points > 150 GROUP BY Make
SELECT AVG(Age) AS Average_Age, Make FROM driver GROUP BY Make;
SELECT AVG(Age) AS Average_Age, Make FROM driver GROUP BY Make;
SELECT AVG(Laps) FROM driver WHERE Age < 20;
SELECT AVG(Laps) FROM driver WHERE Age < 20
SELECT Managers, Sponsors FROM team ORDER BY Car_Owner;
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner;
SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1;
SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1
SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington';
SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington';
SELECT MAX(Points) AS MaxPoints, MIN(Points) AS MinPoints FROM driver
SELECT MAX(Points) AS HighestPoints, MIN(Points) AS LowestPoints FROM driver
SELECT COUNT(*) FROM driver WHERE Points < 150;
SELECT COUNT(*) FROM driver WHERE Points < 150;
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver, Points FROM driver ORDER BY Points DESC
SELECT driver.Driver, driver.Points FROM driver ORDER BY driver.Points DESC
SELECT driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id
SELECT driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id
SELECT MAX(driver.Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'
SELECT MAX(driver.Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin'
SELECT AVG(driver.Age) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Official_native_language = 'English'
SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English'
SELECT country.Country FROM country JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points > 150;
SELECT country.Country, country.Capital FROM country JOIN driver ON country.Country_Id = driver.Country WHERE driver.Points > 150;
SELECT Capital FROM country WHERE Country_Id = (SELECT Country FROM driver ORDER BY Points DESC LIMIT 1)
SELECT c.Capital  FROM country c  JOIN driver d ON c.Country_Id = d.Country  ORDER BY d.Points DESC  LIMIT 1
SELECT MAKE, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY MAKE;
SELECT MAKE, COUNT(DRIVER_ID) AS Driver_Count FROM DRIVER GROUP BY MAKE;
SELECT MAX(t.Make) FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Make ORDER BY COUNT(td.Driver_ID) DESC LIMIT 1
SELECT Make, COUNT(Driver_ID) AS NumberOfDrivers FROM driver GROUP BY Make ORDER BY NumberOfDrivers DESC LIMIT 1;
SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3
SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3;
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT team.Team_ID, team.Team FROM team LEFT JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE team_driver.Driver_ID IS NULL
SELECT country.Country FROM country JOIN driver ON country.Country_Id = driver.Country WHERE driver.Make = 'Dodge' INTERSECT SELECT country.Country FROM country JOIN driver ON country.Country_Id = driver.Country WHERE driver.Make = 'Chevrolet';
SELECT C.Country FROM country C JOIN driver D ON C.Country_Id = D.Country WHERE D.Make = 'Dodge' INTERSECT SELECT C.Country FROM country C JOIN driver D ON C.Country_Id = D.Country WHERE D.Make = 'Chevrolet';
SELECT SUM(Points) AS Total_Points, AVG(Points) AS Average_Points FROM driver
SELECT SUM(Points) AS Total_Points, AVG(Points) AS Average_Points FROM driver
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver);
SELECT country.Country FROM country LEFT JOIN driver ON country.Country_Id = driver.Country WHERE driver.Country IS NULL
SELECT Manager, Sponsor FROM team WHERE Team_ID = (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(Driver_ID) DESC LIMIT 1)
SELECT Manager, Sponsor FROM team WHERE Team_ID = (     SELECT Team_ID     FROM team_driver     GROUP BY Team_ID     ORDER BY COUNT(Driver_ID) DESC     LIMIT 1 )
SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (     SELECT Team_ID     FROM team_driver     GROUP BY Team_ID     HAVING COUNT(Driver_ID) >= 2 )
SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (   SELECT Team_ID   FROM team_driver   GROUP BY Team_ID   HAVING COUNT(Driver_ID) >= 2 )
SELECT COUNT(*) FROM institution
SELECT COUNT(*) FROM institution
SELECT Name FROM institution ORDER BY Name ASC;
SELECT Name FROM institution ORDER BY Name ASC;
SELECT Name FROM institution ORDER BY Founded ASC
SELECT Name FROM institution ORDER BY Founded ASC
SELECT City, Province FROM institution
SELECT City, Province FROM institution
SELECT MAX(Enrollment) AS Maximum_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM institution
SELECT MAX(Enrollment) AS MaxEnrollment, MIN(Enrollment) AS MinEnrollment FROM institution
SELECT Affiliation FROM institution WHERE City != 'Vancouver'
SELECT Affiliation FROM institution WHERE City != 'Vancouver'
SELECT Stadium, Capacity FROM institution ORDER BY Capacity DESC
SELECT Stadium, Capacity FROM institution ORDER BY Capacity DESC
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
SELECT Name, Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID
SELECT Name, Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID
SELECT Nickname FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID ORDER BY Enrollment ASC LIMIT 1
SELECT MIN(Enrollment), Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID GROUP BY Nickname ORDER BY Enrollment ASC LIMIT 1
SELECT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Championship.Number_of_Championships DESC
SELECT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Championship.Number_of_Championships DESC
SELECT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Number_of_Championships >= 1
SELECT Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Number_of_Championships >= 1
SELECT SUM(Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE Affiliation = 'Public';
SELECT SUM(Number_of_Championships) FROM Championship JOIN institution ON Championship.Institution_ID = institution.Institution_ID WHERE Affiliation = 'Public'
SELECT COUNT(Name) AS NumberOfInstitutions, Affiliation FROM institution GROUP BY Affiliation
SELECT COUNT(Institution_ID), Affiliation FROM institution GROUP BY Affiliation
SELECT COUNT(Affiliation), Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1
SELECT MAX(Count) FROM (SELECT Affiliation, COUNT(Affiliation) AS Count FROM institution GROUP BY Affiliation) AS AffiliationCount;
SELECT Founded, COUNT(*) AS NumberOfInstitutions FROM institution GROUP BY Founded HAVING COUNT(*) > 1;
SELECT YEAR(Founded) AS Year, COUNT(*) AS NumberOfInstitutions FROM institution GROUP BY YEAR(Founded) HAVING COUNT(*) > 1;
SELECT Institution.Name, Championship.Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY institution.Capacity DESC
SELECT Nicknames FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Capacity DESC;
SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary')
SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary');
SELECT DISTINCT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT DISTINCT Province FROM institution WHERE Founded > 1950;
SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950;
SELECT COUNT(DISTINCT Province) FROM institution;
SELECT COUNT(DISTINCT Province) FROM institution;
SELECT FROM Warehouses;
SELECT * FROM Warehouses;
SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York' GROUP BY Contents
SELECT Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York' GROUP BY Contents
SELECT Contents FROM Boxes WHERE Value > 150.0
SELECT Contents FROM Boxes WHERE Value > 150;
SELECT AVG(Boxes.Value) AS AverageValue, Boxes.Warehouse FROM Boxes GROUP BY Boxes.Warehouse
SELECT AVG(Value) AS AverageValue, Warehouse FROM Boxes GROUP BY Warehouse
SELECT AVG(Value) AS AverageValue, SUM(Value) AS TotalValue FROM Boxes;
SELECT AVG(Value) AS AverageValue, SUM(Value) AS TotalValue FROM Boxes
SELECT AVG(Capacity) AS AverageCapacity, SUM(Capacity) AS TotalCapacity FROM Warehouses;
SELECT AVG(Capacity) AS AverageCapacity, SUM(Capacity) AS TotalCapacity FROM Warehouses;
SELECT AVG(Value) AS AverageValue, MAX(Value) AS MaxValue, Contents FROM Boxes GROUP BY Contents
SELECT AVG(Value) AS AverageValue, MAX(Value) AS MaxValue, Contents FROM Boxes GROUP BY Contents
SELECT SUM(Value) AS TotalValue, Contents FROM Boxes GROUP BY Contents ORDER BY TotalValue DESC LIMIT 1
SELECT Contents FROM Boxes ORDER BY Value DESC LIMIT 1
SELECT AVG(Value) FROM Boxes;
SELECT AVG(Value) FROM Boxes;
SELECT Contents FROM Boxes GROUP BY Contents;
SELECT DISTINCT Contents FROM Boxes;
SELECT COUNT(DISTINCT Contents) FROM Boxes
SELECT COUNT(DISTINCT Contents) FROM Boxes;
SELECT DISTINCT Location FROM Warehouses
SELECT Locations FROM Warehouses;
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'));
SELECT Codes FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))
SELECT SUM(boxes.Value) FROM boxes JOIN warehouses ON boxes.Warehouse = warehouses.Code WHERE warehouses.Location IN ('Chicago', 'New York');
SELECT SUM(Value) FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York');
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York'))
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')) GROUP BY Contents HAVING COUNT(DISTINCT Warehouse) > 1
SELECT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')
SELECT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York') GROUP BY Contents
SELECT Location FROM Warehouses WHERE Code IN (   SELECT Warehouse   FROM Boxes   WHERE Contents = 'Rocks' ) AND Code NOT IN (   SELECT Warehouse   FROM Boxes   WHERE Contents = 'Scissors' );
SELECT Locations FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') AND Code NOT IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')
SELECT DISTINCT w.Code, w.Location, w.Capacity FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents IN ('Rocks', 'Scissors')
SELECT DISTINCT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents IN ('Rocks', 'Scissors')
SELECT warehouses.Location FROM warehouses JOIN boxes ON warehouses.Code = boxes.Warehouse WHERE boxes.Contents IN ('Rocks', 'Scissors') GROUP BY warehouses.Location HAVING COUNT(DISTINCT boxes.Contents) = 2
SELECT DISTINCT Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents IN ('Rocks', 'Scissors');
SELECT Code, Contents FROM Boxes ORDER BY Value;
SELECT Codes, Contents FROM Boxes ORDER BY Value;
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes)
SELECT AVG(Value) FROM Boxes) AS AvgValue WHERE Value > (SELECT AVG(Value) FROM Boxes) GROUP BY Contents;
SELECT Contents FROM Boxes GROUP BY Contents ORDER BY Contents
SELECT Contents FROM Boxes ORDER BY Contents ASC
SELECT Code FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks')
SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks'
SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')
SELECT Codes, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors')
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)
SELECT SUM(Value) FROM Boxes WHERE Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)
SELECT Warehouse, AVG(Value) AS AvgValue FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150
SELECT AVG(Value) AS AverageValue, Warehouse FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150;
SELECT SUM(Value) AS TotalValue, COUNT(*) AS NumberOfBoxes, Contents FROM Boxes GROUP BY Contents
SELECT SUM(Value) AS TotalValue, COUNT(*) AS NumberOfBoxes, Contents FROM Boxes GROUP BY Contents
SELECT SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaximumCapacity FROM Warehouses GROUP BY Location
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaximumCapacity FROM Warehouses GROUP BY Location
SELECT SUM(Capacity) FROM Warehouses
SELECT SUM(Capacity) FROM Warehouses
SELECT MAX(Value) AS MostExpensiveValue, Warehouse FROM Boxes GROUP BY Warehouse;
SELECT Location, MAX(Value) AS MostExpensiveBoxValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Location
SELECT COUNT(Boxes.Code) AS NumberOfBoxes, Warehouses.Code FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code
SELECT COUNT(Boxes.Code) AS NumberOfBoxes, Boxes.Warehouse FROM Boxes GROUP BY Boxes.Warehouse;
SELECT COUNT(DISTINCT Warehouses.Location) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks'
SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks'
SELECT Code, Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code
SELECT Codes, Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code
SELECT Codes FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago';
SELECT Codes FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')
SELECT COUNT(Boxes.Code) AS NumberOfBoxes, Boxes.Warehouse FROM Boxes GROUP BY Boxes.Warehouse
SELECT COUNT(Boxes.Code) AS NumberOfBoxes, Boxes.Warehouse FROM Boxes GROUP BY Boxes.Warehouse
SELECT COUNT(DISTINCT Contents) AS DistinctContents, Warehouse FROM Boxes GROUP BY Warehouse
SELECT COUNT(DISTINCT Boxes.Contents) AS TypesOfContents, Boxes.Warehouse FROM Boxes GROUP BY Boxes.Warehouse
SELECT COUNT(b.Code) AS BoxCount, w.Code FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code HAVING BoxCount > w.Capacity;
SELECT Warehouses.Code FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code, Warehouses.Capacity HAVING COUNT(Boxes.Code) > Warehouses.Capacity
SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')
SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC;
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio');
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio');
SELECT MAX(Enrollment) AS Maximum_Enrollment, AVG(Enrollment) AS Average_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university
SELECT MAX(Enrollment) AS Maximum_Enrollment, AVG(Enrollment) AS Average_Enrollment, MIN(Enrollment) AS Minimum_Enrollment FROM university
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university);
SELECT AVG(Enrollment) FROM university) AS AvgEnrollment WHERE Enrollment > AvgEnrollment;
SELECT Home_Conference FROM university;
SELECT DISTINCT Home_Conference FROM university;
SELECT COUNT(University_ID) AS NumberOfUniversities, Home_Conference FROM university GROUP BY Home_Conference
SELECT COUNT(University_ID) AS University_Count, Home_Conference FROM university GROUP BY Home_Conference
SELECT COUNT(University_ID) AS University_Count, State FROM university GROUP BY State ORDER BY University_Count DESC LIMIT 1
SELECT State, COUNT(University_ID) AS University_Count FROM university GROUP BY State ORDER BY University_Count DESC LIMIT 1
SELECT Home_Conference, AVG(Enrollment) AS Average_Enrollment FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000
SELECT AVG(Enrollment) AS Average_Enrollment, Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000
SELECT MIN(Home_Conference) AS Conference, SUM(Enrollment) AS Total_Enrollment FROM university GROUP BY Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1
SELECT Home_Conference, MIN(Enrollment) FROM university GROUP BY Home_Conference ORDER BY MIN(Enrollment) ASC;
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code;
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code;
SELECT major.Major_Name, major_ranking.Rank FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID JOIN university ON major_ranking.University_ID = university.University_ID WHERE university.University_Name = 'Augustana College';
SELECT major_ranking.Rank, major.Major_Name FROM major_ranking JOIN major ON major.Major_ID = major_ranking.Major_ID JOIN university ON university.University_ID = major_ranking.University_ID WHERE university.University_Name = 'Augustana College'
SELECT university.University_Name, university.City, university.State FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID JOIN major ON major.Major_ID = major_ranking.Major_ID WHERE major_ranking.Rank = 1 AND major.Major_Name = 'Accounting'
SELECT university.University_Name, university.City, university.State FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID JOIN major ON major.Major_ID = major_ranking.Major_ID WHERE major_ranking.Rank = 1 AND major.Major_Name = 'Accounting';
SELECT University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Rank = 1 GROUP BY university.University_ID ORDER BY COUNT(major_ranking.Major_ID) DESC LIMIT 1
SELECT University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Rank = 1 GROUP BY university.University_ID ORDER BY COUNT(major_ranking.Major_ID) DESC LIMIT 1
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)
SELECT university.University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID JOIN major ON major.Major_ID = major_ranking.Major_ID WHERE major.Major_Name IN ('Accounting', 'Urban Education') GROUP BY university.University_Name HAVING COUNT(DISTINCT major.Major_Name) = 2
SELECT university.University_Name FROM university JOIN major ON university.University_ID = major.University_ID JOIN major_ranking ON university.University_ID = major_ranking.University_ID AND major.Major_ID = major_ranking.Major_ID WHERE major.Major_Name IN ('Accounting', 'Urban Education') GROUP BY university.University_Name HAVING COUNT(DISTINCT major.Major_Name) = 2
SELECT University_Name, overall_ranking.Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE State = 'Wisconsin'
SELECT University_Name, Rank FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE State = 'Wisconsin'
SELECT university.University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Research_point DESC LIMIT 1
SELECT University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Research_point DESC LIMIT 1
SELECT University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC
SELECT University_Name FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY overall_ranking.Reputation_point ASC;
SELECT University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID JOIN major ON major.Major_ID = major_ranking.Major_ID WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank >= 3
SELECT university.University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID JOIN major ON major.Major_ID = major_ranking.Major_ID WHERE major.Major_Name = 'Accounting' AND major_ranking.Rank <= 3
SELECT SUM(Enrollment) FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5
SELECT SUM(Enrollment) FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5
SELECT University_Name, Citation_point FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE Reputation_point >= 3 ORDER BY Reputation_point DESC LIMIT 3
SELECT University_Name, Citation_point FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID ORDER BY Reputation_point DESC LIMIT 3
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2;
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2
SELECT Title FROM Movies WHERE Rating IS NULL;
SELECT Title FROM Movies WHERE Rating IS NULL;
SELECT Title FROM Movies WHERE Rating = 'G'
SELECT Title FROM Movies WHERE Rating = 'G'
SELECT Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'
SELECT Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'
SELECT Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie
SELECT MovieTheaters.Name, Movies.Title FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code
SELECT COUNT(*) FROM Movies WHERE Rating = 'G';
SELECT COUNT(*) FROM Movies WHERE Rating = 'G';
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters;
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters;
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters;
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters;
SELECT COUNT(DISTINCT Code) FROM MovieTheaters;
SELECT COUNT(DISTINCT Code) FROM MovieTheaters;
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%';
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%';
SELECT Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating IN ('G', 'PG')
SELECT MovieTheaters.Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating IN ('G', 'PG')
SELECT Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial');
SELECT Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial')
SELECT Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') GROUP BY Movies.Title HAVING COUNT(DISTINCT MovieTheaters.Name) = 2
SELECT MovieTheaters.Code, MovieTheaters.Name, Movies.Title FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') GROUP BY Movies.Title HAVING COUNT(DISTINCT MovieTheaters.Name) = 2
SELECT Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name != 'Odeon' OR MovieTheaters.Name IS NULL
SELECT Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name != 'Odeon' OR MovieTheaters.Name IS NULL
SELECT Title FROM Movies ORDER BY Title ASC;
SELECT Title FROM Movies ORDER BY Title ASC
SELECT Title FROM Movies ORDER BY Rating;
SELECT Title FROM Movies ORDER BY Rating;
SELECT MAX(MovieCount) AS MaxMovies, Name FROM (   SELECT COUNT(Movie) AS MovieCount, Name   FROM MovieTheaters   JOIN Movies ON MovieTheaters.Movie = Movies.Code   GROUP BY Name ) AS MovieCountTable
SELECT MAX(MovieCount) AS MaxMovies, Name FROM (SELECT COUNT(Movie) AS MovieCount, Name       FROM MovieTheaters       JOIN Movies ON MovieTheaters.Movie = Movies.Code       GROUP BY Name) AS MovieCounts;
SELECT MovieTheaters.Movie, Movies.Title, COUNT(MovieTheaters.Code) AS TheaterCount FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code GROUP BY MovieTheaters.Movie, Movies.Title ORDER BY TheaterCount DESC LIMIT 1
SELECT MAX(COUNT(MovieTheaters.Movie)) AS MostPlayed, Movies.Title FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code GROUP BY MovieTheaters.Movie ORDER BY MostPlayed DESC LIMIT 1
SELECT COUNT(*) AS NumberOfMovies, Rating FROM Movies GROUP BY Rating
SELECT COUNT(*) AS MovieCount, Rating FROM Movies GROUP BY Rating
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL;
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT MovieTheaters.Name FROM MovieTheaters WHERE Movie IS NOT NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
SELECT MovieTheaters.Name FROM MovieTheaters LEFT JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Code IS NULL
SELECT MovieTheaters.Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G';
SELECT MovieTheaters.Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating = 'G'
SELECT Title FROM Movies;
SELECT Title FROM Movies
SELECT DISTINCT Rating FROM Movies;
SELECT DISTINCT Rating FROM Movies
SELECT * FROM Movies WHERE Rating IS NULL;
SELECT FROM Movies WHERE Rating IS NULL;
SELECT Titles FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Movie IS NULL
SELECT Client.Name FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber ORDER BY Package.Weight DESC LIMIT 1
SELECT Client.Name FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber ORDER BY Package.Weight DESC LIMIT 1;
SELECT SUM(Weight) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'
SELECT SUM(Weight) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern';
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern';
SELECT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position = 'Physician'
SELECT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Position = 'Physician'
SELECT PackageNumber FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong';
SELECT COUNT(PackageNumber) FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong';
SELECT PackageNumber FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong';
SELECT PackageNumber FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong';
SELECT Package.Contents, Package.Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong';
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT COUNT(PackageNumber) FROM Package JOIN Client AS Sender ON Package.Sender = Sender.AccountNumber JOIN Client AS Recipient ON Package.Recipient = Recipient.AccountNumber WHERE Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong'
SELECT COUNT(Package.PackageNumber) FROM Package JOIN Client AS Sender ON Package.Sender = Sender.AccountNumber JOIN Client AS Recipient ON Package.Recipient = Recipient.AccountNumber WHERE Sender.Name = 'Ogden Wernstrom' AND Recipient.Name = 'Leo Wong';
SELECT Contents FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'
SELECT Contents FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'John Zoidfarb'
SELECT PackageNumber, Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE '%John%' ORDER BY Weight DESC LIMIT 1
SELECT PackageNumber, Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name LIKE 'John%' ORDER BY Weight DESC LIMIT 1
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3
SELECT COUNT(PackageNumber) AS NumberOfPackages, Sender FROM Package GROUP BY Sender ORDER BY NumberOfPackages DESC LIMIT 1;
SELECT Client.Name, COUNT(Package.PackageNumber) AS NumberOfPackages FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.AccountNumber ORDER BY NumberOfPackages DESC LIMIT 1;
SELECT Client.Name, COUNT(Package.Recipient) AS NumberOfPackagesReceived FROM Client LEFT JOIN Package ON Client.AccountNumber = Package.Recipient GROUP BY Client.Name ORDER BY NumberOfPackagesReceived ASC LIMIT 1
SELECT MIN(COUNT(Package.Recipient)) AS MinPackagesReceived, Client.Name FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Package.Recipient ORDER BY MinPackagesReceived ASC LIMIT 1;
SELECT COUNT(PackageNumber) AS PackageCount, Sender FROM Package GROUP BY Sender HAVING PackageCount > 1;
SELECT COUNT(PackageNumber) AS PackageCount, Sender FROM Package GROUP BY Sender HAVING PackageCount > 1;
SELECT Coordinates FROM Planet WHERE Name = 'Mars'
SELECT Coordinates FROM Planet WHERE Name = 'Mars'
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC
SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry'
SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry'
SELECT Date FROM Shipment
SELECT Date FROM Shipment;
SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars';
SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'
SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela';
SELECT Shipment.ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars'
SELECT ShipmentID FROM Shipment WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela');
SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela';
SELECT Planet.Name, COUNT(Shipment.Planet) AS TotalShipments FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name
SELECT COUNT(Shipment.ShipmentID) AS NumberOfShipments, Planet.Name FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name
SELECT Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name ORDER BY COUNT(Shipment.ShipmentID) DESC LIMIT 1
SELECT Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.PlanetID ORDER BY COUNT(Shipment.ShipmentID) DESC LIMIT 1
SELECT Employee.Name, COUNT(Shipment.ShipmentID) AS NumberOfShipments FROM Employee JOIN Shipment ON Employee.EmployeeID = Shipment.Manager GROUP BY Employee.Name
SELECT COUNT(Shipment.ShipmentID) AS NumberOfShipments, Employee.Name FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Employee.Name
SELECT SUM(Package.Weight) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars';
SELECT SUM(Package.Weight)  FROM Package  JOIN Shipment ON Package.Shipment = Shipment.ShipmentID  JOIN Planet ON Shipment.Planet = Planet.PlanetID  WHERE Planet.Name = 'Mars';
SELECT Planet.Name, SUM(Package.Weight) AS TotalWeight FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name
SELECT SUM(Package.Weight) AS TotalWeight, Planet.Name FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name
SELECT Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.Name HAVING SUM(Package.Weight) > 30
SELECT Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PlanetID HAVING SUM(Package.Weight) > 30
SELECT Package.PackageNumber FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan'
SELECT COUNT(Package.PackageNumber) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Zapp Brannigan' AND Planet.Name = 'Omicron Persei 8'
SELECT Package.PackageNumber FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan';
SELECT COUNT(DISTINCT Package.PackageNumber) FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' OR Client.Name = 'Zapp Brannigan'
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
SELECT Employee.Name FROM Employee LEFT JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee LEFT JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars' AND Has_Clearance.Level IS NULL;
SELECT Employee.Name FROM Employee LEFT JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name != 'Mars' OR Has_Clearance.Planet IS NULL
SELECT Employee.Name FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Omega III'
SELECT Employee.Name FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Omega III';
SELECT Planet.Name FROM Planet JOIN Has_Clearance ON Planet.PlanetID = Has_Clearance.Planet GROUP BY Planet.PlanetID HAVING COUNT(Has_Clearance.Employee) = 1
SELECT Planet.Name FROM Planet JOIN Has_Clearance ON Planet.PlanetID = Has_Clearance.Planet GROUP BY Planet.PlanetID, Planet.Name HAVING COUNT(DISTINCT Has_Clearance.Employee) = 1
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Employee.Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT AVG(Salary) FROM Employee) OR Salary > 5000;
SELECT AVG(Salary) FROM Employee) OR Salary > 5000;
SELECT COUNT(EmployeeID) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))
SELECT COUNT(Employee.EmployeeID) FROM Employee LEFT JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') WHERE Has_Clearance.Level IS NULL
SELECT COUNT(Game_ID) FROM game
SELECT COUNT(Game_ID) FROM game
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%';
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%';
SELECT Platform_name, Market_district FROM platform
SELECT Platform_name, Market_district FROM platform
SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1;
SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player
SELECT MAX(Rank_of_the_year) AS Max_Rank, MIN(Rank_of_the_year) AS Min_Rank FROM player
SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year < 3;
SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year <= 3
SELECT Player_name FROM player ORDER BY Player_name ASC;
SELECT Player_name FROM player ORDER BY Player_name ASC
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT player.Player_name, player.Rank_of_the_year FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE game.Title = 'Super Mario World'
SELECT player.Player_name, player.Rank_of_the_year FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID JOIN game ON game.Game_ID = game_player.Game_ID WHERE game.Title = 'Super Mario World'
SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn';
SELECT Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn' GROUP BY Developers
SELECT AVG(g.Units_sold_Millions) FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'
SELECT AVG(g.Units_sold_Millions) FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard'
SELECT game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID
SELECT game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID
SELECT game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA');
SELECT games.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA');
SELECT Franchise, COUNT(Game_ID) AS NumberOfGames FROM game GROUP BY Franchise
SELECT COUNT(Game_ID) AS Number_of_Games, Franchise FROM game GROUP BY Franchise
SELECT COUNT(Game_ID) AS NumberOfGames, Franchise FROM game GROUP BY Franchise ORDER BY NumberOfGames DESC LIMIT 1
SELECT COUNT(Game_ID) AS NumberOfGames, Franchise FROM game GROUP BY Franchise ORDER BY NumberOfGames DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Game_ID) >= 2
SELECT player_name FROM player LEFT JOIN game_player ON player.Player_ID = game_player.Player_ID WHERE game_player.Game_ID IS NULL
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
SELECT Title FROM game WHERE Game_ID IN (   SELECT gp.Game_ID FROM game_player AS gp   JOIN player AS p ON gp.Player_ID = p.Player_ID   WHERE p.College = 'Oklahoma'   INTERSECT   SELECT gp.Game_ID FROM game_player AS gp   JOIN player AS p ON gp.Player_ID = p.Player_ID   WHERE p.College = 'Auburn' )
SELECT game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College IN ('Oklahoma', 'Auburn')
SELECT DISTINCT Franchise FROM game
SELECT DISTINCT Franchise FROM game
SELECT DISTINCT g.Title FROM game g LEFT JOIN game_player gp ON g.Game_ID = gp.Game_ID LEFT JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position != 'Guard' OR p.Position IS NULL
SELECT g.Title  FROM game g  WHERE NOT EXISTS (     SELECT 1      FROM game_player gp      JOIN player p ON gp.Player_ID = p.Player_ID      WHERE gp.Game_ID = g.Game_ID AND p.Position = 'Guard' )
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT AVG(Year_Profits_billion) AS Average_Year_Profit, MAX(Year_Profits_billion) AS Maximum_Year_Profit FROM press;
SELECT AVG(Year_Profits_billion) AS Average_Yearly_Profit, MAX(Year_Profits_billion) AS Maximum_Yearly_Profit FROM press GROUP BY Press_ID;
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
SELECT (SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1) UNION (SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1)
SELECT MAX(Month_Profits_billion), MIN(Month_Profits_billion) FROM press;
SELECT COUNT(*) FROM author WHERE Age < 30
SELECT COUNT(*) FROM author WHERE Age < 30;
SELECT AVG(Age) AS Average_Age, Gender FROM author GROUP BY Gender
SELECT AVG(Age) AS Average_Age, Gender FROM author GROUP BY Gender
SELECT COUNT(Author_ID) AS NumberOfAuthors, Gender FROM author WHERE Age > 30 GROUP BY Gender
SELECT COUNT(Author_ID) AS NumberOfAuthors, Gender FROM author WHERE Age > 30 GROUP BY Gender
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Title FROM book ORDER BY Release_date DESC
SELECT COUNT(Book_ID) AS NumberOfBooks, Book_Series FROM book GROUP BY Book_Series
SELECT COUNT(Book_ID) AS NumberOfBooks, Book_Series FROM book GROUP BY Book_Series
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5
SELECT TOP 5 Title, Release_date FROM book ORDER BY Sale_Amount DESC
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < 500
SELECT Book_Series FROM book WHERE Book_Series IN (   SELECT Book_Series   FROM book   WHERE Sale_Amount > 1000 ) AND Book_Series IN (   SELECT Book_Series   FROM book   WHERE Sale_Amount < 500 ) GROUP BY Book_Series
SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series IN ('MM', 'LT') GROUP BY a.Name HAVING COUNT(DISTINCT b.Book_Series) = 2
SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'MM' INTERSECT SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series = 'LT';
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT Author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IS NULL
SELECT GROUP_CONCAT(DISTINCT a.Name) AS Author_Names FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID HAVING COUNT(b.Book_ID) > 1
SELECT Author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) > 1
SELECT Title, Name, Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3
SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC LIMIT 3
SELECT Name, SUM(Sale_Amount) AS Total_Sales FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Name
SELECT SUM(book.Sale_Amount) AS Total_Sales, press.Name FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Name
SELECT COUNT(book.Book_ID) AS NumberOfBooks, press.Name FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Name
SELECT SUM(CASE WHEN Sale_Amount > 1000 THEN 1 ELSE 0 END) AS Books_Above_1000, press.Name FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Name
SELECT MAX(Sale_Amount), Name FROM book JOIN author ON book.Author_ID = author.Author_ID GROUP BY book.Author_ID ORDER BY MAX(Sale_Amount) DESC LIMIT 1
SELECT author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID ORDER BY book.Sale_Amount DESC LIMIT 1
SELECT COUNT(book.Author_ID) AS NumberOfBooks, author.Name, author.Gender FROM book JOIN author ON book.Author_ID = author.Author_ID GROUP BY book.Author_ID ORDER BY NumberOfBooks DESC LIMIT 1
SELECT author.Name, author.Gender FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID ORDER BY COUNT(book.Book_ID) DESC LIMIT 1
SELECT a.Name FROM author a LEFT JOIN book b ON a.Author_ID = b.Author_ID LEFT JOIN press p ON b.Press_ID = p.Press_ID WHERE p.Name != 'Accor' OR p.Name IS NULL GROUP BY a.Name
SELECT Author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID LEFT JOIN press ON book.Press_ID = press.Press_ID WHERE press.Name != 'Accor' OR press.Name IS NULL GROUP BY Author.Name
SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2)
SELECT Name, Year_Profits_billion FROM press WHERE Press_ID IN (SELECT Press_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2)
SELECT COUNT(author_name) FROM Authors
SELECT author_name FROM Authors
SELECT author_name, other_details FROM Authors
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik';
SELECT COUNT(document_id) FROM Documents;
SELECT author_name FROM Documents WHERE document_id = 4
SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil';
SELECT COUNT(document_id) FROM Documents WHERE author_name = 'Era Kerluke'
SELECT document_name, document_description FROM Documents
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings';
SELECT author_name, other_details FROM Authors WHERE author_name IN (SELECT author_name FROM Documents WHERE document_name = 'Travel to China');
SELECT author_name, COUNT(document_id) AS number_of_documents FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY Authors.author_name
SELECT author_name, COUNT(document_id) AS document_count FROM Documents GROUP BY author_name ORDER BY document_count DESC LIMIT 1
SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(document_id) >= 2
SELECT COUNT(process_id) FROM Business_Processes
SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9;
SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9);
SELECT COUNT(process_outcome_code) FROM Process_Outcomes
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working';
SELECT COUNT(DISTINCT process_status_code) FROM Process_Status
SELECT process_status_code, process_status_description FROM Process_Status
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct';
SELECT COUNT(staff_id) FROM Staff;
SELECT staff_id, staff_details FROM Staff
SELECT staff_details FROM Staff WHERE staff_id = 100
SELECT COUNT(staff_role_code) FROM Ref_Staff_Roles
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR';
SELECT COUNT(DISTINCT document_id) FROM Documents_Processes
SELECT process_id FROM Documents_Processes;
SELECT document_id FROM Documents LEFT JOIN Documents_Processes ON Documents.document_id = Documents_Processes.document_id WHERE Documents_Processes.process_id IS NULL
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes);
SELECT process_outcomes.process_outcome_description, process_status.process_status_description FROM documents_processes JOIN process_outcomes ON documents_processes.process_outcome_code = process_outcomes.process_outcome_code JOIN process_status ON documents_processes.process_status_code = process_status.process_status_code WHERE documents_processes.document_id = 0
SELECT process_name FROM Business_Processes WHERE process_id IN (SELECT process_id FROM Documents_Processes WHERE document_id IN (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil'));
SELECT process_id, COUNT(document_id) AS number_of_documents FROM Documents_Processes GROUP BY process_id
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9
SELECT staff_id, COUNT(document_id) AS number_of_document_processes FROM Staff_in_Processes GROUP BY staff_id
SELECT staff_role_code, COUNT(*) AS number_of_document_processes FROM Staff_in_Processes GROUP BY staff_role_code
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3
SELECT COUNT(agency_id) FROM Agencies
SELECT COUNT(agency_id) FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT COUNT(client_id) FROM Clients
SELECT COUNT(client_id) FROM Clients;
SELECT client_id, client_details FROM Clients
SELECT client_id, client_details FROM Clients
SELECT agency_id, COUNT(client_id) AS number_of_clients FROM Clients GROUP BY agency_id
SELECT COUNT(client_id) AS client_count, agency_id FROM Clients GROUP BY agency_id
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (   SELECT agency_id   FROM Clients   GROUP BY agency_id   ORDER BY COUNT(client_id) DESC   LIMIT 1 )
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (   SELECT agency_id   FROM Clients   GROUP BY agency_id   ORDER BY COUNT(client_id) DESC   LIMIT 1 )
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (   SELECT agency_id   FROM Clients   GROUP BY agency_id   HAVING COUNT(client_id) >= 2 );
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (   SELECT agency_id   FROM Clients   GROUP BY agency_id   HAVING COUNT(client_id) >= 2 )
SELECT agency_details FROM Agencies WHERE agency_id = (SELECT agency_id FROM Clients WHERE client_details = 'Mac');
SELECT agency_details FROM Agencies JOIN Clients ON Agencies.agency_id = Clients.agency_id WHERE client_details = 'Mac';
SELECT clients.client_details, agencies.agency_details FROM clients JOIN agencies ON clients.agency_id = agencies.agency_id
SELECT Clients.client_details, Agencies.agency_details FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id
SELECT sic_code, COUNT(client_id) AS number_of_clients FROM Clients GROUP BY sic_code
SELECT COUNT(client_id) AS total_clients, sic_code FROM Clients GROUP BY sic_code
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'
SELECT client_details FROM Clients WHERE sic_code = 'Bad'
SELECT agencies.agency_id, agencies.agency_details FROM agencies JOIN clients ON agencies.agency_id = clients.agency_id GROUP BY agencies.agency_id, agencies.agency_details
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN (SELECT agency_id FROM Clients);
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients);
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)
SELECT COUNT(invoice_id) FROM Invoices
SELECT COUNT(invoice_id) FROM Invoices
SELECT invoice_id, invoice_status, invoice_details FROM Invoices
SELECT invoice_id, invoice_status, invoice_details FROM Invoices
SELECT client_id, COUNT(invoice_id) AS number_of_invoices FROM Invoices GROUP BY client_id
SELECT COUNT(invoice_id) AS invoice_count, client_id FROM Invoices GROUP BY client_id
SELECT client_id, client_details FROM Clients WHERE client_id = (   SELECT client_id   FROM Invoices   GROUP BY client_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT client_id, client_details FROM Clients WHERE client_id = (   SELECT client_id   FROM Invoices   GROUP BY client_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2
SELECT invoice_status, COUNT(*) AS number_of_invoices FROM Invoices GROUP BY invoice_status
SELECT COUNT(invoice_id) AS invoice_count, invoice_status FROM Invoices GROUP BY invoice_status
SELECT invoice_status, COUNT(*) AS invoice_count FROM Invoices GROUP BY invoice_status ORDER BY invoice_count DESC LIMIT 1
SELECT invoice_status, COUNT(*) AS invoice_count FROM Invoices GROUP BY invoice_status ORDER BY invoice_count DESC LIMIT 1
SELECT invoices.invoice_status, invoices.invoice_details, clients.client_id, clients.client_details, agencies.agency_id, agencies.agency_details FROM invoices JOIN clients ON invoices.client_id = clients.client_id JOIN agencies ON clients.agency_id = agencies.agency_id
SELECT invoice_status, invoice_details, Invoices.client_id, client_details, Clients.agency_id, agency_details FROM Invoices JOIN Clients ON Invoices.client_id = Clients.client_id JOIN Agencies ON Clients.agency_id = Agencies.agency_id
SELECT meeting_type, other_details FROM Meetings;
SELECT meeting_type, other_details FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT payment_id, payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'
SELECT payment_id, payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status = 'Working'
SELECT invoices.invoice_id, invoices.invoice_status FROM invoices LEFT JOIN payments ON invoices.invoice_id = payments.invoice_id WHERE payments.payment_id IS NULL
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments);
SELECT COUNT(payment_id) FROM Payments
SELECT COUNT(payment_id) FROM Payments
SELECT payment_id, invoice_id, payment_details FROM Payments
SELECT payment_id, invoice_id, payment_details FROM Payments
SELECT invoice_id, invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id
SELECT DISTINCT Invoices.invoice_id, Invoices.invoice_status FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id
SELECT invoice_id, COUNT(payment_id) AS number_of_payments FROM Invoices LEFT JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoices.invoice_id
SELECT COUNT(payment_id) AS payment_count, invoice_id FROM Payments GROUP BY invoice_id
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id = (   SELECT invoice_id   FROM Payments   GROUP BY invoice_id   ORDER BY COUNT(payment_id) DESC   LIMIT 1 )
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE invoice_id IN (   SELECT invoice_id   FROM Payments   GROUP BY invoice_id   ORDER BY COUNT(payment_id) DESC   LIMIT 1 )
SELECT COUNT(staff_id) FROM Staff
SELECT COUNT(staff_id) FROM Staff;
SELECT agency_id, COUNT(staff_id) AS number_of_staff FROM Staff GROUP BY agency_id
SELECT agency_id, COUNT(staff_id) AS number_of_staff FROM Staff GROUP BY agency_id
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (   SELECT agency_id   FROM Staff   GROUP BY agency_id   ORDER BY COUNT(staff_id) DESC   LIMIT 1 )
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = (   SELECT agency_id   FROM Staff   GROUP BY agency_id   ORDER BY COUNT(staff_id) DESC   LIMIT 1 )
SELECT meeting_outcome, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_outcome
SELECT COUNT(meeting_id) AS total_meetings, meeting_outcome FROM Meetings GROUP BY meeting_outcome
SELECT client_id, COUNT(meeting_id) AS number_of_meetings FROM Meetings GROUP BY client_id
SELECT COUNT(meeting_id) AS meeting_count, client_id FROM Meetings GROUP BY client_id
SELECT meeting_type, COUNT(meeting_id) AS number_of_meetings, client_id FROM Meetings GROUP BY client_id, meeting_type
SELECT COUNT(meeting_id) AS meeting_count, meeting_type FROM Meetings GROUP BY meeting_type
SELECT meetings.meeting_id, meetings.meeting_outcome, meetings.meeting_type, clients.client_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id
SELECT meeting_id, COUNT(staff_id) AS staff_count FROM Staff_in_Meetings GROUP BY meeting_id
SELECT COUNT(staff_id) AS staff_count, meeting_id FROM Staff_in_Meetings GROUP BY meeting_id
SELECT staff_id, COUNT(meeting_id) AS meetings_attended FROM Staff_in_Meetings GROUP BY staff_id ORDER BY meetings_attended ASC LIMIT 1
SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id ORDER BY COUNT(meeting_id) ASC LIMIT 1
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings
SELECT COUNT(staff_id) FROM Staff WHERE staff_id NOT IN (SELECT DISTINCT staff_id FROM Staff_in_Meetings)
SELECT COUNT(staff_id) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)
SELECT clients.client_id, clients.client_details FROM clients LEFT JOIN meetings ON clients.client_id = meetings.client_id LEFT JOIN invoices ON clients.client_id = invoices.client_id WHERE meetings.client_id IS NOT NULL OR invoices.client_id IS NOT NULL GROUP BY clients.client_id, clients.client_details
SELECT DISTINCT Clients.client_id, Clients.client_details FROM Clients LEFT JOIN Meetings ON Clients.client_id = Meetings.client_id LEFT JOIN Invoices ON Clients.client_id = Invoices.client_id WHERE Meetings.client_id IS NOT NULL OR Invoices.client_id IS NOT NULL
SELECT staff.staff_id, staff.staff_details FROM staff JOIN Staff_in_Meetings ON staff.staff_id = Staff_in_Meetings.staff_id WHERE staff.staff_details LIKE '%s%' GROUP BY staff.staff_id HAVING COUNT(Staff_in_Meetings.meeting_id) >= 1
SELECT staff.staff_id, staff.staff_details FROM staff JOIN Staff_in_Meetings ON staff.staff_id = Staff_in_Meetings.staff_id WHERE staff.staff_details LIKE '%s%' GROUP BY staff.staff_id, staff.staff_details HAVING COUNT(Staff_in_Meetings.meeting_id) >= 1
SELECT client_id, sic_code, agency_id FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings GROUP BY client_id HAVING COUNT(meeting_id) = 1) AND client_id IN (SELECT client_id FROM Invoices);
SELECT clients.client_id, clients.sic_code, clients.agency_id FROM clients JOIN meetings ON clients.client_id = meetings.client_id JOIN invoices ON clients.client_id = invoices.client_id GROUP BY clients.client_id, clients.sic_code, clients.agency_id HAVING COUNT(DISTINCT meetings.meeting_id) = 1
SELECT meetings.start_date_time, meetings.end_date_time, clients.client_details, staff.staff_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id JOIN Staff_in_Meetings ON meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN staff ON Staff_in_Meetings.staff_id = staff.staff_id
SELECT meetings.start_date_time, meetings.end_date_time, clients.client_details, staff.staff_details FROM meetings JOIN clients ON meetings.client_id = clients.client_id JOIN Staff_in_Meetings ON meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN staff ON Staff_in_Meetings.staff_id = staff.staff_id
