SELECT COUNT(*) FROM club;
SELECT COUNT(*) FROM club;
SELECT Name FROM club ORDER BY Name ASC;
SELECT Name FROM club ORDER BY Name;
SELECT Name, Manager, Captain FROM club;
SELECT Name, Manager, Captain FROM club;
SELECT Name FROM club WHERE Manufacturer != 'Nike';
SELECT Name FROM club WHERE Manufacturer != 'Nike';
SELECT Name FROM player ORDER BY Wins_count ASC;
SELECT Name FROM player ORDER BY Wins_count ASC;
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player);
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player);
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000;
SELECT Country FROM player WHERE Earnings > 1200000;
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1;
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1;
SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID;
SELECT player.Name, club.Name FROM player  JOIN club ON player.Club_ID = club.Club_ID;
SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2;
SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2;
SELECT Name FROM player WHERE Club_ID = (   SELECT Club_ID   FROM club   WHERE Manager = 'Sam Allardyce' );
SELECT Name FROM player WHERE Club_ID = (   SELECT Club_ID   FROM club   WHERE Manager = 'Sam Allardyce' );
SELECT c.Name, AVG(p.Earnings) AS avg_earnings FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY avg_earnings DESC;
SELECT c.Name, AVG(p.Earnings) AS avg_earnings FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY avg_earnings DESC;
SELECT Manufacturer, COUNT(*) AS num_clubs FROM club GROUP BY Manufacturer;
SELECT Manufacturer, COUNT(*) AS club_count FROM club GROUP BY Manufacturer;
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Manufacturer, COUNT(*) AS count  FROM club GROUP BY Manufacturer ORDER BY count DESC LIMIT 1;
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(DISTINCT Club_ID) > 1;
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(DISTINCT Club_ID) > 1;
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1;
SELECT Country FROM player GROUP BY Country HAVING COUNT(*) > 1;
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player);
SELECT c.Name FROM club c LEFT JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Player_ID IS NULL;
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000;
SELECT Country FROM player WHERE Country IN (   SELECT Country   FROM player   WHERE Earnings > 1400000   INTERSECT   SELECT Country   FROM player   WHERE Earnings < 1100000 );
SELECT COUNT(DISTINCT Country) AS distinct_countries FROM player;
SELECT COUNT(DISTINCT Country) AS num_countries FROM player;
SELECT Name, Country, Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe');
SELECT Name, Country, Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe');
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(DISTINCT o.order_id) > 2 AND COUNT(oi.order_item_id) >= 3;
SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS num_products FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code;
SELECT   o.order_id,   o.order_status_code,   COUNT(oi.product_id) AS num_products FROM Orders o LEFT JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code;
SELECT date_order_placed FROM Orders o LEFT JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, date_order_placed HAVING COUNT(oi.order_item_id) > 1 OR MIN(date_order_placed) = (SELECT MIN(date_order_placed) FROM Orders);
SELECT o.date_order_placed AS earliest_order_date FROM Orders o ORDER BY o.date_order_placed LIMIT 1;  SELECT o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.order_item_id) > 1;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (   SELECT customer_id   FROM Orders );
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (   SELECT oi.product_id   FROM Order_Items oi   GROUP BY oi.product_id   HAVING COUNT(*) >= 2 );
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price, p.product_color HAVING COUNT(oi.order_id) < 2
SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2;
SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2;
SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_id) DESC LIMIT 1;
SELECT o.order_id, SUM(p.product_price) AS total_price FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_price ASC LIMIT 1;
SELECT o.order_id, SUM(p.product_price) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_cost ASC LIMIT 1;
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.gender_code, COUNT(oi.product_id) AS number_of_products FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.gender_code;
SELECT c.gender_code, COUNT(oi.product_id) AS products_bought FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.gender_code;
SELECT c.gender_code, COUNT(o.order_id) AS order_count FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code;
SELECT c.gender_code, COUNT(o.order_id) AS order_count FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, cpm.payment_method_code FROM Customers c LEFT JOIN Customer_Payment_Methods cpm ON c.customer_id = cpm.customer_id
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers c LEFT JOIN Customer_Payment_Methods cpm ON c.customer_id = cpm.customer_id
SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number;
SELECT i.invoice_number, i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i LEFT JOIN Shipments s ON i.invoice_number = s.invoice_number;
SELECT p.product_name, s.shipment_date FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id
SELECT p.product_name, s.shipment_date FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id
SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id
SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id
SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id
SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'Female';
SELECT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.gender_code = 'Female';
SELECT i.invoice_status_code FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number WHERE s.shipment_date IS NULL;
SELECT i.invoice_status_code FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number JOIN Orders o ON s.order_id = o.order_id WHERE s.shipment_date IS NULL;
SELECT   o.order_id,   o.date_order_placed,   SUM(p.product_price) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed;
SELECT   o.order_id,   o.date_order_placed,   SUM(p.product_price) AS total_amount_paid FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed;
SELECT COUNT(DISTINCT customer_id)  FROM Orders;
SELECT COUNT(DISTINCT customer_id) FROM Orders;
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items;
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items;
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods;
SELECT COUNT(DISTINCT payment_method_code) AS num_payment_methods FROM Customer_Payment_Methods;
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%';
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%';
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%';
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT COUNT(*) AS unsold_products FROM products p WHERE NOT EXISTS (   SELECT 1    FROM order_items oi   WHERE oi.product_id = p.product_id );
SELECT COUNT(*)  FROM Products p WHERE NOT EXISTS (   SELECT 1    FROM Order_Items oi   WHERE oi.product_id = p.product_id );
SELECT COUNT(*)  FROM Customers c LEFT JOIN Customer_Payment_Methods cpm ON c.customer_id = cpm.customer_id WHERE cpm.customer_id IS NULL;
SELECT COUNT(*)  FROM Customers c LEFT JOIN Customer_Payment_Methods cpm ON c.customer_id = cpm.customer_id WHERE cpm.payment_method_code IS NULL;
SELECT order_status_code, date_order_placed FROM Orders;
SELECT order_id, order_status_code, date_order_placed FROM Orders;
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA';
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA';
SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id
SELECT COUNT(*) AS items_shipped FROM Shipment_Items;
SELECT COUNT(DISTINCT p.product_id) FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id
SELECT AVG(product_price) AS average_price FROM Products;
SELECT AVG(product_price) AS average_product_price FROM Products;
SELECT AVG(p.product_price) AS average_price FROM products p JOIN order_items oi ON p.product_id = oi.product_id;
SELECT AVG(p.product_price) AS average_product_price FROM order_items oi JOIN products p ON oi.product_id = p.product_id
SELECT email_address, town_city, county FROM Customers WHERE gender_code = (   SELECT gender_code   FROM Customers   GROUP BY gender_code   ORDER BY COUNT(*) ASC   LIMIT 1 );
SELECT email_address, town_city, county FROM Customers WHERE gender_code = (   SELECT gender_code   FROM Customers   GROUP BY gender_code   ORDER BY COUNT(customer_id)   LIMIT 1 );
SELECT o.date_order_placed FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_id IN (   SELECT customer_id   FROM Customer_Payment_Methods   GROUP BY customer_id   HAVING COUNT(DISTINCT payment_method_code) >= 2 );
SELECT o.date_order_placed FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_id IN (   SELECT customer_id   FROM Customer_Payment_Methods   GROUP BY customer_id   HAVING COUNT(DISTINCT payment_method_code) >= 2 );
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_description HAVING COUNT(*) > 3
SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_description HAVING COUNT(*) > 3
SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_date, i.invoice_number HAVING COUNT(s.shipment_id) >= 2;
SELECT i.invoice_number, i.invoice_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number, i.invoice_date HAVING COUNT(s.shipment_id) >= 2;
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT MAX(product_price) FROM Products);
SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director);
SELECT Name FROM director ORDER BY Age DESC LIMIT 1;
SELECT COUNT(*)  FROM channel WHERE Internet LIKE '%bbc%';
SELECT COUNT(DISTINCT Digital_terrestrial_channel)  FROM channel;
SELECT Title, Start_Year FROM program ORDER BY Start_Year DESC;
SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID, d.Name ORDER BY COUNT(p.Program_ID) DESC LIMIT 1;
SELECT d.Name, d.Age FROM director d JOIN program p ON d.Director_ID = p.Director_ID GROUP BY d.Director_ID, d.Name, d.Age ORDER BY COUNT(p.Program_ID) DESC LIMIT 1;
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1;
SELECT c.Name, c.Internet FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Channel_ID, c.Name, c.Internet HAVING COUNT(p.Program_ID) > 1;
SELECT c.Name, COUNT(p.Program_ID) AS num_programs FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Name;
SELECT COUNT(*)  FROM channel c LEFT JOIN program p ON c.Channel_ID = p.Channel_ID WHERE p.Program_ID IS NULL;
SELECT d.Name FROM director d JOIN program p ON d.Director_ID = p.Director_ID WHERE p.Title = 'Dracula';
SELECT c.Name, c.Internet FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID GROUP BY c.Channel_ID, c.Name, c.Internet ORDER BY COUNT(da.Director_ID) DESC LIMIT 1;
SELECT Name  FROM director WHERE Age BETWEEN 30 AND 60;
SELECT c.Name FROM channel c JOIN director_admin da ON c.Channel_ID = da.Channel_ID JOIN director d ON da.Director_ID = d.Director_ID WHERE c.Channel_ID IN (   SELECT Channel_ID   FROM director_admin   WHERE Director_ID IN (     SELECT Director_ID      FROM director     WHERE Age < 40   )   INTERSECT   SELECT Channel_ID   FROM director_admin   WHERE Director_ID IN (     SELECT Director_ID     FROM director      WHERE Age > 60   ) )
SELECT c.Channel_ID, c.Name FROM channel c LEFT JOIN director_admin da ON c.Channel_ID = da.Channel_ID LEFT JOIN director d ON da.Director_ID = d.Director_ID WHERE d.Name <> 'Hank Baskett' OR d.Name IS NULL;
SELECT COUNT(*) FROM radio;
SELECT Transmitter FROM radio ORDER BY ERP_kW ASC;
SELECT tv_show_name, Original_Airdate FROM tv_show;
SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC';
SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30;
SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1;
SELECT AVG(ERP_kW) AS average_ERP FROM radio;
SELECT Affiliation, COUNT(*) AS num_channels FROM city_channel GROUP BY Affiliation;
SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*) > 3;
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC;
SELECT r.Transmitter, c.City FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID JOIN city_channel c ON ccr.City_channel_ID = c.ID;
SELECT r.Transmitter, c.Station_name FROM radio r JOIN city_channel_radio cr ON r.Radio_ID = cr.Radio_ID JOIN city_channel c ON cr.City_channel_ID = c.ID ORDER BY r.ERP_kW DESC;
SELECT r.Transmitter, COUNT(ccr.City_channel_ID) AS num_city_channels FROM radio r LEFT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter;
SELECT DISTINCT r.Transmitter FROM radio r LEFT JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID WHERE ccr.City_channel_ID IS NULL
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1;
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1;
SELECT Name FROM driver WHERE Citizenship = 'United States';
SELECT Name FROM driver WHERE Citizenship = 'United States';
SELECT d.Driver_ID, COUNT(vd.Vehicle_ID) AS num_vehicles FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Driver_ID ORDER BY num_vehicles DESC LIMIT 1;
SELECT d.Driver_ID, COUNT(vd.Vehicle_ID) AS num_vehicles FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID GROUP BY d.Driver_ID ORDER BY num_vehicles DESC LIMIT 1;
SELECT MAX(Power) AS max_power, AVG(Power) AS avg_power FROM vehicle WHERE Builder = 'Zhuzhou';
SELECT MAX(Power) AS max_power, AVG(Power) AS avg_power FROM vehicle WHERE Builder = 'Zhuzhou';
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT v.Vehicle_ID FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID ORDER BY COUNT(vd.Driver_ID) ASC LIMIT 1;
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996;
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996;
SELECT Build_Year, Model, Builder FROM vehicle;
SELECT Build_Year, Model, Builder FROM vehicle;
SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012;
SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = 2012;
SELECT COUNT(*)  FROM driver WHERE Racing_Series = 'NASCAR';
SELECT COUNT(*)  FROM driver WHERE Racing_Series = 'NASCAR';
SELECT AVG(Top_Speed) AS average_top_speed FROM vehicle;
SELECT AVG(Top_Speed) AS average_top_speed FROM vehicle;
SELECT DISTINCT Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000;
SELECT Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000;
SELECT Model, Total_Production, Top_Speed FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150;
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150;
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%';
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%';
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (   SELECT Vehicle_ID   FROM vehicle_driver );
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (   SELECT Vehicle_ID   FROM vehicle_driver );
SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID, v.Model HAVING COUNT(vd.Driver_ID) >= 2 OR v.Builder = 'Ziyang';
SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID, v.Model HAVING COUNT(vd.Driver_ID) = 2 OR v.Builder = 'Ziyang';
SELECT v.Vehicle_ID, v.Model FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID LEFT JOIN driver d ON vd.Driver_ID = d.Driver_ID GROUP BY v.Vehicle_ID, v.Model HAVING COUNT(DISTINCT vd.Driver_ID) > 2 OR MAX(d.Name = 'Jeff Gordon') = 1;
SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE d.Name = 'Jeff Gordon' OR v.Vehicle_ID IN (   SELECT Vehicle_ID   FROM vehicle_driver   GROUP BY Vehicle_ID   HAVING COUNT(DISTINCT Driver_ID) > 2 );
SELECT COUNT(*) AS num_vehicles_with_max_speed FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT COUNT(*)  FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT Name FROM driver ORDER BY Name;
SELECT Name FROM driver ORDER BY Name;
SELECT Racing_Series, COUNT(Driver_ID) AS num_drivers FROM driver GROUP BY Racing_Series;
SELECT Racing_Series, COUNT(*) AS driver_count FROM driver GROUP BY Racing_Series;
SELECT Name, Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1';
SELECT Name, Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Model = 'DJ1';
SELECT COUNT(*)  FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Vehicle_ID IS NULL;
SELECT COUNT(*)  FROM driver d LEFT JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID WHERE vd.Vehicle_ID IS NULL;
SELECT COUNT(*) FROM Exams;
SELECT COUNT(*) FROM Exams;
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC;
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code;
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code != 'Database';
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database';
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC;
SELECT Type_of_Question_Code, COUNT(*) AS question_count FROM Questions GROUP BY Type_of_Question_Code;
SELECT Type_of_Question_Code, COUNT(*) AS count  FROM Questions GROUP BY Type_of_Question_Code;
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal';
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal';
SELECT COUNT(DISTINCT Comments) FROM Student_Answers;
SELECT COUNT(DISTINCT Comments) FROM Student_Answers;
SELECT Student_Answer_Text, COUNT(*) AS count FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY count DESC;
SELECT Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY Frequency DESC;
SELECT Students.First_Name, Student_Answers.Date_of_Answer FROM Students  JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID;
SELECT s.First_Name, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID
SELECT s.Email_Adress, sa.Date_of_Answer FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID ORDER BY sa.Date_of_Answer DESC
SELECT s.Email_Adress, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID ORDER BY sa.Date_of_Answer DESC;
SELECT Assessment, COUNT(*) AS Count FROM Student_Assessments GROUP BY Assessment ORDER BY Count LIMIT 1;
SELECT Assessment, COUNT(*) AS Frequency  FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency ASC LIMIT 1;
SELECT First_Name FROM Students WHERE Student_ID IN (   SELECT Student_ID   FROM Student_Answers   GROUP BY Student_ID   HAVING COUNT(*) >= 2 );
SELECT First_Name FROM Students WHERE Student_ID IN (   SELECT Student_ID   FROM Student_Answers   GROUP BY Student_ID   HAVING COUNT(*) >= 2 );
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M';
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M';
SELECT Gender_MFU, COUNT(*) AS num_students FROM Students GROUP BY Gender_MFU;
SELECT Gender_MFU, COUNT(*) AS num_students FROM Students GROUP BY Gender_MFU;
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M');
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M');
SELECT First_Name FROM Students WHERE Student_ID NOT IN (   SELECT Student_ID   FROM Student_Answers );
SELECT First_Name FROM Students WHERE Student_ID NOT IN (   SELECT Student_ID   FROM Student_Answers );
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Student absent')
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Student absent')
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3;
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(*) >= 3;
SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students;
SELECT   Student_ID,   First_Name,   Middle_Name,   Last_Name,   Gender_MFU,   Student_Address,   Email_Adress,   Cell_Mobile_Phone,   Home_Phone FROM   Students;
SELECT COUNT(*) FROM Addresses;
SELECT COUNT(*) FROM Addresses;
SELECT address_id, address_details FROM Addresses;
SELECT address_id, address_details FROM Addresses;
SELECT COUNT(*) FROM Products;
SELECT COUNT(*) FROM Products;
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_price  FROM Products WHERE product_name = 'Monitor';
SELECT product_price  FROM Products WHERE product_name = 'Monitor';
SELECT    MIN(product_price) AS min_price,   AVG(product_price) AS avg_price,   MAX(product_price) AS max_price FROM Products;
SELECT    MIN(product_price) AS min_price,   AVG(product_price) AS avg_price,   MAX(product_price) AS max_price FROM Products;
SELECT AVG(product_price) AS avg_price FROM Products WHERE product_type_code = 'Clothes';
SELECT AVG(product_price) AS avg_clothes_price FROM Products WHERE product_type_code = 'Clothes';
SELECT COUNT(*)  FROM Products WHERE product_type_code = 'Hardware';
SELECT COUNT(*)  FROM Products WHERE product_type_code = 'Hardware';
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_name FROM Products WHERE product_price > (   SELECT AVG(product_price) FROM Products );
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (   SELECT AVG(product_price)   FROM Products   WHERE product_type_code = 'Hardware' );
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (   SELECT AVG(product_price)   FROM Products   WHERE product_type_code = 'Hardware' );
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT product_name FROM Products ORDER BY product_price DESC;
SELECT product_name FROM Products ORDER BY product_price DESC;
SELECT product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_type_code, COUNT(*) AS num_products FROM Products GROUP BY product_type_code;
SELECT product_type_code, COUNT(*) AS product_count FROM Products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) AS avg_price FROM Products GROUP BY product_type_code;
SELECT product_type_code, AVG(product_price) AS avg_price FROM Products GROUP BY product_type_code;
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2;
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(*) >= 2;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT customer_id, customer_name FROM Customers;
SELECT customer_id, customer_name FROM Customers;
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy';
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE c.customer_name = 'Jeromy';
SELECT payment_method_code, COUNT(*) AS num_customers FROM Customers GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(*) AS customer_count FROM Customers GROUP BY payment_method_code;
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.customer_name FROM Customers c WHERE c.payment_method_code = (   SELECT payment_method_code   FROM Customers   GROUP BY payment_method_code   ORDER BY COUNT(*) ASC   LIMIT 1 );
SELECT customer_name FROM Customers WHERE payment_method_code = (   SELECT payment_method_code   FROM Customers   GROUP BY payment_method_code   ORDER BY COUNT(*) ASC   LIMIT 1 );
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy';
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy';
SELECT DISTINCT payment_method_code FROM Customers;
SELECT DISTINCT payment_method_code FROM Customers;
SELECT product_id, product_type_code FROM Products ORDER BY product_name;
SELECT product_id, product_type_code, product_name FROM Products ORDER BY product_name;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*) FROM Customer_Orders;
SELECT COUNT(*) FROM Customer_Orders;
SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy';
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (   SELECT customer_id   FROM Customers   WHERE customer_name = 'Jeromy' );
SELECT c.customer_name, c.customer_id, COUNT(o.order_id) AS order_count FROM Customers c LEFT JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name, c.customer_id;
SELECT c.customer_name, c.customer_id, COUNT(o.order_id) AS num_orders  FROM Customers c LEFT JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name, c.customer_id;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT order_status_code, COUNT(*) AS order_count FROM Customer_Orders GROUP BY order_status_code;
SELECT order_status_code, COUNT(*) AS order_count FROM Customer_Orders GROUP BY order_status_code;
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*)  FROM Customers c LEFT JOIN Customer_Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;
SELECT COUNT(*)  FROM Customers c LEFT JOIN Customer_Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;
SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.order_id IS NULL
SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.order_id IS NULL
SELECT SUM(oi.order_quantity) AS total_monitors_ordered FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor';
SELECT SUM(oi.order_quantity) AS total_monitors_ordered FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor';
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Monitor';
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id JOIN Order_Items i ON o.order_id = i.order_id JOIN Products p ON i.product_id = p.product_id WHERE p.product_name = 'Monitor';
SELECT COUNT(DISTINCT customer_id)  FROM Customer_Orders;
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders;
SELECT customer_id FROM Customers WHERE customer_id NOT IN (   SELECT DISTINCT customer_id   FROM Customer_Orders );
SELECT c.customer_id FROM Customers c LEFT JOIN Customer_Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;
SELECT order_date, order_id FROM Customer_Orders WHERE order_id IN (   SELECT order_id   FROM Order_Items   GROUP BY order_id   HAVING SUM(order_quantity) > 6 OR COUNT(DISTINCT product_id) > 3 );
SELECT o.order_id, o.order_date FROM Customer_Orders o JOIN Order_Items i ON o.order_id = i.order_id GROUP BY o.order_id, o.order_date HAVING SUM(i.order_quantity) > 6 OR COUNT(DISTINCT i.product_id) > 3;
SELECT COUNT(*) FROM building;
SELECT COUNT(*) FROM building;
SELECT Name FROM building ORDER BY Number_of_Stories ASC;
SELECT Name, Number_of_Stories FROM building ORDER BY Number_of_Stories ASC;
SELECT Address FROM building ORDER BY Completed_Year DESC;
SELECT Address FROM building ORDER BY Completed_Year DESC;
SELECT MAX(Number_of_Stories)  FROM building WHERE Completed_Year <> 1980;
SELECT MAX(Number_of_Stories)  FROM building WHERE Completed_Year <> 1980;
SELECT AVG(Population) AS average_population FROM region;
SELECT AVG(Population) AS avg_population FROM region;
SELECT Name FROM region ORDER BY Name ASC;
SELECT Name FROM region ORDER BY Name;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region WHERE Area > 10000;
SELECT r.Capital FROM region r ORDER BY r.Population DESC LIMIT 1;
SELECT Capital FROM region WHERE Population = (SELECT MAX(Population) FROM region);
SELECT Name FROM region ORDER BY Area DESC LIMIT 5;
SELECT Name FROM region ORDER BY Area DESC LIMIT 5;
SELECT b.Name AS Building_Name, r.Name AS Region_Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID;
SELECT b.Name AS Building_Name, r.Name AS Region_Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID;
SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1
SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1;
SELECT r.Capital FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID ORDER BY COUNT(b.Building_ID) DESC LIMIT 1;
SELECT r.Capital FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Region_ID ORDER BY COUNT(b.Building_ID) DESC LIMIT 1;
SELECT b.Address, r.Capital FROM building b JOIN region r ON b.Region_ID = r.Region_ID;
SELECT b.Address, r.Name AS Region_Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID;
SELECT Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo';
SELECT b.Number_of_Stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE r.Name = 'Abruzzo';
SELECT Completed_Year, COUNT(*) AS Number_of_Buildings FROM building GROUP BY Completed_Year;
SELECT Completed_Year, COUNT(*) AS Number_of_Buildings FROM building GROUP BY Completed_Year;
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Building_ID IS NULL;
SELECT r.Name FROM region r LEFT JOIN building b ON r.Region_ID = b.Region_ID WHERE b.Building_ID IS NULL;
SELECT b1.Completed_Year FROM building b1 WHERE b1.Number_of_Stories > 20   AND EXISTS (     SELECT 1      FROM building b2     WHERE b2.Number_of_Stories < 15       AND b2.Completed_Year = b1.Completed_Year   );
SELECT DISTINCT Completed_Year FROM building WHERE Completed_Year IN (   SELECT Completed_Year   FROM building   WHERE Number_of_Stories > 20   INTERSECT   SELECT Completed_Year   FROM building   WHERE Number_of_Stories < 15 );
SELECT DISTINCT Address FROM building;
SELECT DISTINCT Address FROM building;
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC;
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC;
SELECT COUNT(*) FROM Services;
SELECT COUNT(*) FROM Services;
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.Service_ID, s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch';
SELECT Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID   JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch';
SELECT Service_Details FROM Services WHERE Service_ID IN (   SELECT Service_ID   FROM Customers_and_Services   GROUP BY Service_ID   HAVING COUNT(*) > 3 );
SELECT Service_Details FROM Services WHERE Service_ID IN (   SELECT Service_ID   FROM Customers_and_Services   GROUP BY Service_ID   HAVING COUNT(*) > 3 );
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID, c.Customer_Details ORDER BY COUNT(cs.Service_ID) DESC LIMIT 1
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID, c.Customer_Details ORDER BY COUNT(cs.Service_ID) DESC LIMIT 1
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID ORDER BY COUNT(DISTINCT cs.Service_ID) DESC LIMIT 1
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_ID, c.Customer_Details ORDER BY COUNT(DISTINCT cs.Service_ID) DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c LEFT JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID WHERE cs.Customer_ID IS NULL
SELECT c.Customer_Details FROM Customers c LEFT JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID WHERE cs.Customer_ID IS NULL
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID JOIN Services s ON cs.Service_ID = s.Service_ID WHERE s.Service_ID = (   SELECT Service_ID   FROM Customers_and_Services   GROUP BY Service_ID   ORDER BY COUNT(*) ASC   LIMIT 1 );
SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID JOIN Services s ON cs.Service_ID = s.Service_ID WHERE s.Service_ID = (   SELECT Service_ID   FROM Customers_and_Services   GROUP BY Service_ID   ORDER BY COUNT(*) ASC   LIMIT 1 );
SELECT COUNT(DISTINCT Customers_and_Services_Details)  FROM Customers_and_Services;
SELECT COUNT(*) AS total_customers_and_services FROM Customers_and_Services;
SELECT Customer_ID, Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%';
SELECT Customer_ID, Customer_Details  FROM Customers WHERE Customer_Details LIKE '%Kutch%';
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch' UNION SELECT s.Service_Details   FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID WHERE ci.Services_and_Channels_Details = 'good'
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID WHERE c.Customer_Details = 'Hardy Kutch' UNION SELECT s.Service_Details   FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID WHERE ci.Services_and_Channels_Details = 'good'
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID AND s.Service_ID = ci.Service_ID   WHERE c.Customer_Details = 'Hardy Kutch' AND ci.Services_and_Channels_Details = 'bad'
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID JOIN Customers c ON cs.Customer_ID = c.Customer_ID JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID AND s.Service_ID = ci.Service_ID   WHERE c.Customer_Details = 'Hardy Kutch' AND ci.Services_and_Channels_Details = 'bad'
SELECT s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID JOIN Channels c ON ci.Channel_ID = c.Channel_ID WHERE c.Channel_Details = '15 ij';
SELECT s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID JOIN Channels c ON ci.Channel_ID = c.Channel_ID WHERE c.Channel_Details = '15 ij';
SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID WHERE ci.Status_Code = 'Stuck'    AND ci.Services_and_Channels_Details = 'bad';
SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID WHERE ci.Status_Code = 'Stuck' AND ci.Services_and_Channels_Details = 'bad';
SELECT COUNT(*)  FROM Integration_Platform WHERE Integration_Platform_Details = 'Success';
SELECT COUNT(*)  FROM Integration_Platform WHERE Integration_Platform_Details = 'Success';
SELECT c.Customer_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE ip.Integration_Platform_Details = 'Fail';
SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE ip.Integration_Platform_Details = 'Fail';
SELECT s.Service_ID, s.Service_Details FROM Services s LEFT JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID WHERE cs.Service_ID IS NULL;
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (   SELECT Service_ID   FROM Customers_and_Services );
SELECT Analytical_Layer_Type_Code, COUNT(*) AS usage_count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code;
SELECT Analytical_Layer_Type_Code, COUNT(*) AS num_times_used FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code;
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID WHERE cs.Customers_and_Services_Details = 'Unsatisfied';
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cs ON s.Service_ID = cs.Service_ID WHERE cs.Customers_and_Services_Details = 'Unsatisfied';
SELECT COUNT(*) FROM Vehicles;
SELECT COUNT(*) FROM Vehicles;
SELECT name, Model_year FROM Vehicles ORDER BY Model_year DESC;
SELECT name, Model_year FROM Vehicles ORDER BY Model_year DESC;
SELECT DISTINCT Type_of_powertrain FROM Vehicles;
SELECT DISTINCT Type_of_powertrain FROM Vehicles;
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014);
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014);
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2014, 2013);
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year IN (2013, 2014);
SELECT Type_of_powertrain, COUNT(*) AS num_vehicles FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain, COUNT(*) as count  FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Type_of_powertrain, COUNT(*) AS count  FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count DESC LIMIT 1;
SELECT    MIN(Annual_fuel_cost) AS min_annual_fuel_cost,   MAX(Annual_fuel_cost) AS max_annual_fuel_cost,   AVG(Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles;
SELECT    MIN(Annual_fuel_cost) AS min_annual_fuel_cost,   MAX(Annual_fuel_cost) AS max_annual_fuel_cost,   AVG(Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles;
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate;
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2;
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2;
SELECT name, age, membership_credit FROM Customers;
SELECT name, age, membership_credit FROM Customers;
SELECT name, age FROM Customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM Customers);
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1;
SELECT AVG(age) AS average_age FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers);
SELECT AVG(age) AS average_age FROM Customers WHERE membership_credit > (   SELECT AVG(membership_credit)   FROM Customers );
SELECT id, name, membership_credit FROM Discount;
SELECT id, name, membership_credit FROM Discount;
SELECT v.name, SUM(rh.total_hours) AS total_hours FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name;
SELECT v.name, SUM(rh.total_hours) AS total_rental_hours FROM Vehicles v LEFT JOIN Renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name;
SELECT v.name FROM Vehicles v LEFT JOIN Renting_history rh ON v.id = rh.vehicles_id WHERE rh.id IS NULL;
SELECT v.name FROM Vehicles v LEFT JOIN Renting_history rh ON v.id = rh.vehicles_id WHERE rh.vehicles_id IS NULL;
SELECT c.name FROM Customers c JOIN Renting_history rh ON c.id = rh.customer_id GROUP BY c.name HAVING COUNT(rh.id) >= 2
SELECT c.name FROM Customers c JOIN Renting_history rh ON c.id = rh.customer_id GROUP BY c.name HAVING COUNT(*) >= 2;
SELECT v.name, v.Model_year FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id GROUP BY v.id, v.name, v.Model_year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT v.name, v.Model_year FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id GROUP BY v.id, v.name, v.Model_year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT v.name FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id ORDER BY rh.total_hours DESC;
SELECT v.name FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id ORDER BY rh.total_hours DESC
SELECT d.name FROM Discount d JOIN Renting_history rh ON d.id = rh.discount_id GROUP BY d.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT d.name FROM Discount d JOIN Renting_history rh ON d.id = rh.discount_id GROUP BY d.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT v.name, v.Type_of_powertrain FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id WHERE rh.total_hours > 30;
SELECT v.name, v.Type_of_powertrain FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name, v.Type_of_powertrain HAVING SUM(rh.total_hours) > 30;
SELECT Type_of_powertrain, AVG(City_fuel_economy_rate) AS avg_city_fuel_rate, AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_rate FROM Vehicles GROUP BY Type_of_powertrain;
SELECT      Type_of_powertrain,     AVG(City_fuel_economy_rate) AS avg_city_fuel_economy_rate,     AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM      Vehicles GROUP BY     Type_of_powertrain;
SELECT AVG(amount_of_loan) AS average_loan_amount FROM Student_Loans;
SELECT AVG(amount_of_loan) AS average_loan_amount FROM Student_Loans;
SELECT s.student_id, s.bio_data FROM Students s WHERE s.student_id IN (   SELECT student_id   FROM Classes   GROUP BY student_id   HAVING COUNT(*) >= 2 ) OR s.student_id IN (   SELECT student_id   FROM Detention   GROUP BY student_id   HAVING COUNT(*) < 2 );
SELECT s.student_id, s.bio_data FROM Students s WHERE (   SELECT COUNT(*)    FROM Classes c   WHERE c.student_id = s.student_id ) >= 2 OR (   SELECT COUNT(*)   FROM Detention d   WHERE d.student_id = s.student_id ) < 2;
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details LIKE '%data%'   AND t.teacher_id NOT IN (     SELECT teacher_id     FROM Classes     WHERE class_details LIKE 'net%'   )
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details LIKE '%data%'   AND t.teacher_id NOT IN (     SELECT teacher_id     FROM Classes     WHERE class_details LIKE 'net%'   )
SELECT s.bio_data FROM Students s WHERE s.student_id NOT IN (   SELECT d.student_id   FROM Detention d ) AND s.student_id NOT IN (   SELECT sl.student_id   FROM Student_Loans sl );
SELECT s.bio_data FROM Students s WHERE s.student_id NOT IN (   SELECT student_id FROM Detention   UNION   SELECT student_id FROM Student_Loans );
SELECT sl.amount_of_loan, sl.date_of_loan FROM Student_Loans sl JOIN Achievements a ON sl.student_id = a.student_id GROUP BY sl.student_id, sl.amount_of_loan, sl.date_of_loan HAVING COUNT(a.achievement_id) >= 2
SELECT sl.amount_of_loan, sl.date_of_loan FROM Student_Loans sl JOIN Achievements a ON sl.student_id = a.student_id GROUP BY sl.student_id, sl.amount_of_loan, sl.date_of_loan HAVING COUNT(a.achievement_id) >= 2;
SELECT t.teacher_id, t.teacher_details FROM Teachers t INNER JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id, t.teacher_details ORDER BY COUNT(*) DESC LIMIT 1;
SELECT t.teacher_id, t.teacher_details FROM Teachers t INNER JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id, t.teacher_details ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT detention_type_description FROM Detention d JOIN Ref_Detention_Type rdt ON d.detention_type_code = rdt.detention_type_code;
SELECT DISTINCT detention_type_description FROM Detention JOIN Ref_Detention_Type ON Detention.detention_type_code = Ref_Detention_Type.detention_type_code;
SELECT s.bio_data, s.student_details, rat.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code;
SELECT s.student_id, s.bio_data, s.student_details, rat.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code
SELECT s.bio_data, a.address_details FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id;
SELECT s.bio_data, a.address_details FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Addresses a ON sa.address_id = a.address_id;
SELECT s.bio_data, t.date_of_transcript FROM Students s JOIN Transcripts t ON s.student_id = t.student_id;
SELECT s.bio_data, t.date_of_transcript FROM Students s JOIN Transcripts t ON s.student_id = t.student_id;
SELECT COUNT(*) AS num_students, behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY num_students DESC LIMIT 1;
SELECT TOP 1 behaviour_monitoring_details, COUNT(*) AS count  FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC
SELECT s.bio_data, s.student_details FROM Students s JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id WHERE bm.behaviour_monitoring_details = (   SELECT behaviour_monitoring_details   FROM Behaviour_Monitoring   GROUP BY behaviour_monitoring_details   HAVING COUNT(*) = 3   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT s.bio_data, s.student_details FROM Students s JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id WHERE bm.behaviour_monitoring_details = (   SELECT behaviour_monitoring_details   FROM Behaviour_Monitoring   GROUP BY behaviour_monitoring_details   ORDER BY COUNT(*) DESC   LIMIT 1 ) AND bm.behaviour_monitoring_details IN (   SELECT behaviour_monitoring_details   FROM Behaviour_Monitoring   GROUP BY behaviour_monitoring_details   HAVING COUNT(*) = 3 );
SELECT s.bio_data FROM Students s JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT bm.behaviour_monitoring_details) = 1 AND bm.behaviour_monitoring_details = (   SELECT TOP 1 behaviour_monitoring_details   FROM Behaviour_Monitoring   GROUP BY behaviour_monitoring_details   ORDER BY COUNT(*) DESC );
SELECT s.bio_data FROM Students s JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id WHERE bm.behaviour_monitoring_details = (   SELECT behaviour_monitoring_details   FROM Behaviour_Monitoring   GROUP BY behaviour_monitoring_details   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT s.bio_data, se.event_date FROM Students s JOIN Student_Events se ON s.student_id = se.student_id;
SELECT s.bio_data, se.event_date FROM Students s JOIN Student_Events se ON s.student_id = se.student_id;
SELECT COUNT(*) AS num_students, e.event_type_code, t.event_type_description FROM Student_Events e JOIN Ref_Event_Types t ON e.event_type_code = t.event_type_code GROUP BY e.event_type_code, t.event_type_description ORDER BY num_students DESC LIMIT 1;
SELECT    COUNT(se.student_id) AS num_students,   se.event_type_code,   ret.event_type_description FROM Student_Events se JOIN Ref_Event_Types ret ON se.event_type_code = ret.event_type_code GROUP BY se.event_type_code, ret.event_type_description ORDER BY num_students DESC LIMIT 1;
SELECT   a.achievement_details,   r.achievement_type_description FROM   Achievements a   JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code;
SELECT a.achievement_details, r.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code;
SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id LEFT JOIN Achievements a ON c.student_id = a.student_id WHERE a.achievement_id IS NULL
SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id LEFT JOIN Achievements a ON s.student_id = a.student_id WHERE a.student_id IS NULL
SELECT date_of_transcript, transcript_details FROM Transcripts;
SELECT date_of_transcript, transcript_details FROM Transcripts;
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;
SELECT   a.achievement_type_code,   a.achievement_details,   a.date_achievement FROM   Achievements a
SELECT datetime_detention_start, datetime_detention_end FROM Detention;
SELECT    datetime_detention_start,   datetime_detention_end FROM Detention;
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%';
SELECT student_id, bio_data  FROM Students WHERE student_details LIKE '%Suite%';
SELECT     t.teacher_details,     s.bio_data,     c.class_details FROM     Classes c     JOIN Students s ON c.student_id = s.student_id     JOIN Teachers t ON c.teacher_id = t.teacher_id;
SELECT t.teacher_details, s.student_details FROM Classes c JOIN Teachers t ON c.teacher_id = t.teacher_id JOIN Students s ON c.student_id = s.student_id;
SELECT TOP 1 teacher_id, COUNT(*) AS num_classes FROM Classes GROUP BY teacher_id ORDER BY num_classes DESC
SELECT teacher_id, COUNT(*) AS num_courses FROM Classes GROUP BY teacher_id ORDER BY num_courses DESC LIMIT 1;
SELECT student_id, COUNT(*) AS num_classes FROM Classes GROUP BY student_id ORDER BY num_classes DESC LIMIT 1;
SELECT s.student_id, COUNT(*) AS num_courses FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id ORDER BY num_courses DESC LIMIT 1;
SELECT s.student_id, s.student_details FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(DISTINCT c.class_id) = 2
SELECT s.student_id, s.student_details FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(DISTINCT c.class_id) = 2
SELECT d.detention_type_code, r.detention_type_description FROM Detention d JOIN Ref_Detention_Type r ON d.detention_type_code = r.detention_type_code GROUP BY d.detention_type_code, r.detention_type_description ORDER BY COUNT(*) ASC LIMIT 1;
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type ORDER BY (SELECT COUNT(*) FROM Detention WHERE Detention.detention_type_code = Ref_Detention_Type.detention_type_code) LIMIT 1;
SELECT s.bio_data, sl.amount_of_loan, sl.other_details FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (   SELECT AVG(amount_of_loan)   FROM Student_Loans );
SELECT s.bio_data, s.student_details FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan > (   SELECT AVG(amount_of_loan)   FROM Student_Loans );
SELECT MIN(date_of_loan) FROM Student_Loans;
SELECT MIN(date_of_loan) FROM Student_Loans;
SELECT s.bio_data FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.amount_of_loan = (SELECT MIN(amount_of_loan) FROM Student_Loans);
SELECT s.bio_data FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;
SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans l ON t.student_id = l.student_id WHERE l.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans)
SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans l ON t.student_id = l.student_id WHERE l.amount_of_loan = (SELECT MAX(amount_of_loan) FROM Student_Loans);
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id JOIN Transcripts tr ON s.student_id = tr.student_id WHERE tr.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts)
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id JOIN Transcripts tr ON s.student_id = tr.student_id WHERE tr.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts);
SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan_amount FROM Students s LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id;
SELECT s.student_id, SUM(sl.amount_of_loan) AS total_loan_amount FROM Students s LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id;
SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS course_count FROM Students s LEFT JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data;
SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS num_courses FROM Students s LEFT JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data;
SELECT COUNT(DISTINCT student_id) AS num_students_with_detention FROM Detention;
SELECT COUNT(DISTINCT student_id)  FROM Detention;
SELECT address_type_code, address_type_description FROM Ref_Address_Types WHERE address_type_code = (   SELECT address_type_code   FROM Students_Addresses   GROUP BY address_type_code   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT ra.address_type_code, ra.address_type_description FROM Students_Addresses sa JOIN Ref_Address_Types ra ON sa.address_type_code = ra.address_type_code GROUP BY ra.address_type_code, ra.address_type_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL
SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL
SELECT sa.date_from, sa.date_to FROM Students_Addresses sa JOIN Students s ON sa.student_id = s.student_id JOIN Transcripts t ON s.student_id = t.student_id GROUP BY sa.student_id, sa.date_from, sa.date_to HAVING COUNT(t.transcript_id) = 2
SELECT sa.date_from, sa.date_to FROM Students_Addresses sa JOIN Students s ON sa.student_id = s.student_id JOIN Transcripts t ON s.student_id = t.student_id GROUP BY sa.student_address_id, sa.date_from, sa.date_to HAVING COUNT(t.transcript_id) = 2;
SELECT MIN(datetime_detention_start) AS earliest_detention_start FROM Detention;
SELECT datetime_detention_start FROM Detention;
SELECT Name FROM Author;
SELECT Name FROM Author;
SELECT Name, Address FROM Client;
SELECT Name, Address FROM Client;
SELECT Title, ISBN, SalePrice FROM Book;
SELECT Title, ISBN, SalePrice FROM Book;
SELECT COUNT(*) FROM Book;
SELECT COUNT(*) FROM Book;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Client;
SELECT COUNT(*) FROM Client;
SELECT Name, Address FROM Client ORDER BY Name;
SELECT Name, Address FROM Client ORDER BY Name;
SELECT Book.Title, Author.Name FROM Book  JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor;
SELECT Book.Title, Author.Name FROM Book  JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor;
SELECT Orders.IdOrder, Client.Name FROM Orders  JOIN Client ON Orders.IdClient = Client.IdClient;
SELECT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient;
SELECT a.Name, COUNT(ab.ISBN) AS NumBooks FROM Author a LEFT JOIN Author_Book ab ON a.idAuthor = ab.Author GROUP BY a.Name;
SELECT a.Name, COUNT(ab.ISBN) AS NumBooks FROM Author a LEFT JOIN Author_Book ab ON a.idAuthor = ab.Author GROUP BY a.Name;
SELECT b.ISBN, COUNT(bo.IdOrder) AS num_orders FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN;
SELECT b.ISBN, SUM(bo.amount) AS times_ordered FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN;
SELECT Book.ISBN, SUM(Books_Order.amount) AS total_amount FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN;
SELECT b.ISBN, SUM(bo.amount) AS total_amount FROM Book b LEFT JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN;
SELECT Book.Title FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.Title ORDER BY COUNT(Books_Order.IdOrder) DESC LIMIT 1;
SELECT Book.Title FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.Title ORDER BY COUNT(Books_Order.IdOrder) DESC LIMIT 1;
SELECT Book.Title, Book.PurchasePrice FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY SUM(Books_Order.amount) DESC LIMIT 1;
SELECT b.Title, b.PurchasePrice FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN GROUP BY b.ISBN ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT Book.Title FROM Book  INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN;
SELECT DISTINCT Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN
SELECT DISTINCT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient;
SELECT Name FROM Client WHERE IdClient IN (SELECT IdClient FROM Orders);
SELECT c.Name, COUNT(o.IdOrder) AS NumOrders FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name;
SELECT c.Name, COUNT(o.IdOrder) AS NumOrders FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY COUNT(o.IdOrder) DESC LIMIT 1;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT c.Name, SUM(bo.amount) AS total_books FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name;
SELECT c.Name, SUM(bo.amount) AS total_books FROM Client c LEFT JOIN Orders o ON c.IdClient = o.IdClient LEFT JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder GROUP BY c.Name ORDER BY SUM(bo.amount) DESC LIMIT 1;
SELECT Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.IdOrder IS NULL
SELECT Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.ISBN IS NULL
SELECT Name FROM Client WHERE IdClient NOT IN (   SELECT IdClient   FROM Orders );
SELECT Name FROM Client WHERE IdClient NOT IN (   SELECT IdClient   FROM Orders );
SELECT MAX(SalePrice) AS MaxSalePrice, MIN(SalePrice) AS MinSalePrice FROM Book;
SELECT MAX(SalePrice) AS MaxSalePrice, MIN(SalePrice) AS MinSalePrice FROM Book;
SELECT AVG(PurchasePrice) AS AvgPurchasePrice, AVG(SalePrice) AS AvgSalePrice FROM Book;
SELECT AVG(PurchasePrice) AS AvgPurchasePrice, AVG(SalePrice) AS AvgSalePrice FROM Book;
SELECT MAX(SalePrice - PurchasePrice) AS max_price_difference FROM Book;
SELECT MAX(SalePrice - PurchasePrice) AS max_price_difference FROM Book;
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book);
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book);
SELECT AVG(SalePrice)  FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell';
SELECT AVG(SalePrice)  FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell';
SELECT b.SalePrice FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'Plato';
SELECT SalePrice FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'Plato';
SELECT Title FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell' ORDER BY b.SalePrice ASC LIMIT 1;
SELECT Title FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'George Orwell' ORDER BY b.SalePrice ASC LIMIT 1;
SELECT Title  FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'Plato' AND b.SalePrice < (SELECT AVG(SalePrice) FROM Book)
SELECT b.Title FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE a.Name = 'Plato' AND b.SalePrice < (SELECT AVG(SalePrice) FROM Book)
SELECT Author.Name FROM Author  JOIN Author_Book ON Author.idAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT Author.Name FROM Author  JOIN Author_Book ON Author.idAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice';
SELECT Book.Title FROM Book  JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%';
SELECT Book.Title FROM Book  INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name LIKE '%Plato%';
SELECT COUNT(*)  FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice';
SELECT COUNT(*)  FROM Books_Order bo JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice';
SELECT DISTINCT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title IN ('Pride and Prejudice', 'The Little Prince') GROUP BY o.IdOrder HAVING COUNT(DISTINCT b.Title) = 2;
SELECT bo1.IdOrder FROM Books_Order bo1 JOIN Books_Order bo2 ON bo1.IdOrder = bo2.IdOrder WHERE bo1.ISBN = (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice') AND bo2.ISBN = (SELECT ISBN FROM Book WHERE Title = 'The Little Prince')
SELECT bo.ISBN FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name IN ('Peter Doe', 'James Smith') GROUP BY bo.ISBN HAVING COUNT(DISTINCT c.Name) = 2;
SELECT DISTINCT bo.ISBN FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name IN ('Peter Doe', 'James Smith')
SELECT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND b.ISBN NOT IN (   SELECT b2.ISBN   FROM Book b2   JOIN Books_Order bo2 ON b2.ISBN = bo2.ISBN   JOIN Orders o2 ON bo2.IdOrder = o2.IdOrder   JOIN Client c2 ON o2.IdClient = c2.IdClient   WHERE c2.Name = 'James Smith' )
SELECT b.Title FROM Book b JOIN Books_Order bo ON b.ISBN = bo.ISBN JOIN Orders o ON bo.IdOrder = o.IdOrder JOIN Client c ON o.IdClient = c.IdClient WHERE c.Name = 'Peter Doe' AND b.Title NOT IN (   SELECT b2.Title   FROM Book b2   JOIN Books_Order bo2 ON b2.ISBN = bo2.ISBN   JOIN Orders o2 ON bo2.IdOrder = o2.IdOrder   JOIN Client c2 ON o2.IdClient = c2.IdClient   WHERE c2.Name = 'James Smith' );
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice';
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title = 'Pride and Prejudice';
SELECT COUNT(*) FROM book;
SELECT Title FROM book ORDER BY Title ASC;
SELECT Title FROM book ORDER BY Pages DESC;
SELECT Title, Type, Release FROM book;
SELECT Title, MAX(Chapters) AS max_chapters, MIN(Chapters) AS min_chapters FROM book GROUP BY Title;
SELECT Title  FROM book WHERE Type != 'Poet';
SELECT AVG(Rating) AS average_rating FROM review;
SELECT Title, Rating FROM book b JOIN review r ON b.Book_ID = r.Book_ID;
SELECT r.Rating FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY b.Chapters DESC LIMIT 1;
SELECT r.Rank FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY b.Pages ASC LIMIT 1;
SELECT Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rank DESC LIMIT 1;
SELECT AVG(Readers_in_Million) AS avg_readers FROM review r JOIN book b ON r.Book_ID = b.Book_ID WHERE b.Type = 'Novel';
SELECT Type, COUNT(*) AS num_books FROM book GROUP BY Type;
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Type FROM book GROUP BY Type HAVING COUNT(*) >= 3;
SELECT Title FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Rating ASC;
SELECT Title, Audio FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY r.Readers_in_Million DESC;
SELECT COUNT(*)  FROM book b LEFT JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Book_ID IS NULL;
SELECT DISTINCT Type FROM book WHERE Type IN (   SELECT Type   FROM book   WHERE Chapters > 75 ) AND Type IN (   SELECT Type   FROM book   WHERE Chapters < 50 );
SELECT COUNT(DISTINCT Type) FROM book;
SELECT b.Type, b.Title FROM book b LEFT JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Rating IS NULL;
SELECT COUNT(*) FROM customer;
SELECT COUNT(*) FROM customer;
SELECT Name FROM customer ORDER BY Level_of_Membership ASC;
SELECT Name FROM customer ORDER BY Level_of_Membership ASC;
SELECT Name, Nationality, Card_Credit FROM customer;
SELECT Name, Nationality, Card_Credit FROM customer;
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia');
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia');
SELECT AVG(Card_Credit) AS avg_card_credit FROM customer WHERE Level_of_Membership > 1;
SELECT AVG(Card_Credit) AS avg_card_credit FROM customer WHERE Level_of_Membership > 1;
SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer);
SELECT Card_Credit FROM customer WHERE Level_of_Membership = (SELECT MAX(Level_of_Membership) FROM customer);
SELECT Nationality, COUNT(*) AS Number_of_Customers FROM customer GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS num_customers FROM customer GROUP BY Nationality;
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT Nationality FROM customer WHERE Nationality IN (   SELECT Nationality   FROM customer   WHERE Card_Credit < 50   INTERSECT   SELECT Nationality   FROM customer   WHERE Card_Credit > 75 );
SELECT DISTINCT Nationality FROM customer WHERE Nationality IN (   SELECT Nationality   FROM customer   WHERE Card_Credit > 50   INTERSECT   SELECT Nationality   FROM customer   WHERE Card_Credit < 75 );
SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID;
SELECT c.Name, co.Dish_Name FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID
SELECT c.Name, co.Dish_Name, co.Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID ORDER BY co.Quantity DESC;
SELECT c.Name, o.Dish_Name, o.Quantity FROM customer c JOIN customer_order o ON c.Customer_ID = o.Customer_ID ORDER BY o.Quantity DESC
SELECT c.Name, SUM(o.Quantity) AS Total_Quantity FROM customer c JOIN customer_order o ON c.Customer_ID = o.Customer_ID GROUP BY c.Name;
SELECT c.Name, SUM(o.Quantity) AS total_quantity FROM customer c JOIN customer_order o ON c.Customer_ID = o.Customer_ID GROUP BY c.Name;
SELECT c.Customer_ID, c.Name, SUM(o.Quantity) AS Total_Quantity FROM customer c JOIN customer_order o ON c.Customer_ID = o.Customer_ID GROUP BY c.Customer_ID, c.Name HAVING SUM(o.Quantity) > 1;
SELECT c.Name FROM customer c JOIN customer_order o ON c.Customer_ID = o.Customer_ID GROUP BY c.Name HAVING SUM(o.Quantity) > 1
SELECT DISTINCT Manager FROM branch;
SELECT DISTINCT Manager FROM branch;
SELECT Name FROM customer WHERE Customer_ID NOT IN (   SELECT DISTINCT Customer_ID   FROM customer_order );
SELECT Name FROM customer WHERE Customer_ID NOT IN (   SELECT Customer_ID   FROM customer_order );
SELECT COUNT(*) FROM member;
SELECT Name FROM member ORDER BY Age ASC;
SELECT Name, Nationality FROM member;
SELECT Name FROM member WHERE Nationality <> 'England';
SELECT Name FROM member WHERE Age IN (19, 20);
SELECT Name FROM member ORDER BY Age DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS Number_of_Members FROM member GROUP BY Nationality;
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT m.Name, c.Club_Name FROM club_leader cl JOIN member m ON cl.Member_ID = m.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID;
SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID WHERE c.Overall_Ranking > 100;
SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < 2018;
SELECT c.Team_Leader FROM club c WHERE c.Club_Name = 'Houston';
SELECT Name FROM member WHERE Member_ID NOT IN (   SELECT Member_ID   FROM club_leader );
SELECT DISTINCT Nationality FROM member WHERE Nationality IN (   SELECT Nationality   FROM member   WHERE Age > 22   INTERSECT   SELECT Nationality   FROM member   WHERE Age < 19 );
SELECT AVG(m.Age) AS average_age FROM club_leader cl JOIN member m ON cl.Member_ID = m.Member_ID
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%';
SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs;
SELECT Collection_Subset_Name FROM Collection_Subsets;
SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection';
SELECT cs.Collection_Subset_Name, c.Collection_Name, c.Collection_Description  FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID JOIN Collections c ON csm.Collection_ID = c.Collection_ID WHERE cs.Collection_Subset_Name = 'Top collection'
SELECT Document_Subset_Name FROM Document_Subsets;
SELECT Document_Subset_Name FROM Document_Subsets;
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000';
SELECT Document_Object_ID FROM Document_Objects;
SELECT Document_Object_ID FROM Document_Objects;
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection';
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection';
SELECT d1.Owner FROM Document_Objects d1 JOIN Document_Objects d2 ON d1.Document_Object_ID = d2.Parent_Document_Object_ID WHERE d2.Owner = 'Marlin';
SELECT parent.Owner FROM Document_Objects child JOIN Document_Objects parent ON child.Parent_Document_Object_ID = parent.Document_Object_ID WHERE child.Owner = 'Marlin';
SELECT DISTINCT do.Description FROM Document_Objects do WHERE do.Document_Object_ID IN (   SELECT DISTINCT Parent_Document_Object_ID    FROM Document_Objects   WHERE Parent_Document_Object_ID IS NOT NULL );
SELECT DISTINCT do.Description FROM Document_Objects do WHERE do.Parent_Document_Object_ID IS NULL;
SELECT COUNT(*)  FROM Document_Objects WHERE Owner = 'Marlin';
SELECT COUNT(*)  FROM Document_Objects WHERE Owner = 'Marlin';
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (   SELECT DISTINCT Parent_Document_Object_ID    FROM Document_Objects   WHERE Parent_Document_Object_ID IS NOT NULL );
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL;
SELECT Parent_Document_Object_ID, COUNT(*) AS num_child_documents FROM Document_Objects GROUP BY Parent_Document_Object_ID;
SELECT parent.Document_Object_ID AS Parent_ID, COUNT(child.Document_Object_ID) AS Num_Child_Documents FROM Document_Objects parent LEFT JOIN Document_Objects child ON parent.Document_Object_ID = child.Parent_Document_Object_ID GROUP BY parent.Document_Object_ID;
SELECT Collection_Name FROM Collections;
SELECT Collection_Name FROM Collections;
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best';
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best';
SELECT c2.Collection_Name FROM Collections c1  JOIN Collections c2 ON c1.Parent_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Nice';
SELECT c2.Collection_Name FROM Collections c1  JOIN Collections c2 ON c1.Parent_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Nice';
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT DISTINCT Parent_Collection_ID                              FROM Collections                             WHERE Parent_Collection_ID IS NOT NULL)
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT DISTINCT Parent_Collection_ID                              FROM Collections                             WHERE Parent_Collection_ID IS NOT NULL)
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (   SELECT Parent_Document_Object_ID   FROM Document_Objects   GROUP BY Parent_Document_Object_ID   HAVING COUNT(*) > 1 );
SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1;
SELECT COUNT(*)  FROM Collections c WHERE c.Parent_Collection_ID = (   SELECT Collection_ID    FROM Collections   WHERE Collection_Name = 'Best' );
SELECT COUNT(*)  FROM Collections WHERE Parent_Collection_ID = (   SELECT Collection_ID   FROM Collections   WHERE Collection_Name = 'Best' );
SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID WHERE dsm.Related_Document_Object_ID IN (   SELECT Document_Object_ID    FROM Document_Objects   WHERE Owner = 'Ransom' );
SELECT Related_Document_Object_ID FROM Document_Subset_Members  WHERE Document_Object_ID = (   SELECT Document_Object_ID   FROM Document_Objects   WHERE Owner = 'Ransom' );
SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(*) AS num_collections FROM Collection_Subsets cs JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name
SELECT     cs.Collection_Subset_ID,     cs.Collection_Subset_Name,     COUNT(csm.Collection_ID) AS num_collections FROM     Collection_Subsets cs     LEFT JOIN Collection_Subset_Members csm ON cs.Collection_Subset_ID = csm.Collection_Subset_ID GROUP BY     cs.Collection_Subset_ID,     cs.Collection_Subset_Name;
SELECT d.Document_Object_ID, COUNT(*) AS num_children FROM Document_Objects d LEFT JOIN Document_Objects c ON d.Document_Object_ID = c.Parent_Document_Object_ID   GROUP BY d.Document_Object_ID ORDER BY num_children DESC LIMIT 1;
SELECT parent_document_object_id, COUNT(*) AS num_children FROM Document_Objects GROUP BY parent_document_object_id;
SELECT d.Document_Object_ID, COUNT(dsm.Related_Document_Object_ID) AS num_related_docs FROM Document_Objects d LEFT JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY num_related_docs ASC LIMIT 1;
SELECT Document_Object_ID FROM Document_Objects ORDER BY Document_Object_ID ASC LIMIT 1;
SELECT d.Document_Object_ID, COUNT(dsm.Related_Document_Object_ID) AS num_related_docs FROM Document_Objects d LEFT JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID GROUP BY d.Document_Object_ID HAVING COUNT(dsm.Related_Document_Object_ID) BETWEEN 2 AND 4;
SELECT d.Document_Object_ID, COUNT(*) AS num_related_documents FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID GROUP BY d.Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4;
SELECT DISTINCT d2.Owner FROM Document_Objects d1  JOIN Document_Subset_Members dsm ON d1.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Objects d2 ON dsm.Related_Document_Object_ID = d2.Document_Object_ID WHERE d1.Owner = 'Braeden'
SELECT DISTINCT do2.Owner FROM Document_Objects do1  JOIN Document_Subset_Members dsm ON do1.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Objects do2 ON dsm.Related_Document_Object_ID = do2.Document_Object_ID WHERE do1.Owner = 'Braeden';
SELECT ds.Document_Subset_Name FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden'
SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE do.Owner = 'Braeden';
SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS num_documents FROM Document_Subsets ds LEFT JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name
SELECT     ds.Document_Subset_ID,     ds.Document_Subset_Name,     COUNT(DISTINCT dsm.Document_Object_ID) AS num_documents FROM     Document_Subsets ds     LEFT JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY     ds.Document_Subset_ID,     ds.Document_Subset_Name;
SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS num_documents FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1;
SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS num_documents FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1;
SELECT dsm.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000';
SELECT Document_Object_ID, Related_Document_Object_ID FROM Document_Subset_Members  WHERE Document_Subset_ID = (   SELECT Document_Subset_ID    FROM Document_Subsets   WHERE Document_Subset_Name = 'Best for 2000' );
SELECT ds.Document_Subset_Name, dsm.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID
SELECT ds.Document_Subset_Name, dsm.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID
SELECT c.Collection_Name FROM Documents_in_Collections dic  JOIN Document_Objects do ON dic.Document_Object_ID = do.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE do.Owner = 'Ransom'
SELECT c.Collection_Name FROM Documents_in_Collections dic  JOIN Document_Objects do ON dic.Document_Object_ID = do.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE do.Owner = 'Ransom'
SELECT d.Document_Object_ID, COUNT(c.Collection_ID) AS num_collections FROM Document_Objects d LEFT JOIN Documents_in_Collections dic ON d.Document_Object_ID = dic.Document_Object_ID LEFT JOIN Collections c ON dic.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID;
SELECT document_object_id, COUNT(collection_id) AS num_collections FROM Documents_in_Collections GROUP BY document_object_id;
SELECT COUNT(*)  FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(*)  FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT dic.Document_Object_ID FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(dic.Document_Object_ID) FROM Documents_in_Collections dic JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best';
SELECT c.Collection_Name, c.Collection_ID, COUNT(dic.Document_Object_ID) AS num_documents FROM Collections c LEFT JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID GROUP BY c.Collection_Name, c.Collection_ID ORDER BY num_documents DESC LIMIT 1;
SELECT c.Collection_ID, c.Collection_Name, COUNT(*) AS num_documents FROM Collections c JOIN Documents_in_Collections dic ON c.Collection_ID = dic.Collection_ID WHERE c.Collection_Name = 'Best' GROUP BY c.Collection_ID, c.Collection_Name ORDER BY num_documents DESC LIMIT 1;
SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID   JOIN Document_Subsets s ON m.Document_Subset_ID = s.Document_Subset_ID WHERE c.Collection_Name = 'Best' AND s.Document_Subset_Name = 'Best for 2000'
SELECT dsm.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID JOIN Documents_in_Collections dic ON dsm.Document_Object_ID = dic.Document_Object_ID   JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE ds.Document_Subset_Name = 'Best for 2000' AND c.Collection_Name = 'Best'
SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (   SELECT dsm.Document_Object_ID   FROM Document_Subset_Members dsm   JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID   WHERE ds.Document_Subset_Name = 'Best for 2000' );
SELECT d.Document_Object_ID FROM Documents_in_Collections d JOIN Collections c ON d.Collection_ID = c.Collection_ID WHERE c.Collection_Name = 'Best' AND d.Document_Object_ID NOT IN (   SELECT dsm.Document_Object_ID   FROM Document_Subset_Members dsm   JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID   WHERE ds.Document_Subset_Name = 'Best for 2000' );
SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d LEFT JOIN Documents_in_Collections dic ON d.Document_Object_ID = dic.Document_Object_ID LEFT JOIN Collections c ON dic.Collection_ID = c.Collection_ID LEFT JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID LEFT JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' OR c.Collection_Name = 'Best'
SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d JOIN Documents_in_Collections dic ON d.Document_Object_ID = dic.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name = 'Best for 2000' OR c.Collection_Name = 'Best'
SELECT c2.Collection_Name FROM Collections c1  JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best'
SELECT c2.Collection_Name FROM Collections c1  JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE c1.Collection_Name = 'Best'
SELECT COUNT(*)  FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID JOIN Collections rc ON csm.Related_Collection_ID = rc.Collection_ID WHERE rc.Collection_Name = 'Best';
SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Collection_ID = (   SELECT Collection_ID    FROM Collections   WHERE Collection_Name = 'Best' );
SELECT cs.Collection_Subset_Name FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID JOIN Collection_Subsets cs ON csm.Collection_Subset_ID = cs.Collection_Subset_ID WHERE c.Collection_Name = 'Best';
SELECT cs.Collection_Subset_Name FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID JOIN Collection_Subsets cs ON csm.Collection_Subset_ID = cs.Collection_Subset_ID WHERE c.Collection_Name = 'Best';
SELECT COUNT(*)  FROM songs WHERE name LIKE '%Love%';
SELECT name FROM songs ORDER BY name ASC;
SELECT name, language FROM songs;
SELECT MAX(voice_sound_quality) AS max_voice_sound_quality, MIN(voice_sound_quality) AS min_voice_sound_quality FROM performance_score;
SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE p.name = 'Freeway';
SELECT id, language, original_artist  FROM songs WHERE name != 'Love';
SELECT name, original_artist  FROM songs WHERE english_translation = 'All the streets of love';
SELECT DISTINCT stage_presence FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.language = 'English';
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name HAVING COUNT(ps.songs_id) >= 2;
SELECT p.id, p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id, p.name, p.popularity ORDER BY COUNT(ps.songs_id) DESC
SELECT p.id, p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5;
SELECT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE s.name = 'The Balkan Girls' AND s.language = 'English';
SELECT s.id, s.name FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY COUNT(ps.participant_id) DESC LIMIT 1;
SELECT COUNT(*)  FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9;
SELECT COUNT(*) AS unperformed_songs FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.songs_id IS NULL;
SELECT s.language, AVG(ps.rhythm_tempo) AS avg_rhythm_score FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.language;
SELECT DISTINCT p.name FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language LIKE '%English%';
SELECT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language IN ('Croatian', 'English') GROUP BY p.id, p.name, p.popularity HAVING COUNT(DISTINCT s.language) = 2;
SELECT name FROM songs WHERE name LIKE '%Is%';
SELECT s.original_artist, ps.voice_sound_quality FROM songs s JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.rhythm_tempo > 5 ORDER BY ps.voice_sound_quality DESC;
SELECT COUNT(*) FROM City;
SELECT COUNT(*) FROM City;
SELECT DISTINCT state FROM City;
SELECT DISTINCT state FROM City;
SELECT COUNT(DISTINCT country) AS num_countries FROM City;
SELECT COUNT(DISTINCT country) AS num_countries FROM City;
SELECT city_name, city_code, state, country FROM City;
SELECT city_name, city_code, state, country FROM City;
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT city_name  FROM City WHERE state = 'PA';
SELECT city_name FROM City WHERE state = 'PA';
SELECT COUNT(*)  FROM City WHERE country = 'CANADA';
SELECT COUNT(*)  FROM City WHERE country = 'CANADA';
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude;
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude;
SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state;
SELECT state, COUNT(*) as num_cities FROM City GROUP BY state;
SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country;
SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country;
SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2;
SELECT state FROM City GROUP BY state HAVING COUNT(DISTINCT city_code) >= 2;
SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state ORDER BY num_cities DESC LIMIT 1;
SELECT state FROM City GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM City GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT country FROM City GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Fname, LName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD';
SELECT Fname, LName FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.state = 'MD';
SELECT COUNT(*)  FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'CHINA';
SELECT COUNT(*)  FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country = 'CHINA';
SELECT Fname, Major FROM Student WHERE city_code = 'BAL';
SELECT Fname, Major FROM Student WHERE city_code = 'BAL';
SELECT c.country, COUNT(*) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country;
SELECT c.country, COUNT(*) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country;
SELECT c.city_name, COUNT(s.StuID) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.city_name;
SELECT c.city_name, COUNT(s.StuID) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.city_name;
SELECT state, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY state ORDER BY num_students DESC LIMIT 1;
SELECT state FROM City WHERE city_code IN (   SELECT city_code   FROM Student ) GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM City WHERE city_code IN (   SELECT city_code   FROM Student ) GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT country FROM City WHERE city_code IN (SELECT city_code FROM Student) GROUP BY country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT c.city_name FROM City c WHERE c.city_code IN (   SELECT s.city_code   FROM Student s   GROUP BY s.city_code   HAVING COUNT(*) >= 3 );
SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.StuID) >= 3;
SELECT state FROM City WHERE city_code IN (   SELECT city_code   FROM Student   GROUP BY city_code   HAVING COUNT(*) > 5 );
SELECT state FROM City WHERE city_code IN (   SELECT city_code   FROM Student   GROUP BY city_code   HAVING COUNT(*) > 5 );
SELECT StuID FROM Student WHERE city_code IN (   SELECT city_code   FROM City   WHERE country <> 'USA' );
SELECT StuID FROM Student WHERE city_code IN (   SELECT city_code   FROM City   WHERE country <> 'USA' );
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (   SELECT city_code   FROM City   WHERE state = 'PA' );
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (   SELECT city_code   FROM City   WHERE state = 'PA' );
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code IN (   SELECT city_code   FROM City   WHERE country <> 'USA' );
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (   SELECT city_code   FROM City   WHERE country = 'USA' );
SELECT distance  FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI')     OR (city1_code = 'CHI' AND city2_code = 'BAL');
SELECT distance  FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI')     OR (city1_code = 'CHI' AND city2_code = 'BAL');
SELECT distance  FROM Direct_distance WHERE (city1_code = 'BOS' AND city2_code = 'EWR')     OR (city1_code = 'EWR' AND city2_code = 'BOS');
SELECT distance  FROM Direct_distance WHERE (city1_code = 'BOS' AND city2_code = 'EWR')     OR (city1_code = 'EWR' AND city2_code = 'BOS');
SELECT AVG(distance) AS avg_distance, MIN(distance) AS min_distance, MAX(distance) AS max_distance FROM Direct_distance;
SELECT    AVG(distance) AS avg_distance,   MIN(distance) AS min_distance,   MAX(distance) AS max_distance FROM Direct_distance;
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000;
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000;
SELECT SUM(distance) AS total_distance FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT SUM(distance) AS total_distance FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL';
SELECT AVG(distance) AS avg_distance FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS';
SELECT AVG(distance) AS avg_distance FROM Direct_distance WHERE city1_code = 'BOS' OR city2_code = 'BOS';
SELECT c2.city_name FROM Direct_distance dd JOIN City c1 ON dd.city1_code = c1.city_code JOIN City c2 ON dd.city2_code = c2.city_code WHERE c1.city_name = 'Chicago' ORDER BY dd.distance ASC LIMIT 1;
SELECT c2.city_name FROM Direct_distance dd JOIN City c1 ON dd.city1_code = c1.city_code JOIN City c2 ON dd.city2_code = c2.city_code WHERE c1.city_name = 'Chicago' ORDER BY dd.distance ASC LIMIT 1;
SELECT c2.city_name FROM Direct_distance dd JOIN City c1 ON dd.city1_code = c1.city_code JOIN City c2 ON dd.city2_code = c2.city_code WHERE c1.city_name = 'Boston' ORDER BY dd.distance DESC LIMIT 1;
SELECT c2.city_name FROM Direct_distance dd JOIN City c1 ON dd.city1_code = c1.city_code JOIN City c2 ON dd.city2_code = c2.city_code WHERE c1.city_name = 'Boston' ORDER BY dd.distance DESC LIMIT 1
SELECT city1_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city1_code;
SELECT c.city_code, SUM(d.distance) AS total_distance FROM City c LEFT JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_code;
SELECT c.city_name, AVG(d.distance) AS avg_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code GROUP BY c.city_name;
SELECT c.city_name, AVG(d.distance) AS avg_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code GROUP BY c.city_name;
SELECT dd.distance FROM Student s1  JOIN Student s2 ON s1.LName = 'Smith' AND s1.Fname = 'Linda' AND s2.LName = 'Kim' AND s2.Fname = 'Tracy' JOIN Direct_distance dd ON s1.city_code = dd.city1_code AND s2.city_code = dd.city2_code;
SELECT dd.distance FROM Student s1  JOIN Student s2 ON s1.LName = 'Smith' AND s1.Fname = 'Linda' AND s2.LName = 'Kim' AND s2.Fname = 'Tracy' JOIN Direct_distance dd ON s1.city_code = dd.city1_code AND s2.city_code = dd.city2_code;
SELECT s1.Fname, s1.LName FROM Student s1 JOIN City c1 ON s1.city_code = c1.city_code JOIN Direct_distance d ON c1.city_code = d.city1_code JOIN City c2 ON d.city2_code = c2.city_code JOIN Student s2 ON c2.city_code = s2.city_code WHERE s2.Fname = 'Linda' AND s2.LName = 'Smith' ORDER BY d.distance DESC LIMIT 1;
SELECT s2.Fname, s2.LName FROM Student s1  JOIN Student s2 ON s1.StuID <> s2.StuID JOIN Direct_distance d ON s1.city_code = d.city1_code AND s2.city_code = d.city2_code WHERE s1.Fname = 'Linda' AND s1.LName = 'Smith' ORDER BY d.distance DESC LIMIT 1;
SELECT c.state FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Fname = 'Linda';
SELECT c.state FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Fname = 'Linda';
SELECT sid, name, rating, age FROM Sailors WHERE age > 30;
SELECT sid, name, rating, age FROM Sailors WHERE age > 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT b.bid, b.name, b.color FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE r.sid = 1;
SELECT bid FROM Reserves WHERE sid = 1;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102;
SELECT DISTINCT bid FROM Reserves;
SELECT DISTINCT bid FROM Reserves;
SELECT name FROM Sailors WHERE name LIKE '%e%';
SELECT name FROM Sailors WHERE name LIKE '%e%';
SELECT sid FROM Sailors s1 WHERE s1.age > (SELECT MAX(s2.age) FROM Sailors s2 WHERE s2.sid <> s1.sid);
SELECT sid FROM Sailors WHERE age > (SELECT MIN(age) FROM Sailors);
SELECT DISTINCT s1.name FROM Sailors s1 WHERE s1.age > (   SELECT MAX(s2.age)   FROM Sailors s2   WHERE s2.rating > 7 );
SELECT s1.name FROM Sailors s1 WHERE s1.age > (   SELECT MIN(s2.age)   FROM Sailors s2   WHERE s2.rating > 7 );
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid;
SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid;
SELECT s.sid, s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(DISTINCT r.bid) > 1;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name HAVING COUNT(DISTINCT r.bid) >= 2;
SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');
SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');
SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.sid HAVING COUNT(DISTINCT b.color) = 2;
SELECT DISTINCT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue');
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.name, s.sid HAVING COUNT(DISTINCT b.color) = 2;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue')
SELECT sid FROM Sailors WHERE sid NOT IN (   SELECT sid   FROM Reserves );
SELECT sid FROM Sailors WHERE sid NOT IN (   SELECT DISTINCT sid   FROM Reserves );
SELECT s.sid, s.name FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.sid, s.name FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT sid FROM Sailors WHERE sid NOT IN (   SELECT sid   FROM Reserves );
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis');
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis');
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis');
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis');
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating > 2;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3;
SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors);
SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors);
SELECT COUNT(*) FROM Sailors;
SELECT COUNT(*) FROM Sailors;
SELECT AVG(age) AS average_age FROM Sailors WHERE rating = 7;
SELECT AVG(age) AS average_age FROM Sailors WHERE rating = 7;
SELECT COUNT(*)  FROM Sailors WHERE name LIKE 'D%';
SELECT COUNT(*)  FROM Sailors WHERE name LIKE 'D%';
SELECT AVG(rating) AS avg_rating, MAX(age) AS max_age FROM Sailors;
SELECT AVG(rating) AS avg_rating, MAX(age) AS max_age FROM Sailors;
SELECT b.name, COUNT(r.bid) AS num_reservations FROM Boats b LEFT JOIN Reserves r ON b.bid = r.bid GROUP BY b.name;
SELECT b.name, COUNT(r.bid) AS num_reservations FROM Boats b LEFT JOIN Reserves r ON b.bid = r.bid GROUP BY b.name;
SELECT b.bid, COUNT(r.bid) AS num_reservations FROM Boats b LEFT JOIN Reserves r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.bid;
SELECT b.bid, COUNT(r.bid) AS num_reservations FROM Boats b LEFT JOIN Reserves r ON b.bid = r.bid WHERE b.bid > 50 GROUP BY b.bid;
SELECT b.name, COUNT(*) AS num_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name HAVING COUNT(*) > 1;
SELECT b.name, COUNT(*) AS num_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid GROUP BY b.name HAVING COUNT(*) > 1;
SELECT b.bid, COUNT(*) AS num_reservations FROM Boats b LEFT JOIN Reserves r ON b.bid = r.bid AND r.sid > 1 GROUP BY b.bid;
SELECT b.name, COUNT(*) as num_reservations FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE r.sid > 1 GROUP BY b.name;
SELECT rating, AVG(age) AS avg_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY rating;
SELECT s.rating, AVG(s.age) AS avg_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating;
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT COUNT(*) AS total_boats FROM Boats;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats WHERE color = 'red';
SELECT COUNT(*) FROM Boats WHERE color = 'red';
SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30;
SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30;
SELECT s.name FROM Sailors s WHERE s.rating > ALL (   SELECT s2.rating   FROM Sailors s2   JOIN Reserves r ON s2.sid = r.sid   JOIN Boats b ON r.bid = b.bid   WHERE b.color = 'red' );
SELECT s.name FROM Sailors s WHERE s.rating > ALL (   SELECT s2.rating   FROM Sailors s2   JOIN Reserves r ON s2.sid = r.sid   JOIN Boats b ON r.bid = b.bid   WHERE b.color = 'red' );
SELECT MAX(rating) FROM Sailors;
SELECT MAX(rating) FROM Sailors;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name = 'Melon';
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.name = 'Melon';
SELECT name, age FROM Sailors ORDER BY rating DESC;
SELECT name, age FROM Sailors ORDER BY rating DESC;
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1;
SELECT Model, Price FROM headphone ORDER BY Price DESC LIMIT 1;
SELECT Model FROM headphone ORDER BY Model ASC;
SELECT DISTINCT Model FROM headphone ORDER BY Model;
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) > 2;
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(*) <= 2;
SELECT Class, COUNT(*) AS num_headphones FROM headphone WHERE Price > 200 GROUP BY Class;
SELECT Class, COUNT(*) AS num_headphones FROM headphone WHERE Price > 200 GROUP BY Class;
SELECT COUNT(DISTINCT Earpads) FROM headphone;
SELECT COUNT(DISTINCT Earpads) FROM headphone;
SELECT Earpads, COUNT(*) AS count  FROM headphone GROUP BY Earpads ORDER BY count DESC LIMIT 2;
SELECT Earpads, COUNT(*) AS num_headphones FROM headphone GROUP BY Earpads ORDER BY num_headphones DESC LIMIT 2;
SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone);
SELECT Model, Class, Construction FROM headphone WHERE Price = (SELECT MIN(Price) FROM headphone);
SELECT Construction, AVG(Price) AS Average_Price FROM headphone GROUP BY Construction;
SELECT Construction, AVG(Price) AS Average_Price FROM headphone GROUP BY Construction;
SELECT DISTINCT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2;
SELECT Class FROM headphone WHERE Earpads IN ('Bowls', 'Comfort Pads') GROUP BY Class HAVING COUNT(DISTINCT Earpads) = 2;
SELECT Earpads FROM headphone WHERE Construction != 'Plastic';
SELECT Earpads FROM headphone WHERE Construction != 'Plastic';
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone);
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone);
SELECT Name FROM store ORDER BY Date_Opened;
SELECT Name, Date_Opened FROM store ORDER BY Date_Opened;
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana';
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana';
SELECT COUNT(DISTINCT Neighborhood) FROM store;
SELECT COUNT(DISTINCT Neighborhood) AS num_neighborhoods FROM store;
SELECT Neighborhood, COUNT(*) AS num_stores FROM store GROUP BY Neighborhood;
SELECT Neighborhood, COUNT(*) AS store_count FROM store GROUP BY Neighborhood;
SELECT s.Name, SUM(st.Quantity) AS total_headphones FROM store s JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Name ORDER BY total_headphones DESC LIMIT 1;
SELECT s.Name, SUM(st.Quantity) AS total_quantity FROM store s JOIN stock st ON s.Store_ID = st.Store_ID GROUP BY s.Name;
SELECT s.Name FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Quantity IS NULL OR st.Quantity = 0;
SELECT s.Name FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Headphone_ID IS NULL;
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (   SELECT Headphone_ID   FROM stock );
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (   SELECT Headphone_ID   FROM stock );
SELECT h.Model FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Model ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT h.Model FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Model ORDER BY SUM(s.Quantity) DESC LIMIT 1;
SELECT SUM(Quantity) AS total_headphones FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE st.Name = 'Woodman';
SELECT SUM(Quantity) AS total_quantity FROM stock JOIN store ON stock.Store_ID = store.Store_ID WHERE store.Name = 'Woodman';
SELECT s.Neighborhood FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Headphone_ID IS NULL;
SELECT s.Neighborhood FROM store s LEFT JOIN stock st ON s.Store_ID = st.Store_ID WHERE st.Headphone_ID IS NULL
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Paper;
SELECT COUNT(*) FROM Paper
SELECT COUNT(*) FROM Affiliation;
SELECT COUNT(*) FROM Affiliation;
SELECT COUNT(*)  FROM Paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(*)  FROM Paper WHERE venue LIKE '%NAACL%' AND year = 2000;
SELECT COUNT(*)  FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year = 2009;
SELECT COUNT(*)  FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year = 2009;
SELECT name, address FROM Affiliation;
SELECT name, address FROM Affiliation;
SELECT venue, year FROM Paper ORDER BY year;
SELECT DISTINCT venue, year FROM Paper ORDER BY year;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University';
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Harvard University';
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name LIKE '%Mckeown%';
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name LIKE '%Mckeown%'
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name IN ('Stanford University', 'Columbia University') GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT a.name) = 2;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name LIKE '%Stanford%'    AND p.paper_id IN (     SELECT p2.paper_id     FROM Paper p2     JOIN Author_list al2 ON p2.paper_id = al2.paper_id     JOIN Affiliation a2 ON al2.affiliation_id = a2.affiliation_id     WHERE a2.name LIKE '%Columbia%'   )
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen') GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT a.author_id) = 2;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen') GROUP BY p.paper_id, p.title HAVING COUNT(DISTINCT a.author_id) = 2;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name LIKE '%Mckeown%' AND p.paper_id NOT IN (   SELECT p.paper_id   FROM Paper p   JOIN Author_list al ON p.paper_id = al.paper_id   JOIN Author a ON al.author_id = a.author_id   WHERE a.name LIKE '%Rambow%' );
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name LIKE '%Mckeown%' AND p.paper_id NOT IN (   SELECT p2.paper_id   FROM Paper p2   JOIN Author_list al2 ON p2.paper_id = al2.paper_id   JOIN Author a2 ON al2.author_id = a2.author_id   WHERE a2.name LIKE '%Rambow%' );
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen')
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name IN ('McKeown, Kathleen', 'Rambow, Owen')
SELECT a.name, COUNT(al.paper_id) AS num_papers FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name ORDER BY num_papers DESC;
SELECT a.name, COUNT(al.paper_id) AS num_papers FROM Author a LEFT JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name ORDER BY num_papers DESC;
SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY paper_count ASC;
SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY COUNT(al.paper_id) DESC;
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.author_id, a.name HAVING COUNT(DISTINCT al.paper_id) > 50
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.author_id, a.name HAVING COUNT(DISTINCT al.paper_id) > 50
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.author_id, a.name HAVING COUNT(DISTINCT al.paper_id) = 1;
SELECT a.name FROM Author a WHERE 1 = (   SELECT COUNT(*)   FROM Author_list al   WHERE al.author_id = a.author_id );
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY num_papers DESC LIMIT 1;
SELECT venue, year, COUNT(*) as num_papers FROM Paper GROUP BY venue, year ORDER BY num_papers DESC LIMIT 1;
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1;
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*)  FROM Citation WHERE cited_paper_id = 'A00-1002';
SELECT COUNT(*)  FROM Citation WHERE cited_paper_id = 'A00-1002';
SELECT COUNT(*)  FROM Citation WHERE paper_id = 'D12-1027';
SELECT COUNT(*)  FROM Citation WHERE paper_id = 'D12-1027';
SELECT p.paper_id, COUNT(*) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT p.paper_id, COUNT(*) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT p.title FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id, p.title ORDER BY COUNT(c.cited_paper_id) DESC LIMIT 1
SELECT p.title FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id, p.title ORDER BY COUNT(c.cited_paper_id) DESC LIMIT 1
SELECT p.paper_id, p.title, COUNT(c.cited_paper_id) AS num_citations FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id, p.title ORDER BY num_citations DESC LIMIT 10;
SELECT p.paper_id, p.title, COUNT(c.cited_paper_id) AS citation_count FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id, p.title ORDER BY citation_count DESC LIMIT 10;
SELECT COUNT(*)  FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown , Kathleen'
SELECT COUNT(*)  FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name LIKE '%Mckeown , Kathleen%'
SELECT COUNT(*)  FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown , Kathleen'
SELECT COUNT(*)  FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown , Kathleen'
SELECT a.name, COUNT(c.cited_paper_id) AS num_citations FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Citation c ON al.paper_id = c.cited_paper_id GROUP BY a.name ORDER BY num_citations DESC LIMIT 1;
SELECT a.name, COUNT(*) AS num_citations FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Citation c ON al.paper_id = c.cited_paper_id GROUP BY a.name ORDER BY num_citations DESC LIMIT 1;
SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown , Kathleen'
SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE a.name = 'Mckeown , Kathleen'
SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University'
SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University'
SELECT author.name FROM author  INNER JOIN author_list ON author.author_id = author_list.author_id INNER JOIN paper ON author_list.paper_id = paper.paper_id WHERE paper.year = 2009 GROUP BY author.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 3;
SELECT a.name, COUNT(*) as paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 3;
SELECT COUNT(*)  FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009
SELECT COUNT(*)  FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Columbia University' AND p.year <= 2009;
SELECT COUNT(*)  FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009;
SELECT COUNT(*)  FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation a ON al.affiliation_id = a.affiliation_id WHERE a.name = 'Stanford University' AND p.year BETWEEN 2000 AND 2009;
SELECT p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id GROUP BY p.paper_id, p.title ORDER BY COUNT(al.author_id) DESC LIMIT 1
SELECT p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id GROUP BY p.paper_id, p.title ORDER BY COUNT(al.author_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT a.author_id) AS collaborators FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE al.paper_id IN (   SELECT al2.paper_id   FROM Author_list al2   JOIN Author a2 ON al2.author_id = a2.author_id   WHERE a2.name = 'Mckeown , Kathleen' ) AND a.name != 'Mckeown , Kathleen';
SELECT COUNT(DISTINCT a2.author_id) AS num_collaborators FROM author a1  JOIN author_list al1 ON a1.author_id = al1.author_id JOIN author_list al2 ON al1.paper_id = al2.paper_id JOIN author a2 ON al2.author_id = a2.author_id WHERE a1.name = 'Mckeown , Kathleen' AND a2.author_id != a1.author_id
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id JOIN Author_list al2 ON p.paper_id = al2.paper_id JOIN Author a2 ON al2.author_id = a2.author_id WHERE a2.name = 'Mckeown , Kathleen'   AND a.name != 'Mckeown , Kathleen' GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id JOIN Author_list al2 ON p.paper_id = al2.paper_id JOIN Author a2 ON al2.author_id = a2.author_id WHERE a2.name = 'Mckeown , Kathleen' GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT paper_id FROM Paper WHERE title LIKE '%translation%';
SELECT paper_id FROM Paper WHERE title LIKE '%translation%';
SELECT p.paper_id, p.title FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL
SELECT p.paper_id, p.title FROM Paper p LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id WHERE c.cited_paper_id IS NULL
SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id WHERE a.address LIKE '%China%' GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id WHERE a.address LIKE '%China%' GROUP BY a.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT venue, year, COUNT(*) as num_papers FROM Paper GROUP BY venue, year;
SELECT venue, year, COUNT(*) as paper_count FROM Paper GROUP BY venue, year;
SELECT a.name, COUNT(al.paper_id) AS total_papers FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name;
SELECT a.name, COUNT(p.paper_id) as paper_count FROM Affiliation a LEFT JOIN Author_list al ON a.affiliation_id = al.affiliation_id LEFT JOIN Paper p ON al.paper_id = p.paper_id GROUP BY a.name;
SELECT p.title FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id, p.title HAVING COUNT(*) > 50
SELECT p.title FROM Paper p JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY p.paper_id, p.title HAVING COUNT(*) > 50
SELECT COUNT(*)  FROM Author a WHERE NOT EXISTS (   SELECT 1   FROM Author_list al   JOIN Paper p ON al.paper_id = p.paper_id   JOIN Citation c ON p.paper_id = c.cited_paper_id   GROUP BY p.paper_id   HAVING COUNT(*) > 50   WHERE al.author_id = a.author_id );
SELECT COUNT(*)  FROM Author a WHERE NOT EXISTS (   SELECT 1   FROM Author_list al   JOIN Paper p ON al.paper_id = p.paper_id   JOIN Citation c ON p.paper_id = c.cited_paper_id   WHERE al.author_id = a.author_id   GROUP BY p.paper_id   HAVING COUNT(*) > 50 );
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND (p.venue LIKE '%NAACL%' OR p.venue LIKE '%ACL%')
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND p.venue LIKE '%NAACL%' INTERSECT SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 AND p.venue LIKE '%ACL%'
SELECT a.name FROM Author a WHERE a.author_id NOT IN (   SELECT al.author_id   FROM Author_list al   JOIN Paper p ON al.paper_id = p.paper_id   WHERE p.venue LIKE '%ACL%' );
SELECT a.name FROM Author a WHERE a.author_id NOT IN (   SELECT al.author_id   FROM Author_list al   JOIN Paper p ON al.paper_id = p.paper_id   WHERE p.venue LIKE '%ACL%' );
SELECT COUNT(*) FROM conference;
SELECT COUNT(*) AS total_conferences FROM conference;
SELECT DISTINCT Conference_Name FROM conference;
SELECT DISTINCT Conference_Name FROM conference;
SELECT Conference_Name, Year, Location FROM conference;
SELECT Conference_Name, Year, Location FROM conference;
SELECT Conference_Name, COUNT(*) AS num_times FROM conference GROUP BY Conference_Name;
SELECT Conference_Name, COUNT(*) AS Occurrences FROM conference GROUP BY Conference_Name;
SELECT Year, COUNT(*) AS num_conferences FROM conference GROUP BY Year;
SELECT COUNT(*) / COUNT(DISTINCT Year) AS conferences_per_year FROM conference;
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2;
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2;
SELECT Institution_Name, Location, Founded FROM institution;
SELECT Institution_Name, Location, Founded FROM institution;
SELECT COUNT(*)  FROM institution WHERE Founded BETWEEN 1850 AND 1900;
SELECT COUNT(*)  FROM institution WHERE Founded BETWEEN 1850 AND 1900;
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1;
SELECT Institution_Name, Location FROM institution WHERE Founded = (SELECT MAX(Founded) FROM institution);
SELECT Institution_Name, COUNT(staff.staff_ID) AS num_staff FROM institution  LEFT JOIN staff ON institution.Institution_ID = staff.Institution_ID WHERE Founded > 1800 GROUP BY Institution_Name;
SELECT i.Institution_ID, i.Institution_Name, COUNT(s.staff_ID) AS num_staff, GROUP_CONCAT(s.name) AS staff_names FROM institution i LEFT JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_ID, i.Institution_Name;
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (   SELECT Institution_ID   FROM staff );
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (   SELECT DISTINCT Institution_ID   FROM staff );
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff);
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff);
SELECT MAX(Age) AS max_age, MIN(Age) AS min_age FROM staff WHERE Nationality = 'United States';
SELECT MAX(Age) AS max_age, MIN(Age) AS min_age FROM staff;
SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada';
SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE s.Nationality = 'Canada';
SELECT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID AND cp1.role = 'Speaker' JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID AND cp2.role = 'Sponsor' GROUP BY s.name;
SELECT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID AND cp1.role = 'Speaker' JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID AND cp2.role = 'Sponsor' GROUP BY s.name HAVING COUNT(DISTINCT cp1.Conference_ID) > 0 AND COUNT(DISTINCT cp2.Conference_ID) > 0;
SELECT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID JOIN conference c1 ON cp1.Conference_ID = c1.Conference_ID JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID JOIN conference c2 ON cp2.Conference_ID = c2.Conference_ID WHERE c1.Conference_Name = 'ACL' AND c2.Conference_Name = 'Naccl';
SELECT s.name FROM staff s JOIN conference_participation cp1 ON s.staff_ID = cp1.staff_ID JOIN conference c1 ON cp1.Conference_ID = c1.Conference_ID JOIN conference_participation cp2 ON s.staff_ID = cp2.staff_ID JOIN conference c2 ON cp2.Conference_ID = c2.Conference_ID WHERE c1.Conference_Name = 'ACL' AND c2.Conference_Name = 'NACCL'
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year IN (2003, 2004);
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year BETWEEN 2003 AND 2004;
SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS num_participants FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year;
SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS num_participants FROM conference c LEFT JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year;
SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2;
SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY COUNT(cp.staff_ID) DESC LIMIT 2;
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (   SELECT staff_ID   FROM conference_participation   WHERE Conference_ID IN (     SELECT Conference_ID     FROM conference     WHERE Conference_Name = 'ACL'   ) );
SELECT s.name, s.Nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID LEFT JOIN conference c ON cp.Conference_ID = c.Conference_ID AND c.Conference_Name = 'ACL' WHERE c.Conference_ID IS NULL
SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (   SELECT DISTINCT s.Institution_ID   FROM staff s   JOIN conference_participation cp ON s.staff_ID = cp.staff_ID   JOIN conference c ON cp.Conference_ID = c.Conference_ID   WHERE c.Year = 2004 );
SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (   SELECT DISTINCT s.Institution_ID   FROM staff s   JOIN conference_participation cp ON s.staff_ID = cp.staff_ID   JOIN conference c ON cp.Conference_ID = c.Conference_ID   WHERE c.Year = 2004 );
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age;
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC;
SELECT pilot_name, plane_name, age FROM PilotSkills WHERE age < 30;
SELECT pilot_name, plane_name, age  FROM PilotSkills WHERE age < 30;
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35;
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub';
SELECT location  FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT location  FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT COUNT(DISTINCT location) FROM Hangar;
SELECT COUNT(DISTINCT location) FROM Hangar;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;
SELECT COUNT(*)  FROM PilotSkills WHERE age > 40;
SELECT COUNT(*)  FROM PilotSkills WHERE age > 40;
SELECT COUNT(*)  FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35;
SELECT COUNT(*)  FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35;
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1;
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT plane_name FROM Hangar WHERE plane_name NOT IN (   SELECT plane_name   FROM PilotSkills   GROUP BY plane_name   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT plane_name FROM Hangar WHERE plane_name NOT IN (   SELECT plane_name   FROM PilotSkills   GROUP BY plane_name   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT COUNT(*)  FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Chicago';
SELECT COUNT(*)  FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Chicago';
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills;
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills;
SELECT COUNT(*)  FROM PilotSkills WHERE pilot_name = 'Smith';
SELECT COUNT(*)  FROM PilotSkills WHERE pilot_name = 'Smith';
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40;
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills WHERE age > 40;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC;
SELECT pilot_name FROM PilotSkills ORDER BY age DESC;
SELECT location FROM Hangar ORDER BY plane_name;
SELECT plane_name, location FROM Hangar ORDER BY plane_name;
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name;
SELECT plane_name FROM Hangar ORDER BY plane_name;
SELECT COUNT(*)  FROM PilotSkills WHERE age > 40 OR age < 30;
SELECT COUNT(*)  FROM PilotSkills WHERE age > 40 OR age < 30;
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR        (plane_name = 'F-14 Fighter' AND age < 30);
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35)    OR (plane_name = 'F-14 Fighter' AND age < 30);
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND pilot_name NOT IN (   SELECT pilot_name   FROM PilotSkills   WHERE plane_name = 'B-52 Bomber' );
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub'   AND pilot_name NOT IN (     SELECT pilot_name     FROM PilotSkills     WHERE plane_name = 'B-52 Bomber'   );
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber');
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY pilot_name HAVING COUNT(DISTINCT plane_name) = 2;
SELECT AVG(age) AS average_age, MIN(age) AS smallest_age FROM PilotSkills;
SELECT AVG(age) AS average_age, MIN(age) AS minimum_age FROM PilotSkills;
SELECT DISTINCT p.pilot_name FROM PilotSkills p JOIN Hangar h ON p.plane_name = h.plane_name WHERE h.location IN ('Austin', 'Boston') GROUP BY p.pilot_name HAVING COUNT(DISTINCT h.location) = 2;
SELECT pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location IN ('Austin', 'Boston');
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY plane_name;
SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY plane_name;
SELECT plane_name, COUNT(*) as num_planes FROM Hangar GROUP BY plane_name;
SELECT plane_name, COUNT(*) AS num_entries FROM PilotSkills GROUP BY plane_name;
SELECT p.plane_name, p.pilot_name, p.age FROM PilotSkills p INNER JOIN (   SELECT plane_name, MAX(age) AS max_age   FROM PilotSkills   GROUP BY plane_name ) t ON p.plane_name = t.plane_name AND p.age = t.max_age ORDER BY p.plane_name;
SELECT h.plane_name, p.pilot_name FROM Hangar h LEFT JOIN (   SELECT plane_name, pilot_name, MAX(age) AS max_age   FROM PilotSkills   GROUP BY plane_name ) p ON h.plane_name = p.plane_name ORDER BY h.plane_name;
SELECT p.plane_name, p.pilot_name, p.age FROM PilotSkills p INNER JOIN (   SELECT plane_name, MAX(age) AS max_age   FROM PilotSkills   GROUP BY plane_name ) m ON p.plane_name = m.plane_name AND p.age = m.max_age;
SELECT h.plane_name, p.pilot_name FROM Hangar h JOIN PilotSkills p ON h.plane_name = p.plane_name WHERE p.age = (SELECT MAX(age) FROM PilotSkills WHERE plane_name = h.plane_name)
SELECT pilot_name, MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name;
SELECT pilot_name, MAX(age) AS max_age FROM PilotSkills GROUP BY pilot_name;
SELECT location, COUNT(*) AS num_pilots, AVG(age) AS avg_age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY location;
SELECT h.location, COUNT(ps.pilot_name) AS num_pilots, AVG(ps.age) AS avg_age FROM Hangar h LEFT JOIN PilotSkills ps ON h.plane_name = ps.plane_name GROUP BY h.location;
SELECT COUNT(*) AS num_pilots FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY ps.plane_name HAVING AVG(ps.age) < 35;
SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills WHERE plane_name IN (   SELECT plane_name   FROM PilotSkills   GROUP BY plane_name   HAVING AVG(age) < 35 ) GROUP BY plane_name;
SELECT h.location FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name ORDER BY ps.age ASC LIMIT 1;
SELECT h.location FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age = (SELECT MIN(age) FROM PilotSkills);
SELECT pilot_name, age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin';
SELECT pilot_name, age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Austin';
SELECT p1.pilot_name FROM PilotSkills p1 WHERE p1.age > (   SELECT MIN(p2.age)   FROM PilotSkills p2   WHERE p2.plane_name = 'Piper Cub' ) ORDER BY p1.pilot_name;
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT MAX(age)               FROM PilotSkills              WHERE plane_name = 'Piper Cub') ORDER BY pilot_name;
SELECT COUNT(*)  FROM PilotSkills p1 WHERE p1.age < (   SELECT MIN(p2.age)   FROM PilotSkills p2   WHERE p2.plane_name = 'F-14 Fighter' );
SELECT COUNT(*)  FROM PilotSkills p1 WHERE p1.age < (SELECT MIN(p2.age)                 FROM PilotSkills p2                 WHERE p2.plane_name = 'F-14 Fighter');
SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%';
SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%';
SELECT COUNT(*)  FROM PilotSkills p1 WHERE p1.age > (   SELECT MIN(p2.age)   FROM PilotSkills p2   WHERE p2.plane_name = 'Piper Cub' );
SELECT COUNT(*)  FROM PilotSkills p1 WHERE p1.age > (   SELECT MIN(p2.age)   FROM PilotSkills p2   WHERE p2.plane_name = 'Piper Cub' );
SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1;
SELECT Area_km, Government_website FROM district WHERE Population = (SELECT MIN(Population) FROM district);
SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district);
SELECT MAX(Area_km) AS biggest_area, AVG(Area_km) AS average_area FROM district;
SELECT SUM(Population) AS total_population FROM (   SELECT Population   FROM district   ORDER BY Area_km DESC   LIMIT 3 ) top_districts;
SELECT District_ID, Name, Government_website FROM district ORDER BY Population;
SELECT Name FROM district WHERE Government_website LIKE '%.gov%';
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000;
SELECT Name, Speach_title FROM spokesman;
SELECT AVG(Points) AS avg_points, AVG(Age) AS avg_age FROM spokesman WHERE Rank_position = 1.0;
SELECT Name, Points FROM spokesman WHERE Age < 40;
SELECT Name, Age FROM spokesman ORDER BY Age DESC LIMIT 1;
SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman);
SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT s.Name FROM spokesman s JOIN spokesman_district sd ON s.Spokesman_ID = sd.Spokesman_ID WHERE sd.Start_year < 2004
SELECT d.Name AS District_Name, COUNT(sd.Spokesman_ID) AS Number_of_Spokesmen FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.Name;
SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID JOIN spokesman s ON sd.Spokesman_ID = s.Spokesman_ID WHERE s.Rank_position IN (1, 2) GROUP BY d.Name HAVING COUNT(DISTINCT s.Rank_position) = 2;
SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.Name HAVING COUNT(sd.Spokesman_ID) > 1
SELECT COUNT(*)  FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.Spokesman_ID IS NULL;
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (   SELECT Spokesman_ID   FROM spokesman_district );
SELECT      SUM(d.Population) AS total_population,     AVG(d.Population) AS avg_population FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1;
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1;
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1;
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1;
SELECT title  FROM Sculptures WHERE location = 'Gallery 226';
SELECT title  FROM Sculptures WHERE location = 'Gallery 226';
SELECT title, location FROM Paintings;
SELECT title, location FROM Paintings;
SELECT title, location FROM Sculptures;
SELECT title, location FROM Sculptures;
SELECT medium, mediumOn  FROM Paintings WHERE paintingID = 80;
SELECT medium, mediumOn  FROM Paintings WHERE paintingID = 80;
SELECT fname, lname FROM Artists WHERE birthYear > 1850;
SELECT fname, lname  FROM Artists WHERE birthYear > 1850;
SELECT s.title, s.year FROM Sculptures s WHERE s.location <> 'Gallery 226';
SELECT title, year FROM Sculptures WHERE location != 'Gallery 226';
SELECT DISTINCT fname, lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900;
SELECT fname, lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900;
SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920;
SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920;
SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1;
SELECT fname, lname FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1;
SELECT MIN(deathYear - birthYear) AS shortest_life_age FROM Artists;
SELECT MIN(deathYear - birthYear) AS shortest_lifespan FROM Artists;
SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1;
SELECT fname, (deathYear - birthYear) AS age FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1;
SELECT COUNT(*)  FROM Paintings WHERE location = 'Gallery 240';
SELECT COUNT(*)  FROM Paintings WHERE location = 'Gallery 240';
SELECT COUNT(*) AS num_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.artistID = (   SELECT artistID   FROM Artists   ORDER BY (deathYear - birthYear) DESC   LIMIT 1 );
SELECT COUNT(*) AS painting_count FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE (a.deathYear - a.birthYear) = (   SELECT MAX(deathYear - birthYear)   FROM Artists );
SELECT p.title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Mary';
SELECT title, year FROM Paintings WHERE painterID = (   SELECT artistID   FROM Artists   WHERE fname = 'Mary' );
SELECT width_mm FROM Paintings WHERE painterID IN (   SELECT artistID   FROM Artists   WHERE birthYear < 1850 );
SELECT width_mm FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850;
SELECT location, medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Pablo';
SELECT location, medium, mediumOn FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname = 'Pablo';
SELECT a.fname, a.lname FROM Artists a WHERE EXISTS (SELECT 1 FROM Paintings p WHERE p.painterID = a.artistID)   AND EXISTS (SELECT 1 FROM Sculptures s WHERE s.sculptorID = a.artistID);
SELECT fname, lname FROM Artists WHERE artistID IN (   SELECT painterID FROM Paintings   INTERSECT   SELECT sculptorID FROM Sculptures );
SELECT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium IN ('oil', 'lithographic') GROUP BY a.artistID HAVING COUNT(DISTINCT p.medium) = 2;
SELECT fname, lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium IN ('oil', 'lithographic') GROUP BY a.artistID HAVING COUNT(DISTINCT p.medium) = 2;
SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884 AND p.mediumOn = 'canvas';
SELECT birthYear FROM Artists WHERE artistID = (   SELECT painterID   FROM Paintings   WHERE year = 1884   LIMIT 1 );
SELECT DISTINCT fname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'Gallery 241';
SELECT fname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.location = 'Gallery 241';
SELECT medium, COUNT(*) AS num_works FROM (   SELECT medium FROM Paintings   UNION ALL   SELECT medium FROM Sculptures ) AS combined_works GROUP BY medium;
SELECT medium, COUNT(*) AS num_works FROM (   SELECT medium FROM Paintings   UNION ALL   SELECT medium FROM Sculptures ) AS combined_works GROUP BY medium;
SELECT medium, AVG(height_mm) AS avg_height FROM Paintings GROUP BY medium;
SELECT medium, AVG(height_mm) AS avg_height FROM Paintings GROUP BY medium;
SELECT location, COUNT(*) AS num_paintings FROM Paintings WHERE year < 1900 GROUP BY location;
SELECT COUNT(DISTINCT location) AS num_locations FROM Paintings WHERE year < 1900;
SELECT title  FROM Paintings WHERE year > 1910 AND medium = 'oil';
SELECT title  FROM Paintings WHERE medium = 'oil' AND year > 1910;
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 240';
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 240';
SELECT DISTINCT title FROM Paintings p1 WHERE p1.height_mm > (   SELECT MIN(p2.height_mm)   FROM Paintings p2   WHERE p2.mediumOn = 'canvas' );
SELECT DISTINCT p1.title FROM Paintings p1 WHERE p1.height_mm > (   SELECT MIN(p2.height_mm)   FROM Paintings p2   WHERE p2.mediumOn = 'canvas' );
SELECT DISTINCT p1.paintingID FROM Paintings p1 WHERE p1.year < (   SELECT MIN(p2.year)   FROM Paintings p2   WHERE p2.location = 'Gallery 240' );
SELECT DISTINCT p1.paintingID FROM Paintings p1 WHERE p1.year < (   SELECT MIN(p2.year)   FROM Paintings p2   WHERE p2.location = 'Gallery 240' );
SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1;
SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1;
SELECT fname, lname FROM Artists WHERE artistID IN (   SELECT sculptorID   FROM Sculptures   WHERE title LIKE '%female%' );
SELECT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.title LIKE '%female%';
SELECT DISTINCT title FROM Paintings ORDER BY title;
SELECT DISTINCT title FROM Paintings ORDER BY title;
SELECT title FROM Paintings ORDER BY LENGTH(title);
SELECT title FROM Paintings ORDER BY height_mm ASC;
SELECT title  FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p LEFT JOIN Sculptures s ON p.year BETWEEN 1900 AND 1950 AND s.year BETWEEN 1900 AND 1950 WHERE p.year BETWEEN 1900 AND 1950 OR s.year BETWEEN 1900 AND 1950;
SELECT title  FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;
SELECT title  FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;
SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT painterID FROM Paintings WHERE year < 1900 GROUP BY painterID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.fname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID, a.fname ORDER BY COUNT(s.sculptureID) DESC LIMIT 1;
SELECT a.fname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID, a.fname ORDER BY COUNT(*) DESC LIMIT 1;
SELECT title  FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT title  FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000;
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000;
SELECT DISTINCT location FROM Paintings WHERE mediumOn IN ('panel', 'canvas');
SELECT DISTINCT location FROM Paintings WHERE mediumOn IN ('canvas', 'panel');
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 241';
SELECT AVG(height_mm) AS avg_height, AVG(width_mm) AS avg_width FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 241';
SELECT MAX(height_mm) AS max_height, MAX(paintingID) AS max_id FROM Paintings WHERE year < 1900;
SELECT paintingID, height_mm FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1;
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year;
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year;
SELECT a.lname, a.fname, AVG(p.height_mm) AS avg_height, AVG(p.width_mm) AS avg_width FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.lname, a.fname ORDER BY a.lname, a.fname;
SELECT a.lname, a.fname, AVG(p.height_mm) AS avg_height, AVG(p.width_mm) AS avg_width FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.lname, a.fname ORDER BY a.lname, a.fname;
SELECT a.fname, COUNT(*) AS num_works FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID, a.fname HAVING COUNT(*) >= 2;
SELECT a.fname, COUNT(p.paintingID) AS num_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID, a.fname HAVING COUNT(p.paintingID) >= 2;
SELECT a.deathYear FROM Artists a WHERE (SELECT COUNT(*) FROM Paintings p WHERE p.painterID = a.artistID) <= 3;
SELECT a.lname, a.fname, a.deathYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.artistID, a.lname, a.fname, a.deathYear HAVING COUNT(p.paintingID) < 4;
SELECT a.deathYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID ORDER BY COUNT(s.sculptureID) ASC LIMIT 1;
SELECT a.deathYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID ORDER BY COUNT(s.sculptureID) ASC LIMIT 1;
SELECT paintingID, height_mm FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1;
SELECT paintingID, height_mm  FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1;
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240');
SELECT p1.paintingID FROM Paintings p1 WHERE p1.year < (   SELECT MIN(p2.year)   FROM Paintings p2   WHERE p2.location = 'Gallery 240' );
SELECT paintingID FROM Paintings WHERE height_mm > (   SELECT MAX(height_mm)   FROM Paintings   WHERE year > 1900 );
SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (   SELECT MAX(p2.height_mm)   FROM Paintings p2   WHERE p2.year > 1900 );
SELECT a.lname, a.fname, COUNT(*) AS num_oil_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' GROUP BY a.artistID, a.lname, a.fname ORDER BY num_oil_paintings DESC LIMIT 3;
SELECT a.lname, a.fname, COUNT(*) AS num_oil_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' GROUP BY a.artistID, a.lname, a.fname ORDER BY num_oil_paintings DESC LIMIT 1;
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year;
SELECT paintingID, location, title, year FROM Paintings WHERE medium = 'oil' ORDER BY year;
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title;
SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title;
SELECT fname, lname FROM Artists a WHERE EXISTS (   SELECT 1    FROM Paintings p   WHERE p.painterID = a.artistID ) AND NOT EXISTS (   SELECT 1   FROM Sculptures s   WHERE s.sculptorID = a.artistID );
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures);
SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND paintingID NOT IN (   SELECT paintingID   FROM Paintings   WHERE mediumOn = 'canvas' );
SELECT title, year, medium, mediumOn, location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas';
SELECT COUNT(*) FROM race;
SELECT COUNT(*) FROM race
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC;
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team
SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
SELECT Winning_driver FROM race WHERE Pole_Position <> 'Junior Strous';
SELECT Constructor FROM driver ORDER BY Age ASC;
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;
SELECT MAX(Age) AS max_age, MIN(Age) AS min_age FROM driver;
SELECT MAX(Age) AS max_age, MIN(Age) AS min_age FROM driver;
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20;
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC;
SELECT Driver_Name, Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID;
SELECT Driver_Name, Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID;
SELECT Driver_Name, COUNT(*) AS num_races FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY Driver_Name;
SELECT Driver_Name, COUNT(*) AS Races_Participated FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY Driver_Name;
SELECT d.Age FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID ORDER BY COUNT(r.Road) DESC LIMIT 1;
SELECT d.Age FROM driver d INNER JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID ORDER BY COUNT(r.Road) DESC LIMIT 1;
SELECT Driver_Name, Age FROM driver WHERE Driver_ID IN (   SELECT Driver_ID   FROM race   GROUP BY Driver_ID   HAVING COUNT(*) >= 2 );
SELECT Driver_Name, Age FROM driver d WHERE (SELECT COUNT(*) FROM race r WHERE r.Driver_ID = d.Driver_ID) >= 2;
SELECT DISTINCT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26;
SELECT Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26;
SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti';
SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti';
SELECT Constructor, COUNT(Driver_ID) AS Number_of_Drivers FROM driver GROUP BY Constructor;
SELECT Constructor, COUNT(*) AS num_drivers FROM driver GROUP BY Constructor;
SELECT Engine, COUNT(*) AS Count FROM driver GROUP BY Engine ORDER BY Count DESC LIMIT 1;
SELECT Engine, COUNT(*) AS count  FROM driver GROUP BY Engine ORDER BY count DESC LIMIT 1;
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2;
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) >= 2;
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (   SELECT Driver_ID   FROM race );
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (   SELECT Driver_ID   FROM race );
SELECT DISTINCT Constructor FROM driver d1 WHERE d1.Age < 20   AND EXISTS (     SELECT 1      FROM driver d2     WHERE d2.Constructor = d1.Constructor       AND d2.Age > 30   );
SELECT DISTINCT Constructor FROM driver d1 WHERE d1.Age < 20   AND EXISTS (     SELECT 1      FROM driver d2     WHERE d2.Constructor = d1.Constructor       AND d2.Age > 30   )
SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1;
SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(*) > 1
SELECT Driver_Name FROM driver WHERE Driver_ID IN (   SELECT Driver_ID   FROM race   WHERE Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong')   GROUP BY Driver_ID   HAVING COUNT(DISTINCT Pole_Position) = 2 );
SELECT Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong') GROUP BY Driver_Name HAVING COUNT(DISTINCT r.Pole_Position) = 2;
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (   SELECT Driver_ID   FROM race   WHERE Pole_Position = 'James Hinchcliffe' );
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (   SELECT Driver_ID   FROM race   WHERE Pole_Position = 'James Hinchcliffe' );
SELECT COUNT(*) FROM languages;
SELECT COUNT(*) FROM languages;
SELECT name FROM languages ORDER BY name ASC;
SELECT name FROM languages ORDER BY name;
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT name FROM languages WHERE name LIKE '%ish%';
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT AVG(justice_score) AS average_justice_score FROM countries;
SELECT AVG(justice_score) AS avg_justice_score FROM countries;
SELECT MAX(health_score) AS max_health_score, MIN(health_score) AS min_health_score FROM countries WHERE name != 'Norway';
SELECT MAX(health_score) AS max_health_score, MIN(health_score) AS min_health_score FROM countries WHERE name != 'Norway';
SELECT COUNT(DISTINCT language_id) FROM official_languages;
SELECT COUNT(DISTINCT language_id) AS num_official_languages FROM official_languages;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT c.name AS country, l.name AS language FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id;
SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id;
SELECT l.name, COUNT(ol.country_id) AS num_countries FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name;
SELECT l.name, COUNT(ol.country_id) AS num_countries FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(ol.country_id) DESC LIMIT 1;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(ol.country_id) >= 2;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) >= 2;
SELECT AVG(c.overall_score) AS avg_overall_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English';
SELECT AVG(c.overall_score) AS avg_overall_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English';
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(*) DESC LIMIT 3;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name ORDER BY COUNT(ol.country_id) DESC LIMIT 3;
SELECT l.name, AVG(c.overall_score) AS avg_overall_score FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY avg_overall_score DESC;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY AVG(c.overall_score) DESC;
SELECT c.name FROM countries c JOIN official_languages ol ON c.id = ol.country_id GROUP BY c.name ORDER BY COUNT(ol.language_id) DESC LIMIT 1;
SELECT c.name, COUNT(ol.language_id) AS num_languages FROM countries c JOIN official_languages ol ON c.id = ol.country_id GROUP BY c.name ORDER BY num_languages DESC LIMIT 1;
SELECT l.name FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id WHERE ol.country_id IS NULL
SELECT l.name FROM languages l LEFT JOIN official_languages ol ON l.id = ol.language_id WHERE ol.country_id IS NULL
SELECT c.name FROM countries c LEFT JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IS NULL;
SELECT c.name FROM countries c LEFT JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IS NULL;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE c.overall_score > 95     OR c.overall_score < 90 GROUP BY l.name HAVING COUNT(DISTINCT CASE WHEN c.overall_score > 95 THEN 1 END) > 0    AND COUNT(DISTINCT CASE WHEN c.overall_score < 90 THEN 1 END) > 0;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id JOIN countries c ON ol.country_id = c.id WHERE l.id IN (   SELECT ol.language_id   FROM official_languages ol   JOIN countries c ON ol.country_id = c.id   WHERE c.overall_score > 95   INTERSECT   SELECT ol.language_id   FROM official_languages ol   JOIN countries c ON ol.country_id = c.id   WHERE c.overall_score < 90 );
SELECT country, town_city FROM Addresses;
SELECT town_city, country FROM Addresses;
SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id
SELECT p.property_id, a.county_state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id;
SELECT feature_description FROM Features WHERE feature_name = 'rooftop';
SELECT feature_description FROM Features WHERE feature_name = 'rooftop';
SELECT f.feature_name, f.feature_description FROM Features f INNER JOIN Property_Features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_name, f.feature_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT f.feature_name, f.feature_description FROM Features f JOIN Property_Features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_id, f.feature_name, f.feature_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MIN(room_count) AS min_rooms FROM Properties;
SELECT MIN(room_count) FROM Properties;
SELECT COUNT(*)  FROM Properties WHERE garage_yn = 1 OR parking_lots = 1;
SELECT COUNT(*)  FROM Properties WHERE garage_yn = 1 OR parking_lots = 1;
SELECT u.age_category_code FROM Users u JOIN Ref_User_Categories c ON u.user_category_code = c.user_category_code WHERE c.user_category_description LIKE '%Mother%'
SELECT DISTINCT r.age_category_code, r.age_category_description FROM Ref_Age_Categories r JOIN Users u ON r.age_category_code = u.age_category_code JOIN Ref_User_Categories c ON u.user_category_code = c.user_category_code WHERE c.user_category_description LIKE '%Mother%';
SELECT first_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.user_id, u.first_name ORDER BY COUNT(p.property_id) DESC LIMIT 1;
SELECT first_name FROM Users WHERE user_id = (   SELECT owner_user_id   FROM Properties   GROUP BY owner_user_id   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT AVG(p.room_count) AS avg_room_count FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden';
SELECT AVG(p.room_count) AS avg_rooms FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'garden';
SELECT DISTINCT town_city FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool'
SELECT DISTINCT town_city FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id WHERE f.feature_name = 'swimming pool';
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1;
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1;
SELECT AVG(room_count) AS avg_rooms_per_property FROM Properties;
SELECT AVG(room_count) AS avg_rooms_per_property FROM Properties;
SELECT COUNT(DISTINCT room_size) FROM Rooms;
SELECT COUNT(DISTINCT room_size) FROM Rooms;
SELECT user_id, search_string FROM User_Searches WHERE user_id IN (   SELECT user_id   FROM User_Searches   GROUP BY user_id   HAVING COUNT(*) >= 2 )
SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(*) >= 2;
SELECT MAX(search_datetime) AS latest_search_time FROM User_Searches;
SELECT MAX(search_datetime) AS most_recent_search FROM User_Searches;
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC;
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC;
SELECT a.zip_postcode FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id WHERE p.owner_user_id IN (   SELECT owner_user_id   FROM Properties   GROUP BY owner_user_id   HAVING COUNT(*) > 2 )
SELECT a.zip_postcode FROM Addresses a JOIN Properties p ON a.address_id = p.property_address_id JOIN Users u ON p.owner_user_id = u.user_id GROUP BY u.user_id, a.zip_postcode HAVING COUNT(p.property_id) > 2
SELECT u.user_category_code, us.user_id FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_category_code, us.user_id HAVING COUNT(us.search_seq) = 1;
SELECT u.user_id, u.user_category_code FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id, u.user_category_code HAVING COUNT(us.search_seq) = 1
SELECT u.age_category_code FROM User_Searches us JOIN Users u ON us.user_id = u.user_id ORDER BY us.search_datetime LIMIT 1;
SELECT u.age_category_code FROM User_Searches us JOIN Users u ON us.user_id = u.user_id ORDER BY us.search_datetime LIMIT 1;
SELECT login_name, first_name FROM Users WHERE user_category_code = 'Senior Citizen' ORDER BY first_name;
SELECT u.first_name, u.login_name FROM Users u JOIN Ref_User_Categories c ON u.user_category_code = c.user_category_code WHERE c.user_category_description = 'Senior Citizen' ORDER BY u.first_name;
SELECT COUNT(*) AS total_buyer_searches FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE u.is_buyer = 1;
SELECT COUNT(*)  FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE u.is_buyer = 1;
SELECT date_registered FROM Users WHERE login_name = 'ratione';
SELECT date_registered FROM Users WHERE login_name = 'ratione';
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1;
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1;
SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE u.user_category_code = 'Senior Citizen'
SELECT a.line_1_number_building, a.line_2_number_street, a.town_city FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE u.user_category_code = 'Senior Citizen'
SELECT COUNT(*)  FROM (   SELECT property_id   FROM Property_Features   GROUP BY property_id   HAVING COUNT(feature_id) >= 2 ) t;
SELECT COUNT(*)  FROM (   SELECT property_id   FROM Property_Features   GROUP BY property_id   HAVING COUNT(DISTINCT feature_id) >= 2 ) t;
SELECT property_id, COUNT(*) AS photo_count FROM Property_Photos GROUP BY property_id;
SELECT property_id, COUNT(*) AS photo_count FROM Property_Photos GROUP BY property_id;
SELECT u.user_id, COUNT(pp.photo_filename) AS num_photos FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id LEFT JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY u.user_id;
SELECT p.owner_user_id, COUNT(*) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id;
SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.user_category_code IN ('Single Mother', 'Student')
SELECT SUM(price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE u.user_category_code IN ('Single Mother', 'Student');
SELECT p.property_name, uph.datestamp FROM User_Property_History uph JOIN Properties p ON uph.property_id = p.property_id ORDER BY uph.datestamp;
SELECT uph.datestamp, p.property_name FROM User_Property_History uph JOIN Properties p ON uph.property_id = p.property_id ORDER BY uph.datestamp;
SELECT property_type_code, property_type_description FROM Ref_Property_Types ORDER BY property_type_code LIMIT 1;
SELECT p.property_type_code, r.property_type_description FROM Properties p JOIN Ref_Property_Types r ON p.property_type_code = r.property_type_code GROUP BY p.property_type_code, r.property_type_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT age_category_description  FROM Ref_Age_Categories WHERE age_category_code = 'Over 60';
SELECT age_category_description  FROM Ref_Age_Categories WHERE age_category_code = 'Over 60';
SELECT room_size, COUNT(*) as count FROM Rooms GROUP BY room_size;
SELECT room_size, COUNT(*) AS room_count FROM Rooms GROUP BY room_size;
SELECT c.country FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id JOIN Countries c ON a.country_id = c.country_id WHERE u.first_name = 'Robbie';
SELECT c.country FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id JOIN Addresses c ON a.country = c.country WHERE u.first_name = 'Robbie';
SELECT u.first_name, u.middle_name, u.last_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id JOIN Addresses a ON u.user_address_id = a.address_id AND p.property_address_id = a.address_id
SELECT u.first_name, u.middle_name, u.last_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id JOIN Addresses a ON p.property_address_id = a.address_id WHERE u.user_address_id = a.address_id
SELECT us.search_string FROM User_Searches us JOIN Users u ON us.user_id = u.user_id LEFT JOIN Properties p ON u.user_id = p.owner_user_id WHERE p.property_id IS NULL
SELECT us.search_string FROM User_Searches us JOIN Users u ON us.user_id = u.user_id LEFT JOIN Properties p ON u.user_id = p.owner_user_id WHERE p.property_id IS NULL
SELECT u.user_id, u.last_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id LEFT JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id, u.last_name HAVING COUNT(DISTINCT p.property_id) >= 2 AND COUNT(us.search_seq) <= 2;
SELECT u.user_id, u.last_name FROM Users u JOIN User_Searches us ON u.user_id = us.user_id JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.user_id, u.last_name HAVING COUNT(DISTINCT us.search_seq) <= 2 AND COUNT(DISTINCT p.property_id) >= 2;
SELECT COUNT(*) FROM bike WHERE weight > 780;
SELECT product_name, weight FROM bike ORDER BY price ASC;
SELECT heat, name, nation FROM cyclist;
SELECT MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM bike;
SELECT AVG(price) AS avg_price FROM bike WHERE material = 'Carbon CC';
SELECT name, result FROM cyclist WHERE nation != 'Russia';
SELECT DISTINCT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015;
SELECT b.id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id GROUP BY b.id, b.product_name HAVING COUNT(cob.cyclist_id) >= 4;
SELECT c.id, c.name FROM cyclist c INNER JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id, c.name ORDER BY COUNT(cob.bike_id) DESC LIMIT 1;
SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain');
SELECT COUNT(DISTINCT heat) AS num_heat_levels FROM cyclist;
SELECT COUNT(*)  FROM cyclist c WHERE NOT EXISTS (   SELECT 1    FROM cyclists_own_bikes cob   WHERE cob.cyclist_id = c.id     AND cob.purchase_year > 2015 );
SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result < '4:21.558';
SELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.name IN ('Bradley Wiggins', 'Antonio Tauler') GROUP BY b.id HAVING COUNT(DISTINCT c.name) = 2;
SELECT name, nation, result FROM cyclist WHERE id NOT IN (   SELECT cyclist_id   FROM cyclists_own_bikes );
SELECT product_name FROM bike WHERE material LIKE '%fiber%';
SELECT c.id, c.name, COUNT(cob.bike_id) AS bikes_owned FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id GROUP BY c.id, c.name ORDER BY c.id;
SELECT Flavor, Price FROM goods WHERE Food = 'Cake' ORDER BY Price DESC LIMIT 1;
SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Price DESC LIMIT 1;
SELECT Flavor, Price FROM goods WHERE Food = 'Cookie' ORDER BY Price ASC LIMIT 1;
SELECT Id, Flavor FROM goods WHERE Food = 'Cookie' ORDER BY Price ASC LIMIT 1;
SELECT Id  FROM goods WHERE Flavor = 'Apple';
SELECT Id  FROM goods WHERE Flavor = 'Apple';
SELECT Id FROM goods WHERE Price < 3;
SELECT Id FROM goods WHERE Price < 3;
SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Lemon' AND g.Food = 'Cake';
SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Lemon' AND g.Food = 'Cake';
SELECT g.Food, COUNT(DISTINCT r.CustomerId) AS CustomerCount FROM goods g JOIN items i ON g.Id = i.Item JOIN receipts r ON i.Receipt = r.ReceiptNumber GROUP BY g.Food;
SELECT g.Food, COUNT(DISTINCT r.CustomerId) AS CustomerCount FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY g.Food;
SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) >= 15;
SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING COUNT(*) >= 15;
SELECT LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id, LastName HAVING COUNT(*) > 10
SELECT LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id, LastName HAVING COUNT(*) > 10
SELECT COUNT(DISTINCT Food) AS num_cake_types FROM goods WHERE Food = 'Cake';
SELECT COUNT(DISTINCT Food) AS num_cake_types FROM goods WHERE Food = 'Cake';
SELECT DISTINCT Flavor FROM goods WHERE Food = 'Croissant';
SELECT DISTINCT Flavor FROM goods WHERE Food = 'Croissant';
SELECT DISTINCT g.Id, g.Flavor, g.Food, g.Price FROM items i JOIN receipts r ON i.Receipt = r.ReceiptNumber JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = 15;
SELECT DISTINCT g.Id, g.Flavor, g.Food FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt   JOIN goods g ON i.Item = g.Id WHERE r.CustomerId = 15;
SELECT      Food,     AVG(Price) AS avg_price,     MAX(Price) AS max_price,     MIN(Price) AS min_price FROM goods GROUP BY Food;
SELECT      Food,     AVG(Price) AS avg_price,     MIN(Price) AS min_price,     MAX(Price) AS max_price FROM goods GROUP BY Food;
SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food IN ('Cake', 'Cookie') GROUP BY r.ReceiptNumber HAVING COUNT(DISTINCT g.Food) = 2;
SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Food IN ('Cake', 'Cookie') GROUP BY r.ReceiptNumber HAVING COUNT(DISTINCT g.Food) = 2;
SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'LOGAN' AND g.Food = 'Croissant';
SELECT r.ReceiptNumber FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE c.LastName = 'LOGAN' AND g.Food = 'Croissant';
SELECT r.ReceiptNumber, r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt   JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1;
SELECT r.ReceiptNumber, r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt   JOIN goods g ON i.Item = g.Id ORDER BY g.Price DESC LIMIT 1;
SELECT g.Id, g.Flavor, g.Food FROM goods g LEFT JOIN items i ON g.Id = i.Item GROUP BY g.Id, g.Flavor, g.Food ORDER BY COUNT(i.Item) ASC LIMIT 1;
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Food, COUNT(*) AS NumGoods FROM goods GROUP BY Food;
SELECT Food, COUNT(*) AS NumGoods FROM goods GROUP BY Food;
SELECT Food, AVG(Price) AS AveragePrice FROM goods GROUP BY Food;
SELECT Food, AVG(Price) AS AveragePrice FROM goods GROUP BY Food;
SELECT Id  FROM goods WHERE Flavor = 'Apricot' AND Price < 5.00;
SELECT Id  FROM goods WHERE Flavor = 'Apricot' AND Price < 5;
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Price > 10;
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Price > 10;
SELECT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods);
SELECT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods);
SELECT DISTINCT g1.Id FROM goods g1 WHERE g1.Price < (   SELECT MAX(g2.Price)   FROM goods g2   WHERE g2.Food = 'Tart' );
SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Tart');
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;
SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15;
SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15;
SELECT Id FROM goods WHERE Id LIKE '%APP%';
SELECT Id  FROM goods WHERE Id LIKE '%APP%';
SELECT Flavor, Price  FROM goods WHERE Id LIKE '70%';
SELECT Id, Price FROM goods WHERE Id LIKE '%70%';
SELECT LastName FROM customers ORDER BY LastName;
SELECT LastName FROM customers ORDER BY LastName;
SELECT Id FROM goods ORDER BY Id;
SELECT DISTINCT Item FROM items ORDER BY Item;
SELECT r.ReceiptNumber, r.Date, r.CustomerId FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt   LEFT JOIN goods g ON i.Item = g.Id WHERE (g.Flavor = 'Apple' AND g.Food = 'Pie') OR r.CustomerId = 12
SELECT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt   LEFT JOIN goods g ON i.Item = g.Id WHERE (g.Flavor = 'Apple' AND g.Food = 'Pie') OR r.CustomerId = 12
SELECT ReceiptNumber, Date FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts);
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1;
SELECT r.ReceiptNumber, r.Date, r.CustomerId FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt LEFT JOIN goods g ON i.Item = g.Id WHERE r.Date = (SELECT MIN(Date) FROM receipts)    OR g.Price > 10
SELECT r.ReceiptNumber FROM receipts r LEFT JOIN items i ON r.ReceiptNumber = i.Receipt   LEFT JOIN goods g ON i.Item = g.Id WHERE g.Price > 10 OR r.Date = (SELECT MIN(Date) FROM receipts)
SELECT Id  FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake') AND Price BETWEEN 3 AND 7;
SELECT Id  FROM goods WHERE (Food = 'Cookie' OR Food = 'Cake')   AND Price BETWEEN 3 AND 7;
SELECT FirstName, LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId WHERE r.Date = (SELECT MIN(Date) FROM receipts);
SELECT FirstName, LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId ORDER BY r.Date LIMIT 1;
SELECT AVG(Price) AS average_price FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry');
SELECT AVG(Price) AS average_price FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry');
SELECT MIN(Price) AS CheapestPrice FROM goods WHERE Flavor = 'Cheese';
SELECT Id, Price FROM goods WHERE Flavor = 'Cheese' ORDER BY Price ASC LIMIT 1;
SELECT      Flavor,     MAX(Price) AS highest_price,     MIN(Price) AS lowest_price,     AVG(Price) AS average_price FROM     goods GROUP BY     Flavor ORDER BY     Flavor;
SELECT Flavor, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice, AVG(Price) AS AvgPrice FROM goods GROUP BY Flavor ORDER BY Flavor;
SELECT Food, MIN(Price) AS LowestPrice, MAX(Price) AS HighestPrice FROM goods GROUP BY Food ORDER BY Food;
SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food;
SELECT Date, COUNT(*) AS NumReceipts FROM receipts GROUP BY Date ORDER BY NumReceipts DESC LIMIT 3;
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3;
SELECT c.FirstName, c.LastName, COUNT(*) AS num_visits FROM customers c JOIN receipts r ON c.Id = r.CustomerId GROUP BY c.Id, c.FirstName, c.LastName ORDER BY num_visits DESC LIMIT 1;
SELECT TOP 1 CustomerId, COUNT(*) AS NumPurchases FROM receipts GROUP BY CustomerId ORDER BY NumPurchases DESC
SELECT Date, COUNT(DISTINCT CustomerId) AS DistinctCustomers FROM receipts GROUP BY Date;
SELECT Date, COUNT(DISTINCT CustomerId) AS CustomerCount FROM receipts GROUP BY Date;
SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Apple' AND g.Food = 'Tart';
SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Apple' AND g.Food = 'Tart';
SELECT g.Id FROM goods g WHERE g.Food = 'Cookie' AND g.Price < (   SELECT MIN(Price)   FROM goods   WHERE Food = 'Croissant' );
SELECT g.Id FROM goods g WHERE g.Food = 'Cookie' AND g.Price < (   SELECT MIN(Price)   FROM goods   WHERE Food = 'Croissant' );
SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (   SELECT AVG(Price)   FROM goods   WHERE Food = 'Tart' );
SELECT g.Id FROM goods g WHERE g.Food = 'Cake' AND g.Price >= (   SELECT AVG(Price)   FROM goods   WHERE Food = 'Tart' );
SELECT Id FROM goods WHERE Price > (SELECT 2 * AVG(Price) FROM goods);
SELECT Id FROM goods WHERE Price > (SELECT 2 * AVG(Price) FROM goods);
SELECT Id, Flavor, Food FROM goods ORDER BY Price;
SELECT Id, Flavor, Food FROM goods ORDER BY Price;
SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor;
SELECT Id, Flavor FROM goods WHERE Food = 'Cake' ORDER BY Flavor;
SELECT g.Id, g.Flavor, g.Food, g.Price FROM goods g LEFT JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'Chocolate' GROUP BY g.Id, g.Flavor, g.Food, g.Price HAVING COUNT(i.Receipt) <= 10;
SELECT g.Id, g.Flavor, COUNT(*) AS PurchaseCount FROM goods g JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'Chocolate' GROUP BY g.Id, g.Flavor HAVING COUNT(*) <= 10;
SELECT DISTINCT Flavor FROM goods WHERE Food = 'Cake'   AND Flavor NOT IN (     SELECT Flavor     FROM goods     WHERE Food = 'Tart'   );
SELECT DISTINCT g1.Flavor FROM goods g1 WHERE g1.Food = 'Cake'   AND g1.Flavor NOT IN (     SELECT g2.Flavor     FROM goods g2     WHERE g2.Food = 'Tart'   );
SELECT Flavor, Food, COUNT(*) AS Popularity FROM goods g JOIN items i ON g.Id = i.Item GROUP BY Flavor, Food ORDER BY Popularity DESC LIMIT 3;
SELECT g.Flavor, g.Food, COUNT(*) AS PurchaseCount FROM items i JOIN goods g ON i.Item = g.Id GROUP BY g.Flavor, g.Food ORDER BY PurchaseCount DESC LIMIT 3;
SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING SUM(g.Price) > 150;
SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING SUM(g.Price) > 150;
SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5;
SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY c.Id HAVING AVG(g.Price) > 5;
SELECT Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY Date HAVING SUM(g.Price) > 100
SELECT Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY Date HAVING SUM(g.Price) > 100
SELECT COUNT(*) FROM driver;
SELECT COUNT(*) AS total_drivers FROM driver;
SELECT Make, COUNT(*) AS num_drivers FROM driver WHERE Points > 150 GROUP BY Make;
SELECT Make, COUNT(*) AS driver_count FROM driver WHERE Points > 150 GROUP BY Make;
SELECT Make, AVG(Age) AS Average_Age FROM driver GROUP BY Make;
SELECT AVG(Age) AS average_age, Make FROM driver GROUP BY Make;
SELECT AVG(Laps) AS average_laps FROM driver WHERE Age < 20;
SELECT AVG(Laps) AS avg_laps FROM driver WHERE Age < 20;
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner;
SELECT Manager, Sponsor, Car_Owner FROM team ORDER BY Car_Owner;
SELECT Make FROM team GROUP BY Make HAVING COUNT(*) > 1;
SELECT Make FROM team GROUP BY Make HAVING COUNT(DISTINCT Team_ID) > 1;
SELECT Make  FROM team WHERE Car_Owner = 'Buddy Arrington';
SELECT Make  FROM team WHERE Car_Owner = 'Buddy Arrington';
SELECT MAX(Points) AS max_points, MIN(Points) AS min_points FROM driver;
SELECT MAX(Points) AS Highest_Points, MIN(Points) AS Lowest_Points FROM driver;
SELECT COUNT(*)  FROM driver WHERE Points < 150;
SELECT COUNT(*)  FROM driver WHERE Points < 150;
SELECT Driver FROM driver ORDER BY Age ASC;
SELECT Driver FROM driver ORDER BY Age ASC;
SELECT Driver FROM driver ORDER BY Points DESC;
SELECT Driver, Points FROM driver ORDER BY Points DESC;
SELECT Driver, Country  FROM driver d JOIN country c ON d.Country = c.Country_Id
SELECT Driver, Country.Country FROM driver JOIN country ON driver.Country = country.Country_Id
SELECT MAX(d.Points) AS max_points FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin';
SELECT MAX(d.Points)  FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Capital = 'Dublin';
SELECT AVG(d.Age) AS avg_age FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English';
SELECT AVG(d.Age) AS avg_age FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE c.Official_native_language = 'English';
SELECT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Points > 150
SELECT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Points > 150;
SELECT c.Capital FROM driver d JOIN country c ON d.Country = c.Country_Id ORDER BY d.Points DESC LIMIT 1;
SELECT c.Capital FROM driver d JOIN country c ON d.Country = c.Country_Id ORDER BY d.Points DESC LIMIT 1;
SELECT Make, COUNT(*) AS num_drivers FROM driver GROUP BY Make;
SELECT Make, COUNT(*) AS driver_count FROM driver GROUP BY Make;
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Make, COUNT(*) AS num_drivers FROM driver GROUP BY Make ORDER BY num_drivers DESC LIMIT 1;
SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3;
SELECT Make FROM driver GROUP BY Make HAVING COUNT(DISTINCT Driver_ID) >= 3;
SELECT Team FROM team WHERE Team_ID NOT IN (   SELECT Team_ID   FROM team_driver );
SELECT t.Team FROM team t LEFT JOIN team_driver td ON t.Team_ID = td.Team_ID WHERE td.Driver_ID IS NULL;
SELECT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Make IN ('Dodge', 'Chevrolet') GROUP BY c.Country HAVING COUNT(DISTINCT d.Make) = 2;
SELECT c.Country FROM country c JOIN driver d ON c.Country_Id = d.Country WHERE d.Make IN ('Dodge', 'Chevrolet') GROUP BY c.Country HAVING COUNT(DISTINCT d.Make) = 2;
SELECT SUM(Points) AS total_points, AVG(Points) AS average_points FROM driver;
SELECT SUM(Points) AS total_points, AVG(Points) AS average_points FROM driver;
SELECT c.Country FROM country c LEFT JOIN driver d ON c.Country_Id = d.Country WHERE d.Driver_ID IS NULL;
SELECT c.Country FROM country c LEFT JOIN driver d ON c.Country_Id = d.Country WHERE d.Driver_ID IS NULL;
SELECT Manager, Sponsor FROM team WHERE Team_ID = (   SELECT Team_ID   FROM team_driver   GROUP BY Team_ID   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT Manager, Sponsor FROM team WHERE Team_ID = (   SELECT Team_ID   FROM team_driver   GROUP BY Team_ID   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT t.Manager, t.Car_Owner FROM team t JOIN team_driver td ON t.Team_ID = td.Team_ID GROUP BY t.Team_ID, t.Manager, t.Car_Owner HAVING COUNT(td.Driver_ID) >= 2;
SELECT Manager, Car_Owner FROM team WHERE Team_ID IN (   SELECT Team_ID   FROM team_driver   GROUP BY Team_ID   HAVING COUNT(Driver_ID) >= 2 );
SELECT COUNT(*) FROM institution;
SELECT COUNT(*) FROM institution;
SELECT Name FROM institution ORDER BY Name ASC;
SELECT Name FROM institution ORDER BY Name;
SELECT Name FROM institution ORDER BY Founded ASC;
SELECT Name, Founded FROM institution ORDER BY Founded;
SELECT City, Province FROM institution;
SELECT City, Province FROM institution;
SELECT MAX(Enrollment) AS max_enrollment, MIN(Enrollment) AS min_enrollment FROM institution;
SELECT MAX(Enrollment) AS max_enrollment, MIN(Enrollment) AS min_enrollment FROM institution;
SELECT Affiliation FROM institution WHERE City != 'Vancouver';
SELECT Affiliation FROM institution WHERE City != 'Vancouver';
SELECT Stadium, Capacity FROM institution ORDER BY Capacity DESC;
SELECT Stadium, Capacity FROM institution ORDER BY Capacity DESC;
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1;
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1;
SELECT Name, Nickname FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID;
SELECT i.Name, c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID;
SELECT c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY i.Enrollment ASC LIMIT 1;
SELECT c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY i.Enrollment ASC LIMIT 1;
SELECT i.Name, c.Number_of_Championships FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC;
SELECT i.Name, c.Number_of_Championships FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC;
SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE c.Number_of_Championships >= 1;
SELECT i.Name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE c.Number_of_Championships >= 1;
SELECT SUM(c.Number_of_Championships) AS total_championships FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE i.Affiliation = 'Public';
SELECT SUM(c.Number_of_Championships) AS total_championships FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID WHERE i.Affiliation = 'Public';
SELECT Affiliation, COUNT(*) AS Number_of_Institutions FROM institution GROUP BY Affiliation;
SELECT Affiliation, COUNT(*) as Number_of_Institutions FROM institution GROUP BY Affiliation;
SELECT Affiliation, COUNT(*) AS count  FROM institution GROUP BY Affiliation ORDER BY count DESC LIMIT 1;
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1;
SELECT Founded, COUNT(*) AS num_institutions_founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1;
SELECT c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY i.Capacity DESC;
SELECT c.Nickname, i.Capacity FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC;
SELECT SUM(Enrollment) AS total_enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary');
SELECT Enrollment FROM institution WHERE City IN ('Vancouver', 'Calgary');
SELECT DISTINCT Province FROM institution WHERE Province IN (   SELECT Province   FROM institution   WHERE Founded < 1920 ) AND Province IN (   SELECT Province   FROM institution   WHERE Founded > 1950 );
SELECT DISTINCT Province FROM institution WHERE Province IN (   SELECT Province   FROM institution   WHERE Founded < 1920 ) AND Province IN (   SELECT Province   FROM institution   WHERE Founded > 1950 );
SELECT COUNT(DISTINCT Province) FROM institution;
SELECT COUNT(DISTINCT Province) AS num_provinces FROM institution;
SELECT Code, Location, Capacity FROM Warehouses;
SELECT Code, Location, Capacity FROM Warehouses;
SELECT DISTINCT Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'New York';
SELECT DISTINCT Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'New York';
SELECT Contents FROM Boxes WHERE Value > 150;
SELECT Contents FROM Boxes WHERE Value > 150;
SELECT Warehouse, AVG(Value) AS avg_value FROM Boxes GROUP BY Warehouse;
SELECT w.Location, AVG(b.Value) AS AverageValue FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Location;
SELECT AVG(Value) AS AverageValue, SUM(Value) AS TotalValue FROM Boxes;
SELECT AVG(Value) AS average_value, SUM(Value) AS total_value FROM Boxes;
SELECT AVG(Capacity) AS avg_capacity, SUM(Capacity) AS total_capacity FROM Warehouses;
SELECT AVG(Capacity) AS avg_capacity, SUM(Capacity) AS total_capacity FROM Warehouses;
SELECT Contents, AVG(Value) AS avg_value, MAX(Value) AS max_value FROM Boxes GROUP BY Contents;
SELECT Contents, AVG(Value) AS avg_value, MAX(Value) AS max_value FROM Boxes GROUP BY Contents;
SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC LIMIT 1;
SELECT Contents FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes);
SELECT AVG(Value) AS average_value FROM Boxes;
SELECT AVG(Value) AS average_value FROM Boxes;
SELECT DISTINCT Contents FROM Boxes;
SELECT DISTINCT Contents FROM Boxes;
SELECT COUNT(DISTINCT Contents) FROM Boxes;
SELECT COUNT(DISTINCT Contents) FROM Boxes;
SELECT DISTINCT Location FROM Warehouses;
SELECT DISTINCT Location FROM Warehouses;
SELECT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York');
SELECT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York');
SELECT SUM(Boxes.Value) AS TotalValue FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York');
SELECT SUM(Boxes.Value) AS TotalValue FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location IN ('Chicago', 'New York');
SELECT Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York');
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location IN ('Chicago', 'New York');
SELECT DISTINCT Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location <> 'New York';
SELECT Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location <> 'New York'   AND Contents NOT IN (     SELECT Contents      FROM Boxes b2     JOIN Warehouses w2 ON b2.Warehouse = w2.Code     WHERE w2.Location = 'New York'   );
SELECT Location FROM Warehouses WHERE Code IN (   SELECT Warehouse   FROM Boxes   WHERE Contents = 'Rocks'   AND Warehouse NOT IN (     SELECT Warehouse      FROM Boxes     WHERE Contents = 'Scissors'   ) );
SELECT Location FROM Warehouses WHERE Code IN (   SELECT Warehouse   FROM Boxes   WHERE Contents = 'Rocks'   AND Warehouse NOT IN (     SELECT Warehouse      FROM Boxes     WHERE Contents = 'Scissors'   ) );
SELECT w.Code, w.Location  FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents IN ('Rocks', 'Scissors');
SELECT DISTINCT Warehouse FROM Boxes WHERE Contents IN ('Rocks', 'Scissors');
SELECT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents IN ('Rocks', 'Scissors')
SELECT DISTINCT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents IN ('Rocks', 'Scissors');
SELECT Code, Contents FROM Boxes ORDER BY Value;
SELECT Code, Contents FROM Boxes ORDER BY Value;
SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes);
SELECT Code, Contents FROM Boxes WHERE Value = (SELECT MIN(Value) FROM Boxes);
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes);
SELECT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes);
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents;
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents;
SELECT Code FROM Boxes WHERE Value > (   SELECT MAX(Value)   FROM Boxes   WHERE Contents = 'Rocks' );
SELECT Code FROM Boxes WHERE Value > (   SELECT MAX(Value)   FROM Boxes   WHERE Contents = 'Rocks' );
SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors');
SELECT Code, Contents FROM Boxes WHERE Value > (SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors');
SELECT SUM(Boxes.Value) AS TotalValue FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Capacity = (SELECT MAX(Capacity) FROM Warehouses);
SELECT SUM(Boxes.Value) AS TotalValue FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Capacity = (SELECT MAX(Capacity) FROM Warehouses);
SELECT Warehouse, AVG(Value) AS avg_value FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150;
SELECT Warehouse, AVG(Value) AS AvgValue FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150;
SELECT Contents, SUM(Value) AS TotalValue, COUNT(*) AS NumBoxes FROM Boxes GROUP BY Contents;
SELECT Contents, SUM(Value) AS TotalValue, COUNT(*) AS NumberOfBoxes FROM Boxes GROUP BY Contents;
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AvgCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location;
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AvgCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location;
SELECT SUM(Capacity) AS total_capacity FROM Warehouses;
SELECT SUM(Capacity) AS total_capacity FROM Warehouses;
SELECT w.Location, MAX(b.Value) AS MaxValue FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Location;
SELECT w.Location, MAX(b.Value) AS MaxBoxValue FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Location;
SELECT w.Code, COUNT(b.Code) AS NumBoxes FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code;
SELECT w.Location, COUNT(b.Code) AS NumBoxes FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Location;
SELECT COUNT(DISTINCT w.Location) FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents = 'Rocks';
SELECT COUNT(DISTINCT Warehouse)  FROM Boxes WHERE Contents = 'Rocks';
SELECT b.Code, w.Location FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code;
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code;
SELECT b.Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE w.Location = 'Chicago';
SELECT Boxes.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'Chicago';
SELECT w.Location, COUNT(b.Code) AS NumBoxes FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Location;
SELECT w.Location, COUNT(b.Code) AS NumBoxes FROM Warehouses w LEFT JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Location;
SELECT w.Location, COUNT(DISTINCT b.Contents) AS NumContents FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Location;
SELECT w.Location, COUNT(DISTINCT b.Contents) AS NumContents FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Location;
SELECT w.Code FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code HAVING COUNT(b.Code) > w.Capacity;
SELECT w.Code FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code HAVING COUNT(b.Code) > w.Capacity;
SELECT SUM(Boxes.Value) AS TotalValue FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location != 'Chicago';
SELECT SUM(Boxes.Value) AS TotalValue FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location != 'Chicago';
SELECT University_Name, City, State FROM university ORDER BY University_Name;
SELECT University_Name, City, State FROM university ORDER BY University_Name;
SELECT COUNT(*)  FROM university WHERE State IN ('Illinois', 'Ohio');
SELECT COUNT(*)  FROM university WHERE State IN ('Illinois', 'Ohio');
SELECT    MAX(Enrollment) AS max_enrollment,   AVG(Enrollment) AS avg_enrollment,   MIN(Enrollment) AS min_enrollment FROM university;
SELECT    MAX(Enrollment) AS max_enrollment,   AVG(Enrollment) AS avg_enrollment,   MIN(Enrollment) AS min_enrollment FROM university;
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university);
SELECT University_Name, Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university);
SELECT DISTINCT Home_Conference FROM university;
SELECT DISTINCT Home_Conference FROM university;
SELECT Home_Conference, COUNT(*) AS num_universities FROM university GROUP BY Home_Conference;
SELECT Home_Conference, COUNT(*) AS num_universities FROM university GROUP BY Home_Conference;
SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State ORDER BY num_universities DESC LIMIT 1;
SELECT State, COUNT(*) AS num_universities FROM university GROUP BY State ORDER BY num_universities DESC LIMIT 1;
SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000;
SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000;
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY SUM(Enrollment) ASC LIMIT 1;
SELECT Home_Conference FROM university WHERE Enrollment = (SELECT MIN(Enrollment) FROM university)
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code;
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code;
SELECT m.Major_Name, mr.Rank FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College';
SELECT mr.Rank, m.Major_Name FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE u.University_Name = 'Augustana College';
SELECT u.University_Name, u.City, u.State FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank = 1
SELECT University_Name, City, State FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank = 1
SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank = 1 GROUP BY u.University_Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Rank = 1 GROUP BY u.University_Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT University_Name FROM university u WHERE NOT EXISTS (   SELECT 1    FROM major_ranking mr   WHERE mr.University_ID = u.University_ID     AND mr.Rank = 1 );
SELECT University_Name FROM university u WHERE NOT EXISTS (   SELECT 1    FROM major_ranking mr   WHERE mr.University_ID = u.University_ID     AND mr.Rank = 1 );
SELECT u.University_Name FROM university u JOIN major_ranking mr1 ON u.University_ID = mr1.University_ID JOIN major m1 ON mr1.Major_ID = m1.Major_ID AND m1.Major_Name = 'Accounting' JOIN major_ranking mr2 ON u.University_ID = mr2.University_ID JOIN major m2 ON mr2.Major_ID = m2.Major_ID AND m2.Major_Name = 'Urban Education'
SELECT u.University_Name FROM university u JOIN major_ranking mr1 ON u.University_ID = mr1.University_ID JOIN major m1 ON mr1.Major_ID = m1.Major_ID AND m1.Major_Name = 'Accounting' JOIN major_ranking mr2 ON u.University_ID = mr2.University_ID JOIN major m2 ON mr2.Major_ID = m2.Major_ID AND m2.Major_Name = 'Urban Education'
SELECT u.University_Name, o.Rank FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE u.State = 'Wisconsin';
SELECT University_Name, Rank FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID WHERE State = 'Wisconsin';
SELECT University_Name FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID ORDER BY r.Research_point DESC LIMIT 1
SELECT University_Name FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID ORDER BY r.Research_point DESC LIMIT 1;
SELECT University_Name FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID ORDER BY r.Reputation_point ASC;
SELECT University_Name FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID ORDER BY r.Reputation_point ASC;
SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3
SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank <= 3
SELECT SUM(Enrollment) AS total_enrollment FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID WHERE r.Rank <= 5;
SELECT SUM(Enrollment) AS total_enrollment FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID WHERE r.Rank <= 5;
SELECT University_Name, Citation_point FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID WHERE r.Reputation_point >= (   SELECT MIN(Reputation_point)   FROM (     SELECT Reputation_point     FROM overall_ranking     ORDER BY Reputation_point DESC     LIMIT 3   ) t );
SELECT University_Name, Citation_point FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID ORDER BY Reputation_point DESC LIMIT 3;
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2;
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(*) > 2
SELECT Title  FROM Movies WHERE Rating IS NULL;
SELECT Title FROM Movies WHERE Rating IS NULL;
SELECT Title  FROM Movies WHERE Rating = 'G';
SELECT Title FROM Movies WHERE Rating = 'G';
SELECT m.Title FROM Movies m JOIN MovieTheaters t ON m.Code = t.Movie WHERE t.Name = 'Odeon';
SELECT m.Title FROM Movies m JOIN MovieTheaters t ON m.Code = t.Movie WHERE t.Name = 'Odeon';
SELECT m.Title, t.Name FROM Movies m JOIN MovieTheaters t ON m.Code = t.Movie
SELECT m.Title, t.Name FROM Movies m JOIN MovieTheaters t ON m.Code = t.Movie;
SELECT COUNT(*)  FROM Movies WHERE Rating = 'G';
SELECT COUNT(*) FROM Movies WHERE Rating = 'G';
SELECT COUNT(DISTINCT Movie) AS num_movies FROM MovieTheaters;
SELECT COUNT(DISTINCT Movie) AS num_movies_playing  FROM MovieTheaters;
SELECT COUNT(DISTINCT Movie) AS distinct_movies FROM MovieTheaters;
SELECT COUNT(DISTINCT Movie) AS num_movies FROM MovieTheaters;
SELECT COUNT(DISTINCT Code) FROM MovieTheaters;
SELECT COUNT(DISTINCT Name) FROM MovieTheaters;
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%';
SELECT Rating  FROM Movies WHERE Title LIKE '%Citizen%';
SELECT Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating IN ('G', 'PG');
SELECT Name FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code WHERE Movies.Rating IN ('G', 'PG');
SELECT m.Title FROM Movies m JOIN MovieTheaters t ON m.Code = t.Movie WHERE t.Name IN ('Odeon', 'Imperial');
SELECT m.Title FROM Movies m JOIN MovieTheaters t ON m.Code = t.Movie WHERE t.Name IN ('Odeon', 'Imperial');
SELECT m.Title FROM Movies m JOIN MovieTheaters t1 ON m.Code = t1.Movie JOIN MovieTheaters t2 ON m.Code = t2.Movie WHERE t1.Name = 'Odeon' AND t2.Name = 'Imperial';
SELECT m.Title FROM Movies m JOIN MovieTheaters t1 ON m.Code = t1.Movie JOIN MovieTheaters t2 ON m.Code = t2.Movie WHERE t1.Name = 'Odeon' AND t2.Name = 'Imperial';
SELECT m.Title FROM Movies m LEFT JOIN MovieTheaters t ON m.Code = t.Movie WHERE t.Name <> 'Odeon' OR t.Name IS NULL;
SELECT m.Title FROM Movies m LEFT JOIN MovieTheaters t ON m.Code = t.Movie WHERE t.Name <> 'Odeon' OR t.Name IS NULL;
SELECT Title FROM Movies ORDER BY Title;
SELECT Title FROM Movies ORDER BY Title;
SELECT Title FROM Movies ORDER BY Rating;
SELECT Title FROM Movies ORDER BY Rating;
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1;
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1;
SELECT m.Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie GROUP BY m.Code, m.Title ORDER BY COUNT(mt.Code) DESC LIMIT 1;
SELECT m.Title FROM Movies m INNER JOIN MovieTheaters mt ON m.Code = mt.Movie GROUP BY m.Code, m.Title ORDER BY COUNT(mt.Code) DESC LIMIT 1;
SELECT Rating, COUNT(*) AS NumMovies FROM Movies GROUP BY Rating;
SELECT Rating, COUNT(*) AS MovieCount FROM Movies GROUP BY Rating;
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL;
SELECT COUNT(*)  FROM Movies WHERE Rating IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT DISTINCT Name FROM MovieTheaters WHERE Movie IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
SELECT Name FROM MovieTheaters WHERE Movie IN (   SELECT Code   FROM Movies   WHERE Rating = 'G' );
SELECT Name FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE m.Rating = 'G';
SELECT Title FROM Movies;
SELECT Title FROM Movies;
SELECT DISTINCT Rating FROM Movies;
SELECT DISTINCT Rating FROM Movies;
SELECT Code, Title, Rating FROM Movies WHERE Rating IS NULL;
SELECT Code, Title  FROM Movies WHERE Rating IS NULL;
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters);
SELECT m.Title FROM Movies m LEFT JOIN MovieTheaters t ON m.Code = t.Movie WHERE t.Movie IS NULL;
SELECT c.Name FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber ORDER BY p.Weight DESC LIMIT 1;
SELECT c.Name FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber ORDER BY p.Weight DESC LIMIT 1;
SELECT SUM(Weight) AS TotalWeight FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT SUM(Weight) AS TotalWeight FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT Position  FROM Employee WHERE Name = 'Amy Wong';
SELECT Position  FROM Employee WHERE Name = 'Amy Wong';
SELECT Name, Position, Salary FROM Employee WHERE Name = 'Turanga Leela';
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela';
SELECT AVG(Salary) AS average_intern_salary FROM Employee WHERE Position = 'Intern';
SELECT AVG(Salary) AS average_intern_salary FROM Employee WHERE Position = 'Intern';
SELECT Position, Level  FROM Employee e JOIN Has_Clearance c ON e.EmployeeID = c.Employee WHERE e.Position = 'Physician';
SELECT Level  FROM Employee e JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee WHERE e.Position = 'Physician'
SELECT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT COUNT(*)  FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT PackageNumber FROM Package WHERE Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT p.PackageNumber, p.Contents, p.Weight, p.Sender, p.Recipient FROM Package p JOIN Client c ON p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber WHERE c.Name = 'Leo Wong';
SELECT DISTINCT PackageNumber FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')    OR Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT COUNT(*)  FROM Package p JOIN Client sender ON p.Sender = sender.AccountNumber JOIN Client recipient ON p.Recipient = recipient.AccountNumber WHERE sender.Name = 'Ogden Wernstrom' AND recipient.Name = 'Leo Wong';
SELECT COUNT(*)  FROM Package p JOIN Client sender ON p.Sender = sender.AccountNumber JOIN Client recipient ON p.Recipient = recipient.AccountNumber WHERE sender.Name = 'Ogden Wernstrom' AND recipient.Name = 'Leo Wong'
SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidberg';
SELECT p.Contents FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'John Zoidberg';
SELECT p.PackageNumber, p.Weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name LIKE '%John%' ORDER BY p.Weight DESC LIMIT 1;
SELECT PackageNumber, Weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name LIKE 'John%' ORDER BY Weight DESC LIMIT 1;
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3;
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3;
SELECT c.Name, COUNT(*) AS num_packages FROM Package p JOIN Client c ON p.Sender = c.AccountNumber GROUP BY c.Name ORDER BY num_packages DESC LIMIT 1;
SELECT c.Name, COUNT(*) AS num_packages FROM Package p JOIN Client c ON p.Sender = c.AccountNumber GROUP BY c.Name ORDER BY num_packages DESC LIMIT 1;
SELECT c.Name, COUNT(p.PackageNumber) AS NumPackages FROM Client c LEFT JOIN Package p ON c.AccountNumber = p.Recipient GROUP BY c.Name ORDER BY NumPackages ASC LIMIT 1;
SELECT c.Name, COUNT(*) AS num_packages FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber GROUP BY c.Name ORDER BY num_packages ASC LIMIT 1;
SELECT c.Name FROM Client c JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.Name HAVING COUNT(*) > 1
SELECT c.Name FROM Client c JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.Name HAVING COUNT(*) > 1;
SELECT Coordinates FROM Planet WHERE Name = 'Mars';
SELECT Coordinates  FROM Planet WHERE Name = 'Mars';
SELECT Name, Coordinates FROM Planet ORDER BY Name;
SELECT Name, Coordinates FROM Planet ORDER BY Name;
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry');
SELECT Shipment.ShipmentID FROM Shipment  JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry';
SELECT Date FROM Shipment;
SELECT Date FROM Shipment;
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars');
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars');
SELECT Shipment.ShipmentID FROM Shipment  JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela';
SELECT Shipment.ShipmentID FROM Shipment  JOIN Employee ON Shipment.Manager = Employee.EmployeeID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Employee.Name = 'Turanga Leela' AND Planet.Name = 'Mars';
SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID JOIN Employee e ON s.Manager = e.EmployeeID WHERE p.Name = 'Mars' OR e.Name = 'Turanga Leela';
SELECT Shipment.ShipmentID FROM Shipment  JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela';
SELECT Planet.Name, COUNT(Shipment.ShipmentID) AS TotalShipments FROM Planet  LEFT JOIN Shipment ON Planet.PlanetID = Shipment.Planet GROUP BY Planet.Name;
SELECT p.Name, COUNT(s.ShipmentID) AS NumShipments FROM Planet p LEFT JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name;
SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT e.Name, COUNT(s.ShipmentID) AS NumShipments FROM Employee e JOIN Shipment s ON e.EmployeeID = s.Manager GROUP BY e.Name;
SELECT e.Name, COUNT(s.ShipmentID) AS NumShipments FROM Employee e LEFT JOIN Shipment s ON e.EmployeeID = s.Manager GROUP BY e.Name;
SELECT SUM(Package.Weight) AS TotalWeight FROM Package  JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars';
SELECT SUM(Package.Weight) AS TotalWeight FROM Package  JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars';
SELECT p.Name, SUM(pa.Weight) AS TotalWeight FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pa ON s.ShipmentID = pa.Shipment GROUP BY p.Name;
SELECT p.Name, SUM(pa.Weight) AS TotalWeight FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pa ON s.ShipmentID = pa.Shipment GROUP BY p.Name;
SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pkg ON s.ShipmentID = pkg.Shipment GROUP BY p.Name HAVING SUM(pkg.Weight) > 30
SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pkg ON s.ShipmentID = pkg.Shipment GROUP BY p.Name HAVING SUM(pkg.Weight) > 30
SELECT Package.PackageNumber FROM Package  JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Client ON Package.Sender = Client.AccountNumber WHERE Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan';
SELECT COUNT(*)  FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE c.Name = 'Zapp Brannigan' AND pl.Name = 'Omicron Persei 8';
SELECT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan';
SELECT COUNT(*)  FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID JOIN Client c ON p.Sender = c.AccountNumber WHERE pl.Name = 'Omicron Persei 8' OR c.Name = 'Zapp Brannigan';
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
SELECT e.Name FROM Employee e WHERE e.EmployeeID NOT IN (   SELECT Employee   FROM Has_Clearance   WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') );
SELECT e.Name FROM Employee e WHERE e.EmployeeID NOT IN (   SELECT Employee   FROM Has_Clearance   WHERE Planet = (     SELECT PlanetID      FROM Planet     WHERE Name = 'Mars'   ) );
SELECT e.Name FROM Employee e JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee JOIN Planet p ON hc.Planet = p.PlanetID WHERE p.Name = 'Omega III';
SELECT e.Name FROM Employee e JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee JOIN Planet p ON hc.Planet = p.PlanetID WHERE p.Name = 'Omega III';
SELECT p.Name FROM Planet p WHERE p.PlanetID IN (   SELECT Planet   FROM Has_Clearance   GROUP BY Planet   HAVING COUNT(DISTINCT Employee) = 1 );
SELECT p.Name FROM Planet p WHERE EXISTS (   SELECT 1    FROM Has_Clearance hc   WHERE hc.Planet = p.PlanetID   GROUP BY hc.Planet   HAVING COUNT(DISTINCT hc.Employee) = 1 )
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000;
SELECT Name  FROM Employee WHERE Salary BETWEEN 5000 AND 10000;
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000;
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000;
SELECT COUNT(*)  FROM Employee e WHERE e.EmployeeID NOT IN (   SELECT Employee    FROM Has_Clearance   WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') );
SELECT COUNT(*)  FROM Employee e WHERE e.EmployeeID NOT IN (   SELECT Employee    FROM Has_Clearance   WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') );
SELECT COUNT(*) FROM game;
SELECT COUNT(*) FROM game;
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC;
SELECT Title, Developers, Units_sold_Millions FROM game ORDER BY Units_sold_Millions DESC;
SELECT AVG(Units_sold_Millions) AS avg_units_sold FROM game WHERE Developers NOT LIKE '%Nintendo%';
SELECT AVG(Units_sold_Millions) AS avg_units_sold FROM game WHERE Developers NOT LIKE '%Nintendo%';
SELECT Platform_name, Market_district FROM platform;
SELECT Platform_name, Market_district FROM platform;
SELECT Platform_ID, Platform_name FROM platform WHERE Download_rank = 1;
SELECT Platform_ID, Platform_name  FROM platform WHERE Download_rank = 1;
SELECT MIN(Rank_of_the_year) AS min_rank, MAX(Rank_of_the_year) AS max_rank FROM player;
SELECT MIN(Rank_of_the_year) AS min_rank, MAX(Rank_of_the_year) AS max_rank FROM player;
SELECT COUNT(*)  FROM player WHERE Rank_of_the_year < 3;
SELECT COUNT(*)  FROM player WHERE Rank_of_the_year <= 3;
SELECT Player_name FROM player ORDER BY Player_name ASC;
SELECT Player_name FROM player ORDER BY Player_name;
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC;
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC;
SELECT p.Player_name, p.Rank_of_the_year FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World';
SELECT p.Player_name, p.Rank_of_the_year FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID JOIN game g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World';
SELECT DISTINCT Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn';
SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College = 'Auburn';
SELECT AVG(g.Units_sold_Millions) AS avg_units_sold FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard';
SELECT AVG(g.Units_sold_Millions) AS avg_units_sold FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.Position = 'Guard';
SELECT Title, Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID;
SELECT Title, Platform_name FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID;
SELECT Title FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA');
SELECT Title FROM game g JOIN platform p ON g.Platform_ID = p.Platform_ID WHERE p.Market_district IN ('Asia', 'USA');
SELECT Franchise, COUNT(*) AS Number_of_Games FROM game GROUP BY Franchise;
SELECT Franchise, COUNT(*) AS num_games FROM game GROUP BY Franchise;
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2;
SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*) >= 2;
SELECT player.Player_name FROM player LEFT JOIN game_player ON player.Player_ID = game_player.Player_ID WHERE game_player.Game_ID IS NULL
SELECT Player_name FROM player WHERE Player_ID NOT IN (   SELECT Player_ID   FROM game_player );
SELECT g.Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College IN ('Oklahoma', 'Auburn') GROUP BY g.Title HAVING COUNT(DISTINCT p.College) = 2;
SELECT Title FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE p.College IN ('Oklahoma', 'Auburn');
SELECT DISTINCT Franchise FROM game;
SELECT DISTINCT Franchise FROM game;
SELECT Title FROM game g WHERE NOT EXISTS (   SELECT 1   FROM game_player gp   JOIN player p ON gp.Player_ID = p.Player_ID   WHERE gp.Game_ID = g.Game_ID     AND p.Position = 'Guard' );
SELECT Title FROM game g WHERE NOT EXISTS (   SELECT 1   FROM game_player gp   JOIN player p ON gp.Player_ID = p.Player_ID   WHERE gp.Game_ID = g.Game_ID     AND p.Position = 'Guard' );
SELECT Name FROM press ORDER BY Year_Profits_billion DESC;
SELECT Name FROM press ORDER BY Year_Profits_billion DESC;
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1;
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1;
SELECT AVG(Year_Profits_billion) AS avg_year_profit, MAX(Year_Profits_billion) AS max_year_profit FROM press;
SELECT Name, AVG(Year_Profits_billion) AS avg_yearly_profit, MAX(Year_Profits_billion) AS max_yearly_profit FROM press GROUP BY Name;
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press);
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1;
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)    OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);
SELECT Name FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press)    OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);
SELECT COUNT(*) FROM author WHERE Age < 30;
SELECT COUNT(*) FROM author WHERE Age < 30;
SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender;
SELECT Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender;
SELECT Gender, COUNT(*) AS num_authors_over_30 FROM author WHERE Age > 30 GROUP BY Gender;
SELECT Gender, COUNT(*) AS num_authors FROM author WHERE Age > 30 GROUP BY Gender;
SELECT Title FROM book ORDER BY Release_date DESC;
SELECT Title FROM book ORDER BY Release_date DESC;
SELECT Book_Series, COUNT(*) AS num_books FROM book GROUP BY Book_Series;
SELECT Book_Series, COUNT(*) AS book_count FROM book GROUP BY Book_Series;
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;
SELECT DISTINCT Book_Series FROM book WHERE Book_Series IN (   SELECT Book_Series   FROM book   WHERE Sale_Amount > 1000 ) AND Book_Series IN (   SELECT Book_Series   FROM book   WHERE Sale_Amount < 500 );
SELECT Book_Series FROM book GROUP BY Book_Series HAVING MAX(Sale_Amount) > 1000 AND MIN(Sale_Amount) < 500;
SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series IN ('MM', 'LT') GROUP BY a.Name HAVING COUNT(DISTINCT b.Book_Series) = 2;
SELECT Name FROM author WHERE Author_ID IN (   SELECT Author_ID   FROM book   WHERE Book_Series IN ('MM', 'LT')   GROUP BY Author_ID   HAVING COUNT(DISTINCT Book_Series) = 2 );
SELECT Name, Age FROM author WHERE Author_ID NOT IN (   SELECT DISTINCT Author_ID   FROM book );
SELECT Name FROM author WHERE Author_ID NOT IN (   SELECT DISTINCT Author_ID   FROM book );
SELECT Name FROM author WHERE Author_ID IN (   SELECT Author_ID   FROM book   GROUP BY Author_ID   HAVING COUNT(*) > 1 );
SELECT Name FROM author WHERE Author_ID IN (   SELECT Author_ID   FROM book   GROUP BY Author_ID   HAVING COUNT(*) > 1 );
SELECT b.Title, a.Name AS Author_Name, p.Name AS Publisher_Name FROM book b JOIN author a ON b.Author_ID = a.Author_ID JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3;
SELECT b.Title, a.Name AS Author_Name, p.Name AS Press_Name FROM book b JOIN author a ON b.Author_ID = a.Author_ID JOIN press p ON b.Press_ID = p.Press_ID ORDER BY b.Sale_Amount DESC LIMIT 3;
SELECT p.Name, SUM(b.Sale_Amount) AS Total_Sale_Amount FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name;
SELECT p.Name, SUM(b.Sale_Amount) AS Total_Sale_Amount FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name;
SELECT p.Name, COUNT(*) AS num_books_over_1000 FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name;
SELECT p.Name, COUNT(*) AS num_books_above_1000 FROM press p JOIN book b ON p.Press_ID = b.Press_ID WHERE b.Sale_Amount > 1000 GROUP BY p.Name;
SELECT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID ORDER BY b.Sale_Amount DESC LIMIT 1;
SELECT Name FROM author WHERE Author_ID = (   SELECT Author_ID   FROM book   ORDER BY Sale_Amount DESC   LIMIT 1 );
SELECT a.Name, a.Gender FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name, a.Gender ORDER BY COUNT(b.Book_ID) DESC LIMIT 1;
SELECT a.Name, a.Gender FROM author a INNER JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Author_ID, a.Name, a.Gender ORDER BY COUNT(b.Book_ID) DESC LIMIT 1;
SELECT Name FROM author WHERE Author_ID NOT IN (   SELECT Author_ID   FROM book   WHERE Press_ID = (     SELECT Press_ID     FROM press     WHERE Name = 'Accor'   ) );
SELECT Name FROM author WHERE Author_ID NOT IN (   SELECT Author_ID   FROM book   WHERE Press_ID = (     SELECT Press_ID      FROM press     WHERE Name = 'Accor'   ) );
SELECT p.Name, p.Year_Profits_billion FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID, p.Name, p.Year_Profits_billion HAVING COUNT(b.Book_ID) > 2;
SELECT p.Name, p.Year_Profits_billion FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID, p.Name, p.Year_Profits_billion HAVING COUNT(b.Book_ID) > 2;
SELECT COUNT(*) FROM Authors;
SELECT author_name FROM Authors;
SELECT author_name, other_details FROM Authors;
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik';
SELECT COUNT(*) FROM Documents;
SELECT author_name FROM Documents WHERE document_id = 4;
SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil';
SELECT COUNT(*)  FROM Documents WHERE author_name = 'Era Kerluke';
SELECT document_name, document_description FROM Documents;
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings';
SELECT a.author_name, a.other_details FROM Authors a JOIN Documents d ON a.author_name = d.author_name WHERE d.document_name = 'Travel to China';
SELECT a.author_name, COUNT(d.document_id) AS num_documents FROM Authors a LEFT JOIN Documents d ON a.author_name = d.author_name GROUP BY a.author_name;
SELECT author_name FROM Authors WHERE author_name = (   SELECT author_name   FROM Documents   GROUP BY author_name   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT author_name FROM Authors a JOIN Documents d ON a.author_name = d.author_name GROUP BY author_name HAVING COUNT(document_id) >= 2
SELECT COUNT(*) FROM Business_Processes;
SELECT next_process_id, process_name, process_description  FROM Business_Processes WHERE process_id = 9;
SELECT p2.process_name FROM Business_Processes p1 JOIN Business_Processes p2 ON p1.next_process_id = p2.process_id WHERE p1.process_id = 9;
SELECT COUNT(*) AS num_process_outcomes FROM Process_Outcomes;
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes;
SELECT process_outcome_description  FROM Process_Outcomes WHERE process_outcome_code = 'working';
SELECT COUNT(*) AS num_process_status FROM Process_Status;
SELECT process_status_code, process_status_description FROM Process_Status;
SELECT process_status_description  FROM Process_Status WHERE process_status_code = 'ct';
SELECT COUNT(*) FROM Staff;
SELECT staff_id, staff_details  FROM Staff;
SELECT staff_details  FROM Staff WHERE staff_id = 100;
SELECT COUNT(*) AS number_of_staff_roles FROM Ref_Staff_Roles;
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles;
SELECT staff_role_description  FROM Ref_Staff_Roles WHERE staff_role_code = 'HR';
SELECT COUNT(DISTINCT document_id)  FROM Documents_Processes;
SELECT DISTINCT process_id FROM Documents_Processes;
SELECT d.document_id FROM Documents d LEFT JOIN Documents_Processes dp ON d.document_id = dp.document_id WHERE dp.document_id IS NULL
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (   SELECT process_id   FROM Documents_Processes );
SELECT po.process_outcome_description, ps.process_status_description FROM Documents_Processes dp JOIN Process_Outcomes po ON dp.process_outcome_code = po.process_outcome_code JOIN Process_Status ps ON dp.process_status_code = ps.process_status_code WHERE dp.document_id = 0;
SELECT bp.process_name FROM Documents d JOIN Documents_Processes dp ON d.document_id = dp.document_id JOIN Business_Processes bp ON dp.process_id = bp.process_id WHERE d.document_name = 'Travel to Brazil';
SELECT process_id, COUNT(document_id) AS num_documents FROM Documents_Processes GROUP BY process_id;
SELECT COUNT(*) AS num_staff FROM Staff_in_Processes  WHERE document_id = 0 AND process_id = 9;
SELECT staff_id, COUNT(*) AS num_document_processes FROM Staff_in_Processes GROUP BY staff_id;
SELECT sr.staff_role_code, COUNT(*) AS num_document_processes FROM Staff_in_Processes sip JOIN Ref_Staff_Roles sr ON sip.staff_role_code = sr.staff_role_code GROUP BY sr.staff_role_code;
SELECT COUNT(DISTINCT staff_role_code)  FROM Staff_in_Processes WHERE staff_id = 3;
SELECT COUNT(*) FROM Agencies;
SELECT COUNT(*) FROM Agencies;
SELECT agency_id, agency_details FROM Agencies;
SELECT agency_id, agency_details FROM Agencies;
SELECT COUNT(*) FROM Clients;
SELECT COUNT(*) FROM Clients;
SELECT client_id, client_details FROM Clients;
SELECT client_id, client_details FROM Clients;
SELECT a.agency_id, COUNT(c.client_id) AS num_clients FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id;
SELECT a.agency_id, COUNT(c.client_id) AS num_clients FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(c.client_id) DESC LIMIT 1;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(c.client_id) DESC LIMIT 1;
SELECT a.agency_id, a.agency_details FROM Agencies a WHERE (SELECT COUNT(*) FROM Clients c WHERE c.agency_id = a.agency_id) >= 2;
SELECT a.agency_id, a.agency_details FROM Agencies a WHERE a.agency_id IN (   SELECT agency_id   FROM Clients   GROUP BY agency_id   HAVING COUNT(*) >= 2 );
SELECT a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id WHERE c.client_details = 'Mac';
SELECT a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id WHERE c.client_details = 'Mac';
SELECT c.client_id, c.sic_code, c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT sic_code, COUNT(*) AS num_clients FROM Clients GROUP BY sic_code;
SELECT sic_code, COUNT(*) AS num_clients FROM Clients GROUP BY sic_code;
SELECT client_id, client_details  FROM Clients WHERE sic_code = 'Bad';
SELECT c.client_details FROM Clients c WHERE c.sic_code = 'Bad';
SELECT a.agency_id, a.agency_details FROM Agencies a WHERE EXISTS (   SELECT 1    FROM Clients c   WHERE c.agency_id = a.agency_id );
SELECT a.agency_id, a.agency_details FROM Agencies a WHERE EXISTS (   SELECT 1    FROM Clients c   WHERE c.agency_id = a.agency_id );
SELECT a.agency_id FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id WHERE c.client_id IS NULL
SELECT a.agency_id FROM Agencies a LEFT JOIN Clients c ON a.agency_id = c.agency_id WHERE c.client_id IS NULL;
SELECT COUNT(*) FROM Invoices;
SELECT COUNT(*) FROM Invoices;
SELECT invoices.invoice_id, invoices.invoice_status, invoices.invoice_details FROM invoices INNER JOIN clients ON invoices.client_id = clients.client_id;
SELECT invoice_id, invoice_status, invoice_details FROM Invoices;
SELECT c.client_id, COUNT(i.invoice_id) AS invoice_count FROM Clients c LEFT JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id;
SELECT client_id, COUNT(*) AS invoice_count FROM Invoices GROUP BY client_id;
SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id, c.client_details ORDER BY COUNT(i.invoice_id) DESC LIMIT 1;
SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id, c.client_details ORDER BY COUNT(i.invoice_id) DESC LIMIT 1;
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2;
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(*) >= 2;
SELECT invoice_status, COUNT(*) AS num_invoices FROM Invoices GROUP BY invoice_status;
SELECT invoice_status, COUNT(*) AS invoice_count FROM Invoices GROUP BY invoice_status;
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1;
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1;
SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT i.invoice_status, i.invoice_details, i.client_id, c.client_details, c.agency_id, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT meeting_type, other_details FROM Meetings;
SELECT meeting_type, other_details FROM Meetings;
SELECT meeting_outcome, purpose_of_meeting FROM Meetings;
SELECT meeting_outcome, purpose_of_meeting FROM Meetings;
SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working';
SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_status = 'Working';
SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL;
SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL;
SELECT COUNT(*) FROM Payments;
SELECT COUNT(*) FROM Payments;
SELECT payment_id, invoice_id, payment_details FROM Payments;
SELECT payment_id, invoice_id, payment_details FROM Payments;
SELECT invoice_id, invoice_status FROM Invoices;
SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id;
SELECT i.invoice_id, COUNT(p.payment_id) AS num_payments FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id;
SELECT invoice_id, COUNT(*) AS payment_count FROM Payments GROUP BY invoice_id;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status, i.invoice_details ORDER BY COUNT(p.payment_id) DESC LIMIT 1;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status, i.invoice_details HAVING COUNT(p.payment_id) = (   SELECT MAX(payment_count)   FROM (     SELECT COUNT(payment_id) AS payment_count     FROM Payments     GROUP BY invoice_id   ) t );
SELECT COUNT(*) FROM Staff;
SELECT COUNT(*) FROM Staff;
SELECT a.agency_id, COUNT(s.staff_id) AS num_staff FROM Agencies a LEFT JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id;
SELECT a.agency_id, COUNT(s.staff_id) AS num_staff FROM Agencies a LEFT JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(s.staff_id) DESC LIMIT 1;
SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Staff s ON a.agency_id = s.agency_id GROUP BY a.agency_id, a.agency_details ORDER BY COUNT(s.staff_id) DESC LIMIT 1;
SELECT meeting_outcome, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_outcome;
SELECT meeting_outcome, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_outcome;
SELECT client_id, COUNT(*) AS num_meetings FROM Meetings GROUP BY client_id;
SELECT client_id, COUNT(*) AS num_meetings FROM Meetings GROUP BY client_id;
SELECT c.client_id, m.meeting_type, COUNT(*) AS num_meetings FROM Clients c JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id, m.meeting_type;
SELECT meeting_type, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_type;
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id;
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id;
SELECT m.meeting_id, COUNT(s.staff_id) AS num_staff FROM Meetings m LEFT JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id GROUP BY m.meeting_id;
SELECT meeting_id, COUNT(staff_id) AS num_staff FROM Staff_in_Meetings GROUP BY meeting_id;
SELECT staff_id, COUNT(*) AS num_meetings FROM Staff_in_Meetings GROUP BY staff_id ORDER BY num_meetings ASC LIMIT 1;
SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(DISTINCT staff_id) AS num_staff_attended_meeting FROM Staff_in_Meetings;
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings;
SELECT COUNT(*)  FROM Staff s WHERE NOT EXISTS (   SELECT 1    FROM Staff_in_Meetings sim   WHERE s.staff_id = sim.staff_id );
SELECT COUNT(*)  FROM Staff s WHERE NOT EXISTS (   SELECT 1    FROM Staff_in_Meetings sim   WHERE s.staff_id = sim.staff_id );
SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id UNION SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id;
SELECT c.client_id, c.client_details FROM Clients c JOIN Invoices i ON c.client_id = i.client_id UNION SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id;
SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sim.meeting_id) >= 1;
SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sim ON s.staff_id = sim.staff_id WHERE s.staff_details LIKE '%s%'
SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id, c.sic_code, c.agency_id HAVING COUNT(m.meeting_id) = 1;
SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id JOIN Meetings m ON c.client_id = m.client_id GROUP BY c.client_id, c.sic_code, c.agency_id HAVING COUNT(m.meeting_id) = 1;
SELECT m.start_date_time, m.end_date_time, c.client_details, s.staff_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sim ON m.meeting_id = sim.meeting_id JOIN Staff s ON sim.staff_id = s.staff_id;
SELECT     m.start_date_time,     m.end_date_time,     c.client_details,     s.staff_details FROM     Meetings m     JOIN Clients c ON m.client_id = c.client_id     JOIN Staff_in_Meetings sim ON m.meeting_id = sim.meeting_id     JOIN Staff s ON sim.staff_id = s.staff_id;
