SELECT COUNT(*) FROM club
SELECT COUNT(*) FROM club
SELECT Name FROM club ORDER BY Name ASC
SELECT Name FROM club ORDER BY Name
SELECT Manager, Captain FROM club
SELECT Manager, Captain FROM club
SELECT Name FROM club WHERE Manufacturer != 'Nike'
SELECT Name FROM club WHERE Manufacturer != 'Nike'
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1
SELECT Country FROM player WHERE Earnings = (SELECT max(Earnings) FROM player WHERE Wins_count > 2) AND Wins_count > 2
SELECT player.Name ,  club.Name FROM player JOIN club ON player.Club_ID  =  club.Club_ID
SELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count > 2
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Wins_count > 2
SELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Manager = 'Sam Allardyce'
SELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Manager = 'Sam Allardyce'
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Name ORDER BY avg(T2.Earnings) DESC
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Name ORDER BY avg(T2.Earnings) DESC
SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer
SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY count(*) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY count(*) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING count(*) > 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING count(*) > 1
SELECT Country FROM player GROUP BY Country HAVING count(*) > 1
SELECT Country FROM player GROUP BY Country HAVING count(*) > 1
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000
SELECT COUNT(DISTINCT Country) FROM player
SELECT COUNT(DISTINCT Country) FROM player
SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')
SELECT sum(Earnings) FROM player WHERE Country  =  'Australia' OR Country  =  'Zimbabwe'
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 WHERE T1.customer_id IN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 2) AND T1.customer_id IN (SELECT T1.customer_id FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.customer_id HAVING COUNT(T2.order_item_id) >= 3)
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name  FROM Customers AS T1  WHERE T1.customer_id IN (     SELECT customer_id      FROM Orders      GROUP BY customer_id      HAVING COUNT(*) > 2 )  AND T1.customer_id IN (     SELECT T3.customer_id      FROM Orders AS T3      JOIN Order_Items AS T4      ON T3.order_id = T4.order_id      GROUP BY T3.customer_id      HAVING COUNT(T4.order_item_id) >= 3 )
SELECT T2.order_id, T2.order_status_code, count(T1.product_id)  FROM Order_Items AS T1  JOIN Orders AS T2  ON T1.order_id = T2.order_id  GROUP BY T2.order_id, T2.order_status_code
SELECT count(T1.product_id) ,  T2.order_status_code ,  T2.order_id  FROM Order_Items AS T1  JOIN Orders AS T2  ON T1.order_id  =  T2.order_id  GROUP BY T2.order_id, T2.order_status_code
SELECT date_order_placed FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING count(*) > 1) OR order_id IN (SELECT order_id FROM Orders ORDER BY date_order_placed ASC LIMIT 1)
SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1 UNION SELECT min(date_order_placed) FROM Orders
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)
SELECT T1.product_id, T1.product_name, T1.product_price, T1.product_color FROM Products AS T1 WHERE T1.product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*) >= 2)
SELECT T1.product_id, T1.product_name, T1.product_price, T1.product_color FROM Products AS T1 WHERE T1.product_id NOT IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*) >= 2)
SELECT T1.order_id, T2.date_order_placed  FROM Order_Items AS T1  JOIN Orders AS T2  ON T1.order_id = T2.order_id  GROUP BY T1.order_id, T2.date_order_placed  HAVING COUNT(T1.product_id) >= 2
SELECT T1.order_id ,  T1.date_order_placed  FROM Orders AS T1  JOIN Order_Items AS T2  ON T1.order_id  =  T2.order_id  GROUP BY T1.order_id  HAVING count(*)  >=  2
SELECT T1.product_id, T2.product_name, T2.product_price  FROM Order_Items AS T1  JOIN Products AS T2  ON T1.product_id = T2.product_id  GROUP BY T1.product_id, T2.product_name, T2.product_price  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT T1.product_id, T1.product_name, T1.product_price  FROM Products AS T1  WHERE T1.product_id IN (     SELECT product_id      FROM Order_Items      GROUP BY product_id      ORDER BY COUNT(*) DESC )
SELECT T1.order_id, sum(T3.product_price) FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id JOIN Products AS T3 ON T2.product_id = T3.product_id GROUP BY T1.order_id ORDER BY sum(T3.product_price) ASC LIMIT 1
SELECT T1.order_id ,  sum(T2.product_price) as total_cost  FROM Order_Items AS T1  JOIN Products AS T2  ON T1.product_id  =  T2.product_id  GROUP BY T1.order_id  ORDER BY total_cost ASC  LIMIT 1
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY count(customer_id) DESC LIMIT 1
SELECT COUNT(T1.product_id), T2.gender_code FROM Order_Items AS T1 JOIN Orders AS T3 ON T1.order_id = T3.order_id JOIN Customers AS T2 ON T3.customer_id = T2.customer_id GROUP BY T2.gender_code
SELECT COUNT(T1.product_id), T2.gender_code FROM Order_Items AS T1 JOIN Orders AS T3 ON T1.order_id = T3.order_id JOIN Customers AS T2 ON T3.customer_id = T2.customer_id GROUP BY T2.gender_code
SELECT count(T1.order_id) ,  T2.gender_code FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.gender_code
SELECT count(T1.order_id) ,  T2.gender_code FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.gender_code
SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id
SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id
SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number
SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date  FROM Invoices AS T1  JOIN Shipments AS T2  ON T1.invoice_number  =  T2.invoice_number
SELECT T1.product_name, T4.shipment_date FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id = T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id = T4.shipment_id
SELECT T1.product_name, T4.shipment_date FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id = T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id = T4.shipment_id
SELECT T1.order_item_status_code, T3.shipment_tracking_number FROM Order_Items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id = T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id = T3.shipment_id
SELECT T1.order_item_status_code ,  T3.shipment_tracking_number  FROM Order_Items AS T1  JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id  JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id
SELECT T1.product_name ,  T1.product_color  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id  =  T2.product_id  JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id
SELECT DISTINCT T1.product_name, T1.product_color FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id = T3.order_item_id
SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'female'
SELECT DISTINCT T1.product_name, T1.product_price, T1.product_description  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  JOIN Orders AS T3 ON T2.order_id = T3.order_id  JOIN Customers AS T4 ON T3.customer_id = T4.customer_id  WHERE T4.gender_code = 'female'
SELECT invoice_status_code FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Orders WHERE order_id NOT IN (SELECT order_id FROM Shipments))
SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN (SELECT invoice_number FROM Shipments)
SELECT T3.order_id ,  T3.date_order_placed ,  sum(T2.product_price)  FROM Order_Items AS T1  JOIN Products AS T2 ON T1.product_id  =  T2.product_id  JOIN Orders AS T3 ON T1.order_id  =  T3.order_id  GROUP BY T3.order_id, T3.date_order_placed
SELECT Orders.order_id, Orders.date_order_placed, sum(Invoices.invoice_amount)  FROM Orders  JOIN Shipments ON Orders.order_id = Shipments.order_id  JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number  GROUP BY Orders.order_id, Orders.date_order_placed
SELECT count(DISTINCT T1.customer_id) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id
SELECT COUNT(DISTINCT customer_id) FROM Orders
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT avg(product_price) FROM Products)
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT avg(product_price) FROM Products)
SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)
SELECT order_status_code, date_order_placed FROM Orders
SELECT order_status_code, date_order_placed FROM Orders
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'United States'
SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_Items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id
SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_Items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id
SELECT COUNT(*) FROM Shipment_Items
SELECT count(order_item_id) FROM Shipment_Items
SELECT AVG(product_price) FROM Products
SELECT AVG(product_price) FROM Products
SELECT AVG(T1.product_price) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id
SELECT AVG(T1.product_price) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id
SELECT email_address, town_city, county FROM Customers WHERE gender_code = (SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY COUNT(*) ASC LIMIT 1)
SELECT DISTINCT email_address, town_city, county  FROM Customers  WHERE gender_code IN (     SELECT gender_code      FROM Customers      WHERE customer_id IN (         SELECT customer_id          FROM Orders          GROUP BY customer_id          HAVING COUNT(*) = (             SELECT COUNT(*)              FROM Orders              GROUP BY customer_id              ORDER BY COUNT(*) ASC              LIMIT 1         )     ) )
SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING count(*) >= 2)
SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING count(*) >= 2)
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) ASC LIMIT 1
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) ASC LIMIT 1
SELECT T1.product_id, T1.product_description FROM Products AS T1 WHERE T1.product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3)
SELECT T1.product_id, T1.product_description  FROM Products AS T1  WHERE T1.product_id IN (     SELECT product_id      FROM Order_Items      GROUP BY product_id      HAVING COUNT(*) > 3)
SELECT T1.invoice_date, T1.invoice_number  FROM Invoices AS T1  JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number  GROUP BY T1.invoice_number  HAVING count(*) >= 2
SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2
SELECT shipment_tracking_number, shipment_date FROM Shipments
SELECT shipment_tracking_number, shipment_date FROM Shipments
SELECT product_color, product_description, product_size FROM Products WHERE product_price < (SELECT max(product_price) FROM Products)
SELECT product_color , product_description , product_size FROM Products WHERE product_price < (SELECT max(product_price) FROM Products)
SELECT Name FROM director WHERE Age > (SELECT avg(Age) FROM director)
SELECT Name FROM director ORDER BY Age DESC LIMIT 1
SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%'
SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel
SELECT Title FROM program ORDER BY Start_Year DESC
SELECT T2.Name FROM program AS T1 JOIN director AS T2 ON T1.Director_ID  =  T2.Director_ID GROUP BY T1.Director_ID, T2.Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name ,  T1.Age FROM director AS T1 JOIN program AS T2 ON T1.Director_ID  =  T2.Director_ID GROUP BY T1.Name, T1.Age HAVING count(*)  =  (SELECT max(counted) FROM (SELECT count(*) AS counted FROM program GROUP BY Director_ID) AS subquery)
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1
SELECT T1.Name ,  T1.Internet FROM channel AS T1 JOIN program AS T2 ON T1.Channel_ID  =  T2.Channel_ID GROUP BY T1.Channel_ID HAVING count(*)  >  1
SELECT count(*) ,  T2.Name FROM program AS T1 JOIN channel AS T2 ON T1.Channel_ID  =  T2.Channel_ID GROUP BY T2.Name
SELECT COUNT(*) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program)
SELECT T1.Name FROM director AS T1 JOIN program AS T2 ON T1.Director_ID = T2.Director_ID WHERE T2.Title = 'Dracula'
SELECT T1.Name ,  T1.Internet FROM channel AS T1 WHERE T1.Channel_ID = (SELECT Channel_ID FROM director_admin GROUP BY Channel_ID ORDER BY COUNT(Director_ID) DESC LIMIT 1)
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60
SELECT T1.Name FROM channel AS T1 JOIN director_admin AS T2 ON T1.Channel_ID  =  T2.Channel_ID JOIN director AS T3 ON T2.Director_ID  =  T3.Director_ID WHERE T3.Age  <  40 INTERSECT SELECT T1.Name FROM channel AS T1 JOIN director_admin AS T2 ON T1.Channel_ID  =  T2.Channel_ID JOIN director AS T3 ON T2.Director_ID  =  T3.Director_ID WHERE T3.Age  >  60
SELECT Channel_ID, Name FROM channel WHERE Channel_ID NOT IN (SELECT T1.Channel_ID FROM channel AS T1 JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T3.Name = 'Hank Baskett')
SELECT COUNT(*) FROM radio
SELECT Transmitter FROM radio ORDER BY ERP_kW ASC
SELECT tv_show_name, Original_Airdate FROM tv_show
SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC'
SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30
SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1
SELECT AVG(ERP_kW) FROM radio
SELECT Affiliation ,  COUNT (*) FROM city_channel GROUP BY Affiliation
SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY count(*) DESC LIMIT 1
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING count(*) > 3
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC
SELECT T1.Transmitter ,  T3.City  FROM radio AS T1  JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID  JOIN city_channel AS T3 ON T2.City_channel_ID  =  T3.ID
SELECT T1.Transmitter, T2.Station_name  FROM radio AS T1  JOIN city_channel_radio AS T3 ON T1.Radio_ID = T3.Radio_ID  JOIN city_channel AS T2 ON T3.City_channel_ID = T2.ID  ORDER BY T1.ERP_kW DESC
SELECT T1.Transmitter ,  count(T2.City_channel_ID)  FROM radio AS T1  JOIN city_channel_radio AS T2  ON T1.Radio_ID  =  T2.Radio_ID  GROUP BY T1.Transmitter
SELECT DISTINCT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1
SELECT Name FROM driver WHERE Citizenship = 'United States'
SELECT Name FROM driver WHERE Citizenship = 'United States'
SELECT Driver_ID, COUNT(Vehicle_ID) AS vehicle_count FROM vehicle_driver GROUP BY Driver_ID ORDER BY vehicle_count DESC LIMIT 1
SELECT Driver_ID, COUNT(Vehicle_ID)  FROM vehicle_driver  GROUP BY Driver_ID  ORDER BY COUNT(Vehicle_ID) DESC  LIMIT 1
SELECT max(Power) ,  avg(Power) FROM vehicle WHERE Builder  =  'Zhuzhou'
SELECT max(Power) ,  avg(Power) FROM vehicle WHERE Builder  =  'Zhuzhou'
SELECT Vehicle_ID, COUNT(*) as count FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY count ASC LIMIT 1
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY count(*) ASC LIMIT 1
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = 1996
SELECT Build_Year, Model, Builder FROM vehicle
SELECT Build_Year, Model, Builder FROM vehicle
SELECT count(DISTINCT T1.Driver_ID)  FROM vehicle_driver AS T1  JOIN vehicle AS T2  ON T1.Vehicle_ID = T2.Vehicle_ID  WHERE T2.Build_Year = 2012
SELECT count(DISTINCT T1.Driver_ID) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Build_Year = 2012
SELECT COUNT(DISTINCT driver.Driver_ID)  FROM driver  WHERE Racing_Series = 'NASCAR'
SELECT COUNT(DISTINCT driver.Driver_ID)  FROM driver  WHERE Racing_Series = 'NASCAR'
SELECT AVG(Top_Speed) FROM vehicle
SELECT AVG(Top_Speed) FROM vehicle
SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000
SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150
SELECT Model FROM vehicle WHERE Total_Production > 100 OR Top_Speed > 150
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID, T1.Model HAVING count(T2.Driver_ID) = 2 UNION SELECT Vehicle_ID, Model FROM vehicle WHERE Builder = 'Ziyang'
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T2.Vehicle_ID HAVING count(T2.Driver_ID) = 2 UNION SELECT Vehicle_ID, Model FROM vehicle WHERE Builder = 'Ziyang'
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID, T1.Model HAVING COUNT(*) > 2 UNION SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Name = 'Jeff Gordon'
SELECT T1.Vehicle_ID, T1.Model FROM vehicle AS T1 WHERE T1.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2) OR T1.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Name = 'Jeff Gordon')
SELECT count(*) FROM vehicle WHERE Top_Speed = (SELECT max(Top_Speed) FROM vehicle)
SELECT count(Vehicle_ID) FROM vehicle WHERE Top_Speed  =  (SELECT max(Top_Speed) FROM vehicle)
SELECT Name FROM driver ORDER BY Name ASC
SELECT Name FROM driver ORDER BY Name
SELECT Racing_Series, COUNT(DISTINCT Driver_ID)  FROM driver  GROUP BY Racing_Series
SELECT Racing_Series, COUNT(DISTINCT driver.Driver_ID)  FROM driver  JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID  GROUP BY Racing_Series
SELECT T1.Name, T1.Citizenship  FROM driver AS T1  JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID  JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID  WHERE T3.Model = 'DJ1'
SELECT T1.Name, T1.Citizenship  FROM driver AS T1  JOIN vehicle_driver AS T2  ON T1.Driver_ID = T2.Driver_ID  JOIN vehicle AS T3  ON T2.Vehicle_ID = T3.Vehicle_ID  WHERE T3.Model = 'DJ1'
SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT COUNT(*) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT COUNT(*) FROM Exams
SELECT COUNT(Exam_ID) FROM Exams
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code != 'Database'
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database'
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'
SELECT COUNT(DISTINCT Comments) FROM Student_Answers
SELECT COUNT(DISTINCT Comments) FROM Student_Answers
SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY count(*) DESC
SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC
SELECT T1.First_Name ,  T2.Date_of_Answer  FROM Students AS T1  JOIN Student_Answers AS T2  ON T1.Student_ID  =  T2.Student_ID
SELECT T1.First_Name, T2.Date_of_Answer  FROM Students AS T1  JOIN Student_Answers AS T2  ON T1.Student_ID = T2.Student_ID
SELECT T1.Email_Adress, T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY T2.Date_of_Answer DESC
SELECT T1.Email_Adress, T2.Date_of_Answer  FROM Students AS T1  JOIN Student_Answers AS T2  ON T1.Student_ID = T2.Student_ID  ORDER BY T2.Date_of_Answer DESC
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) ASC LIMIT 1
SELECT First_Name FROM Students WHERE Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2)
SELECT T1.First_Name FROM Students AS T1 WHERE T1.Student_ID IN (SELECT Student_ID FROM Student_Answers GROUP BY Student_ID HAVING COUNT(*) >= 2)
SELECT Valid_Answer_Text  FROM Valid_Answers  GROUP BY Valid_Answer_Text  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT T1.Valid_Answer_Text  FROM Valid_Answers AS T1  JOIN Student_Assessments AS T2  ON T1.Valid_Answer_ID = T2.Valid_Answer_ID  GROUP BY T1.Valid_Answer_Text  ORDER BY count(T2.Valid_Answer_ID) DESC  LIMIT 1
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'
SELECT Gender_MFU ,  COUNT(Student_ID) FROM Students GROUP BY Gender_MFU
SELECT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)
SELECT Student_Answer_Text  FROM Student_Answers  WHERE Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal')  AND Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent')
SELECT Student_Answer_Text  FROM Student_Answers  WHERE Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal')  AND Student_Answer_Text IN (SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent')
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*) >= 3
SELECT * FROM Students
SELECT * FROM Students
SELECT COUNT(*) FROM Addresses
SELECT COUNT(*) FROM Addresses
SELECT address_id, address_details FROM Addresses
SELECT address_id, address_details FROM Addresses
SELECT COUNT(*) FROM Products
SELECT COUNT(*) FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_price FROM Products WHERE product_name = 'Monitor'
SELECT product_price FROM Products WHERE product_name = 'Monitor'
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'
SELECT AVG(product_price) FROM Products WHERE product_name = 'Clothes'
SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'hardware'
SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'Hardware'
SELECT product_name FROM Products WHERE product_price > (SELECT avg(product_price) FROM Products)
SELECT product_name FROM Products WHERE product_price > (SELECT avg(product_price) FROM Products)
SELECT product_name FROM Products WHERE product_price > (SELECT avg(product_price) FROM Products WHERE product_type_code = 'hardware') AND product_type_code = 'hardware'
SELECT product_name FROM Products WHERE product_price > (SELECT avg(product_price) FROM Products WHERE product_type_code = 'Hardware') AND product_type_code = 'Hardware'
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name FROM Products WHERE product_type_code = 'hardware' ORDER BY product_price ASC
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC
SELECT product_type_code, COUNT(product_id) FROM Products GROUP BY product_type_code
SELECT COUNT(product_id), product_type_code FROM Products GROUP BY product_type_code
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code
SELECT AVG(product_price), product_type_code FROM Products GROUP BY product_type_code
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1
SELECT product_type_code  FROM Products  JOIN Order_Items ON Products.product_id = Order_Items.product_id  GROUP BY product_type_code  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT COUNT(*) FROM Customers
SELECT COUNT(*) FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'
SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code
SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1
SELECT customer_name FROM Customers WHERE payment_method_code = (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)
SELECT customer_name FROM Customers WHERE payment_method_code IN (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(*) ASC LIMIT 1)
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'
SELECT DISTINCT payment_method_code FROM Customers
SELECT DISTINCT payment_method_code FROM Customers
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(product_id) ASC LIMIT 1
SELECT T1.product_type_code  FROM Products AS T1  JOIN Order_Items AS T2  ON T1.product_id  =  T2.product_id  GROUP BY T1.product_type_code  ORDER BY count(T2.product_id) ASC  LIMIT 1
SELECT COUNT(*) FROM Customer_Orders
SELECT COUNT(*) FROM Customer_Orders
SELECT T1.order_id ,  T1.order_date ,  T1.order_status_code  FROM Customer_Orders AS T1  JOIN Customers AS T2  ON T1.customer_id  =  T2.customer_id  WHERE T2.customer_name  =  'Jeromy'
SELECT T1.order_id ,  T1.order_date ,  T1.order_status_code FROM Customer_Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  'Jeromy'
SELECT T1.customer_name, T1.customer_id, count(T2.order_id)  FROM Customers AS T1  JOIN Customer_Orders AS T2  ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_id, T1.customer_name
SELECT T1.customer_name, T1.customer_id, count(T2.order_id)  FROM Customers AS T1  JOIN Customer_Orders AS T2  ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_id, T1.customer_name
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email  FROM Customers AS T1  JOIN Customer_Orders AS T2  ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email  HAVING count(T2.order_id) =      (SELECT max(count_order)      FROM          (SELECT count(order_id) as count_order          FROM Customer_Orders          GROUP BY customer_id) AS T3)
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email  FROM Customers AS T1  WHERE T1.customer_id = (     SELECT customer_id      FROM Customer_Orders      GROUP BY customer_id      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code
SELECT count(*) ,  order_status_code FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT sum(T2.order_quantity) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'Monitor'
SELECT sum(T2.order_quantity) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'Monitor'
SELECT count(DISTINCT T1.customer_id) FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id JOIN Products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = 'Monitor'
SELECT count(DISTINCT T1.customer_id) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id JOIN Products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = 'Monitor'
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders
SELECT count(DISTINCT T1.customer_id) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3
SELECT T1.order_id, T1.order_date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_quantity > 6 OR T1.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(product_id) > 3)
SELECT COUNT(*) FROM building
SELECT COUNT(*) FROM building
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980
SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980
SELECT AVG(Population) FROM region
SELECT AVG(Population) FROM region
SELECT Name FROM region ORDER BY Name ASC
SELECT Name FROM region ORDER BY Name ASC
SELECT Capital FROM region WHERE Area > 10000
SELECT Capital FROM region WHERE Area > 10000
SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
SELECT Capital FROM region ORDER BY Population DESC LIMIT 1
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
SELECT T1.Name FROM region AS T1 JOIN building AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Name HAVING count(*)  >  1
SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING count(*)  >  1
SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T2.Name, T2.Capital, COUNT(*) as Building_Count  FROM building AS T1  JOIN region AS T2  ON T1.Region_ID  =  T2.Region_ID  GROUP BY T1.Region_ID  ORDER BY Building_Count DESC  LIMIT 1
SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
SELECT T1.Address ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID
SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  'Abruzzo'
SELECT T1.Name, T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  'Abruzzo'
SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year
SELECT Completed_Year ,  count(*) FROM building GROUP BY Completed_Year
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15
SELECT DISTINCT Address FROM building
SELECT DISTINCT Address FROM building
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
SELECT Completed_Year, Number_of_Stories FROM building ORDER BY Number_of_Stories DESC
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC
SELECT COUNT(*) FROM Services
SELECT COUNT(*) FROM Services
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT T1.Service_Details FROM Services AS T1 JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Customer_Details = 'Hardy Kutch'
SELECT T2.Service_Details  FROM Services AS T2  JOIN Customers_and_Services AS T1 ON T2.Service_ID = T1.Service_ID  JOIN Customers AS T3 ON T1.Customer_ID = T3.Customer_ID  WHERE T3.Customer_Details = 'Hardy Kutch'
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customer_Interactions GROUP BY Service_ID HAVING COUNT(*) > 3)
SELECT T3.Service_Details  FROM Customers_and_Services AS T1  JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID  JOIN Services AS T3 ON T1.Service_ID = T3.Service_ID  GROUP BY T3.Service_Details  HAVING COUNT(*) > 3
SELECT T1.Customer_Details  FROM Customers AS T1  JOIN Customers_and_Services AS T2  ON T1.Customer_ID = T2.Customer_ID  GROUP BY T1.Customer_ID  ORDER BY count(*) DESC  LIMIT 1
SELECT T2.Customer_Details FROM Customers AS T2 WHERE T2.Customer_ID = (SELECT T1.Customer_ID FROM Customers_and_Services AS T1 GROUP BY T1.Customer_ID ORDER BY count(T1.Service_ID) DESC LIMIT 1)
SELECT T1.Customer_Details  FROM Customers AS T1  JOIN Customers_and_Services AS T2  ON T1.Customer_ID = T2.Customer_ID  GROUP BY T1.Customer_Details  HAVING count(DISTINCT T2.Service_ID) =  (SELECT max(count) FROM  (SELECT count(DISTINCT Service_ID) as count  FROM Customers_and_Services  GROUP BY Customer_ID) AS T3)
SELECT T2.Customer_Details FROM Customers AS T2 WHERE T2.Customer_ID = (SELECT T1.Customer_ID FROM Customers_and_Services AS T1 GROUP BY T1.Customer_ID ORDER BY COUNT(DISTINCT T1.Service_ID) DESC LIMIT 1)
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)
SELECT Customer_Details FROM Customers WHERE Customer_ID NOT IN (SELECT Customer_ID FROM Customers_and_Services)
SELECT T1.Customer_Details  FROM Customers AS T1  JOIN Customers_and_Services AS T2  ON T1.Customer_ID = T2.Customer_ID  WHERE T2.Service_ID IN (     SELECT Service_ID      FROM Customers_and_Services      GROUP BY Service_ID      ORDER BY COUNT(*) ASC      LIMIT 1)
SELECT DISTINCT T1.Customer_Details  FROM Customers AS T1  JOIN Customers_and_Services AS T2  ON T1.Customer_ID = T2.Customer_ID  WHERE T2.Service_ID IN (     SELECT Service_ID      FROM Customers_and_Services      GROUP BY Service_ID      ORDER BY COUNT(*) ASC      LIMIT 1)
SELECT COUNT(DISTINCT Customers_and_Services_Details) FROM Customers_and_Services
SELECT COUNT(Customers_and_Services_Details) FROM Customers_and_Services
SELECT Customer_ID, Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'
SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'
SELECT Service_Details FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')) OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'good')
SELECT T2.Service_Details FROM Customers AS T1 JOIN Customers_and_Services AS T3 ON T1.Customer_ID  =  T3.Customer_ID JOIN Services AS T2 ON T3.Service_ID  =  T2.Service_ID WHERE T1.Customer_Details  =  'Hardy Kutch' UNION SELECT T2.Service_Details FROM Customer_Interactions AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T1.Status_Code  =  'good'
SELECT T1.Service_Details  FROM Services AS T1  JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID  JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID  JOIN Customer_Interactions AS T4 ON T3.Customer_ID = T4.Customer_ID AND T1.Service_ID = T4.Service_ID WHERE T3.Customer_Details = 'Hardy Kutch' AND T4.Status_Code = 'bad'
SELECT T3.Service_Details  FROM Services AS T3  JOIN Customers_and_Services AS T1 ON T1.Service_ID = T3.Service_ID  JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID  JOIN Customer_Interactions AS T4 ON T4.Service_ID = T3.Service_ID AND T4.Customer_ID = T2.Customer_ID WHERE T2.Customer_Details = 'Hardy Kutch' AND T4.Status_Code = 'bad'
SELECT T1.Service_Details  FROM Services AS T1  JOIN Customer_Interactions AS T2  ON T1.Service_ID = T2.Service_ID  JOIN Channels AS T3  ON T2.Channel_ID = T3.Channel_ID  WHERE T3.Channel_Details = '15 ij'
SELECT T1.Service_Details  FROM Services AS T1  JOIN Customer_Interactions AS T2  ON T1.Service_ID = T2.Service_ID  JOIN Channels AS T3  ON T2.Channel_ID = T3.Channel_ID  WHERE T3.Channel_Details = "15 ij"
SELECT T1.*  FROM Customers AS T1  JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID  JOIN Services AS T3 ON T2.Service_ID = T3.Service_ID  JOIN Channels AS T4 ON T2.Channel_ID = T4.Channel_ID  WHERE T2.Status_Code = 'Stuck' AND T3.Service_Details = 'bad' AND T4.Channel_Details = 'bad'
SELECT T2.Customer_Details  FROM Customer_Interactions AS T1  JOIN Customers AS T2  ON T1.Customer_ID = T2.Customer_ID  WHERE T1.Status_Code = 'Stuck'  AND T1.Services_and_Channels_Details = 'bad'
SELECT count(*) FROM Integration_Platform AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_Interaction_ID = T2.Customer_Interaction_ID WHERE T2.Status_Code = 'successful'
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'
SELECT DISTINCT T1.Customer_Details  FROM Customers AS T1  JOIN Customer_Interactions AS T2  ON T1.Customer_ID = T2.Customer_ID  JOIN Integration_Platform AS T3  ON T2.Customer_Interaction_ID = T3.Customer_Interaction_ID  WHERE T3.Integration_Platform_Details = 'failed'
SELECT T3.Customer_Details  FROM Integration_Platform AS T1  JOIN Customer_Interactions AS T2  ON T1.Customer_Interaction_ID = T2.Customer_Interaction_ID  JOIN Customers AS T3  ON T2.Customer_ID = T3.Customer_ID  WHERE T1.Integration_Platform_Details = 'Fail'
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customer_Interactions)
SELECT Service_Details FROM Services WHERE Service_ID NOT IN (SELECT Service_ID FROM Customers_and_Services)
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT Analytical_Layer_Type_Code, COUNT(Analytical_ID) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT T1.Service_Details  FROM Services AS T1  JOIN Customers_and_Services AS T2  ON T1.Service_ID = T2.Service_ID  WHERE T2.Customers_and_Services_Details = 'unsatisfied'
SELECT T2.Service_Details  FROM Customers_and_Services AS T1  JOIN Services AS T2  ON T1.Service_ID = T2.Service_ID  WHERE T1.Customers_and_Services_Details = 'unsatisfied'
SELECT COUNT(*) FROM Vehicles
SELECT COUNT(*) FROM Vehicles
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013
SELECT Type_of_powertrain FROM Vehicles WHERE Model_year  =  2013 INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year  =  2014
SELECT Type_of_powertrain ,  COUNT(id) FROM Vehicles GROUP BY Type_of_powertrain
SELECT COUNT(*) ,  Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count(id) DESC LIMIT 1
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count(*) DESC LIMIT 1
SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles
SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT Type_of_powertrain, AVG(Annual_fuel_cost)  FROM Vehicles  GROUP BY Type_of_powertrain  HAVING COUNT(*) >= 2
SELECT Type_of_powertrain ,  AVG (Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING count(id)  >  1
SELECT name, age, membership_credit FROM Customers
SELECT name, age, membership_credit FROM Customers
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1
SELECT avg(age) FROM Customers WHERE membership_credit > (SELECT avg(membership_credit) FROM Customers)
SELECT avg(age) FROM Customers WHERE membership_credit > (SELECT avg(membership_credit) FROM Customers)
SELECT * FROM Discount
SELECT * FROM Discount
SELECT T1.name ,  sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.name
SELECT T1.name, sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.name
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING count(*) >= 2)
SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING count(*) >= 2)
SELECT T1.name ,  T1.Model_year FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T2.vehicles_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name ,  T1.Model_year FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T2.vehicles_id ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.name ORDER BY sum(T2.total_hours) DESC
SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.name ORDER BY sum(T2.total_hours) DESC
SELECT T1.name FROM Discount AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM Discount AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT T1.name ,  T1.Type_of_powertrain FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id WHERE T2.total_hours > 30
SELECT T1.name ,  T1.Type_of_powertrain FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id WHERE T2.total_hours > 30
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain
SELECT AVG(amount_of_loan) FROM Student_Loans
SELECT AVG(amount_of_loan) FROM Student_Loans
SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 WHERE T1.student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING count(*) >= 2) AND T1.student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING count(*) < 2)
SELECT DISTINCT bio_data, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2)
SELECT teacher_details FROM Teachers WHERE teacher_id IN (SELECT teacher_id FROM Classes WHERE class_details LIKE '%data%') AND teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')
SELECT T1.teacher_details  FROM Teachers AS T1  JOIN Classes AS T2  ON T1.teacher_id = T2.teacher_id  WHERE T2.class_details LIKE '%data%'  AND T1.teacher_id NOT IN (SELECT teacher_id FROM Classes WHERE class_details LIKE 'net%')
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)
SELECT T1.amount_of_loan, T1.date_of_loan FROM Student_Loans AS T1 WHERE T1.student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT T2.amount_of_loan, T2.date_of_loan FROM Student_Loans AS T2 WHERE T2.student_id IN (SELECT T1.student_id FROM Achievements AS T1 GROUP BY T1.student_id HAVING count(*) >= 2)
SELECT T1.teacher_id, T1.teacher_details  FROM Teachers AS T1  WHERE T1.teacher_id = (SELECT teacher_id                         FROM Classes                         GROUP BY teacher_id                         ORDER BY COUNT(*) DESC                         LIMIT 1)
SELECT T1.teacher_id, T1.teacher_details  FROM Teachers AS T1  JOIN Classes AS T2  ON T1.teacher_id = T2.teacher_id  GROUP BY T1.teacher_id, T1.teacher_details  HAVING count(*) = (SELECT max(count(*)) FROM Classes GROUP BY teacher_id)
SELECT DISTINCT detention_type_description FROM Ref_Detention_Type
SELECT DISTINCT detention_type_description FROM Ref_Detention_Type
SELECT T1.student_details ,  T3.address_type_description  FROM Students AS T1  JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id  JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code
SELECT T1.student_details ,  T3.address_type_description  FROM Students AS T1  JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id  JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code
SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id
SELECT Students.bio_data , Transcripts.date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id
SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id
SELECT behaviour_monitoring_details, COUNT(*) as frequency FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY frequency DESC LIMIT 1
SELECT behaviour_monitoring_details, COUNT(*) as count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count DESC LIMIT 1
SELECT T1.bio_data, T1.student_details  FROM Students AS T1  WHERE T1.student_id IN (     SELECT student_id      FROM Behaviour_Monitoring      GROUP BY student_id      HAVING COUNT(*) = 3 )  AND T1.student_id IN (     SELECT student_id      FROM (         SELECT student_id, COUNT(*) as count          FROM Behaviour_Monitoring          GROUP BY student_id     )      WHERE count = (         SELECT MAX(count)          FROM (             SELECT COUNT(*) as count              FROM Behaviour_Monitoring              GROUP BY student_id         )     ) )
SELECT T1.bio_data, T1.student_details  FROM Students AS T1  JOIN Behaviour_Monitoring AS T2  ON T1.student_id = T2.student_id  WHERE T2.behaviour_monitoring_details IN (     SELECT behaviour_monitoring_details      FROM Behaviour_Monitoring      GROUP BY behaviour_monitoring_details      HAVING COUNT(*) = 3)  AND T2.behaviour_monitoring_details IN (     SELECT behaviour_monitoring_details      FROM Behaviour_Monitoring      GROUP BY behaviour_monitoring_details      ORDER BY COUNT(*) DESC      LIMIT 1)
SELECT T1.bio_data  FROM Students AS T1  JOIN Behaviour_Monitoring AS T2  ON T1.student_id = T2.student_id  WHERE T2.behaviour_monitoring_details =      (SELECT behaviour_monitoring_details      FROM Behaviour_Monitoring      GROUP BY behaviour_monitoring_details      ORDER BY COUNT(*) DESC      LIMIT 1)  GROUP BY T1.student_id  HAVING COUNT(*) =      (SELECT COUNT(*)      FROM Behaviour_Monitoring      WHERE student_id = T1.student_id)
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring WHERE behaviour_monitoring_details = (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1))
SELECT T2.bio_data ,  T1.event_date FROM Student_Events AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T1.student_id IS NOT NULL
SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id
SELECT T1.event_type_code, T2.event_type_description, COUNT(*) as count  FROM Student_Events AS T1  JOIN Ref_Event_Types AS T2  ON T1.event_type_code = T2.event_type_code  GROUP BY T1.event_type_code, T2.event_type_description  ORDER BY count DESC LIMIT 1
SELECT T1.event_type_code, T2.event_type_description, COUNT(DISTINCT T1.student_id) AS num_students  FROM Student_Events AS T1  JOIN Ref_Event_Types AS T2  ON T1.event_type_code = T2.event_type_code  GROUP BY T1.event_type_code, T2.event_type_description  ORDER BY num_students DESC  LIMIT 1
SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id IN (SELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Achievements))
SELECT COUNT(DISTINCT teacher_id) FROM Classes WHERE student_id IN (SELECT student_id FROM Students WHERE student_id NOT IN (SELECT student_id FROM Achievements))
SELECT date_of_transcript, transcript_details FROM Transcripts
SELECT date_of_transcript, transcript_details FROM Transcripts
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements
SELECT datetime_detention_start, datetime_detention_end FROM Detention
SELECT datetime_detention_start, datetime_detention_end FROM Detention
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
SELECT T1.teacher_details, T2.student_details  FROM Classes AS T3  JOIN Teachers AS T1 ON T3.teacher_id = T1.teacher_id  JOIN Students AS T2 ON T3.student_id = T2.student_id
SELECT T2.teacher_details ,  T3.student_details FROM Classes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T1.student_id  =  T3.student_id
SELECT COUNT(class_id) AS max_courses, teacher_id FROM Classes GROUP BY teacher_id ORDER BY max_courses DESC LIMIT 1
SELECT teacher_id, COUNT(class_id) FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1
SELECT COUNT(class_id) ,  student_id FROM Classes GROUP BY student_id ORDER BY COUNT(class_id) DESC LIMIT 1
SELECT T1.student_id, COUNT(T2.class_id)  FROM Students AS T1  JOIN Classes AS T2  ON T1.student_id = T2.student_id  GROUP BY T1.student_id  ORDER BY COUNT(T2.class_id) DESC  LIMIT 1
SELECT T2.student_id, T2.student_details FROM Classes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) = 2
SELECT T1.student_id, T1.student_details  FROM Students AS T1  JOIN Classes AS T2  ON T1.student_id  =  T2.student_id  GROUP BY T1.student_id  HAVING count(T2.class_id)  =  2
SELECT T1.detention_type_code ,  T2.detention_type_description  FROM Detention AS T1  JOIN Ref_Detention_Type AS T2  ON T1.detention_type_code  =  T2.detention_type_code  GROUP BY T1.detention_type_code, T2.detention_type_description  ORDER BY count(*) ASC  LIMIT 1
SELECT T1.detention_type_code, T1.detention_type_description  FROM Ref_Detention_Type AS T1  WHERE T1.detention_type_code = (     SELECT detention_type_code      FROM Detention      GROUP BY detention_type_code      ORDER BY COUNT(*) ASC      LIMIT 1)
SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  (SELECT avg(amount_of_loan) FROM Student_Loans)
SELECT bio_data ,  student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans WHERE amount_of_loan  >  (SELECT avg(amount_of_loan) FROM Student_Loans))
SELECT MIN(date_of_loan) FROM Student_Loans
SELECT MIN(date_of_loan) FROM Student_Loans
SELECT T2.bio_data FROM Students AS T2 JOIN Student_Loans AS T1 ON T2.student_id = T1.student_id WHERE T1.amount_of_loan = (SELECT min(amount_of_loan) FROM Student_Loans)
SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan = (SELECT min(amount_of_loan) FROM Student_Loans)
SELECT date_of_transcript FROM Transcripts WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1)
SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id WHERE T2.amount_of_loan = (SELECT max(amount_of_loan) FROM Student_Loans)
SELECT T1.teacher_details  FROM Teachers AS T1  JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id  WHERE T2.student_id IN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1)
SELECT T1.teacher_details  FROM Teachers AS T1  JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id  WHERE T2.student_id IN (SELECT student_id FROM Transcripts ORDER BY date_of_transcript ASC LIMIT 1)
SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id
SELECT T1.student_id ,  sum(T2.amount_of_loan) FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id
SELECT T1.student_id ,  T1.bio_data ,  count(T2.class_id) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id, T1.bio_data
SELECT T1.student_id ,  T1.bio_data ,  count(*)  FROM Students AS T1  JOIN Classes AS T2  ON T1.student_id  =  T2.student_id  GROUP BY T1.student_id, T1.bio_data
SELECT COUNT(DISTINCT student_id) FROM Detention
SELECT count(DISTINCT T1.student_id) FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id = T2.student_id
SELECT T1.address_type_code, T1.address_type_description  FROM Ref_Address_Types AS T1  JOIN (SELECT T2.address_type_code        FROM Students_Addresses AS T2        GROUP BY T2.address_type_code        ORDER BY COUNT(*) DESC        LIMIT 1) AS T3  ON T1.address_type_code = T3.address_type_code
SELECT T1.address_type_code ,  T2.address_type_description  FROM Students_Addresses AS T1  JOIN Ref_Address_Types AS T2  ON T1.address_type_code  =  T2.address_type_code  GROUP BY T1.address_type_code, T2.address_type_description  ORDER BY count(*) DESC  LIMIT 1
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)
SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events) AND student_id NOT IN (SELECT student_id FROM Student_Loans)
SELECT T1.date_from ,  T1.date_to FROM Students_Addresses AS T1 WHERE T1.student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2)
SELECT T1.date_from ,  T1.date_to FROM Students_Addresses AS T1 WHERE T1.student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2)
SELECT datetime_detention_start FROM Detention
SELECT datetime_detention_start FROM Detention
SELECT Name FROM Author
SELECT Name FROM Author
SELECT Name, Address FROM Client
SELECT Name, Address FROM Client
SELECT Title, ISBN, SalePrice FROM Book
SELECT Title, ISBN, SalePrice FROM Book
SELECT COUNT(*) FROM Book
SELECT COUNT(*) FROM Book
SELECT COUNT(*) FROM Author
SELECT COUNT(*) FROM Author
SELECT COUNT(*) FROM Client
SELECT COUNT(*) FROM Client
SELECT Name, Address FROM Client ORDER BY Name ASC
SELECT Name, Address FROM Client ORDER BY Name
SELECT Book.Title ,  Author.Name FROM Book JOIN Author_Book ON Book.ISBN  =  Author_Book.ISBN JOIN Author ON Author_Book.Author  =  Author.idAuthor
SELECT Book.Title ,  Author.Name FROM Book JOIN Author_Book ON Book.ISBN  =  Author_Book.ISBN JOIN Author ON Author_Book.Author  =  Author.idAuthor
SELECT Orders.IdOrder ,  Client.Name FROM Orders JOIN Client ON Orders.IdClient  =  Client.IdClient
SELECT T1.IdOrder ,  T2.Name FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient  =  T2.IdClient
SELECT T1.Name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.Name
SELECT T1.Name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.Name
SELECT T1.ISBN ,  sum(T2.amount) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN  =  T2.ISBN GROUP BY T1.ISBN
SELECT T1.ISBN ,  count(T2.ISBN) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN  =  T2.ISBN GROUP BY T1.ISBN
SELECT T1.ISBN ,  sum(T2.amount) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN  =  T2.ISBN GROUP BY T1.ISBN
SELECT T1.ISBN ,  sum(T2.amount) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN  =  T2.ISBN GROUP BY T1.ISBN
SELECT T1.Title  FROM Book AS T1  JOIN Books_Order AS T2  ON T1.ISBN = T2.ISBN  GROUP BY T1.Title  ORDER BY COUNT(T2.IdOrder) DESC  LIMIT 1
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN  =  T2.ISBN GROUP BY T1.Title ORDER BY count(*) DESC LIMIT 1
SELECT T1.Title, T1.PurchasePrice  FROM Book AS T1  JOIN Books_Order AS T2  ON T1.ISBN = T2.ISBN  GROUP BY T1.ISBN ORDER BY SUM(T2.amount) DESC  LIMIT 1
SELECT T1.Title, T1.PurchasePrice  FROM Book AS T1  JOIN (     SELECT ISBN, SUM(amount) as total_amount      FROM Books_Order      GROUP BY ISBN ) AS T2  ON T1.ISBN = T2.ISBN  ORDER BY T2.total_amount DESC  LIMIT 1
SELECT DISTINCT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN
SELECT DISTINCT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN
SELECT DISTINCT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient
SELECT DISTINCT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient
SELECT T1.Name ,  count(T2.IdOrder) FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient  =  T2.IdClient GROUP BY T1.Name
SELECT T1.Name ,  count(T2.IdOrder) FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient  =  T2.IdClient GROUP BY T1.Name
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient  =  T2.IdClient GROUP BY T1.Name ORDER BY count(T2.IdOrder) DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.Name ORDER BY COUNT(T2.IdOrder) DESC LIMIT 1
SELECT T1.Name ,  sum(T2.amount) FROM Client AS T1 JOIN Orders AS T3 ON T1.IdClient  =  T3.IdClient JOIN Books_Order AS T2 ON T3.IdOrder  =  T2.IdOrder GROUP BY T1.IdClient
SELECT T1.Name ,  sum(T2.amount) FROM Client AS T1 JOIN Orders AS T3 ON T1.IdClient  =  T3.IdClient JOIN Books_Order AS T2 ON T3.IdOrder  =  T2.IdOrder GROUP BY T1.Name
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder GROUP BY T1.Name ORDER BY sum(T3.amount) DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient  =  T2.IdClient JOIN Books_Order AS T3 ON T2.IdOrder  =  T3.IdOrder GROUP BY T1.Name ORDER BY sum(T3.amount) DESC LIMIT 1
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT max(SalePrice), min(SalePrice) FROM Book
SELECT max(SalePrice), min(SalePrice) FROM Book
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book
SELECT MAX(SalePrice - PurchasePrice) FROM Book
SELECT MAX(SalePrice - PurchasePrice) FROM Book
SELECT Title FROM Book WHERE SalePrice > (SELECT avg(SalePrice) FROM Book)
SELECT Title FROM Book WHERE SalePrice > (SELECT avg(SalePrice) FROM Book)
SELECT Title FROM Book WHERE SalePrice = (SELECT min(SalePrice) FROM Book)
SELECT Title FROM Book WHERE SalePrice = (SELECT min(SalePrice) FROM Book)
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)
SELECT Title FROM Book WHERE PurchasePrice = (SELECT MAX(PurchasePrice) FROM Book)
SELECT avg(T1.SalePrice) FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'George Orwell'
SELECT avg(T1.SalePrice) FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'George Orwell'
SELECT T1.SalePrice FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'Plato'
SELECT T1.SalePrice FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'Plato'
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'George Orwell' ORDER BY T1.SalePrice LIMIT 1
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'George Orwell' ORDER BY T1.SalePrice LIMIT 1
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T1.SalePrice < (SELECT avg(SalePrice) FROM Book) AND T3.Name = 'Plato'
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T1.SalePrice < (SELECT avg(SalePrice) FROM Book) AND T3.Name = 'Plato'
SELECT T1.Name FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author JOIN Book AS T3 ON T2.ISBN = T3.ISBN WHERE T3.Title = "Pride and Prejudice"
SELECT T1.Name FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author JOIN Book AS T3 ON T2.ISBN = T3.ISBN WHERE T3.Title = 'Pride and Prejudice'
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name LIKE '%Plato%'
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name LIKE '%Plato%'
SELECT sum(T2.amount) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T1.Title = "Pride and Prejudice"
SELECT sum(T1.amount) FROM Books_Order AS T1 JOIN Book AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Title = 'Pride and Prejudice'
SELECT T1.IdOrder FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder  =  T2.IdOrder JOIN Book AS T3 ON T2.ISBN  =  T3.ISBN WHERE T3.Title  =  'Pride and Prejudice' INTERSECT SELECT T1.IdOrder FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.IdOrder  =  T2.IdOrder JOIN Book AS T3 ON T2.ISBN  =  T3.ISBN WHERE T3.Title  =  'The Little Prince'
SELECT T1.IdOrder FROM Books_Order AS T1 JOIN Book AS T2 ON T1.ISBN  =  T2.ISBN WHERE T2.Title  =  'Pride and Prejudice' INTERSECT SELECT T1.IdOrder FROM Books_Order AS T1 JOIN Book AS T2 ON T1.ISBN  =  T2.ISBN WHERE T2.Title  =  'The Little Prince'
SELECT T1.ISBN FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder  =  T2.IdOrder JOIN Client AS T3 ON T2.IdClient  =  T3.IdClient WHERE T3.Name  =  'Peter Doe' INTERSECT SELECT T1.ISBN FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder  =  T2.IdOrder JOIN Client AS T3 ON T2.IdClient  =  T3.IdClient WHERE T3.Name  =  'James Smith'
SELECT T1.ISBN FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder  =  T2.IdOrder JOIN Client AS T3 ON T2.IdClient  =  T3.IdClient WHERE T3.Name  =  'Peter Doe' INTERSECT SELECT T1.ISBN FROM Books_Order AS T1 JOIN Orders AS T2 ON T1.IdOrder  =  T2.IdOrder JOIN Client AS T3 ON T2.IdClient  =  T3.IdClient WHERE T3.Name  =  'James Smith'
SELECT T3.Title FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient  =  T2.IdClient JOIN Books_Order AS T4 ON T1.IdOrder  =  T4.IdOrder JOIN Book AS T3 ON T4.ISBN  =  T3.ISBN WHERE T2.Name  =  'Peter Doe' EXCEPT SELECT T3.Title FROM Orders AS T1 JOIN Client AS T2 ON T1.IdClient  =  T2.IdClient JOIN Books_Order AS T4 ON T1.IdOrder  =  T4.IdOrder JOIN Book AS T3 ON T4.ISBN  =  T3.ISBN WHERE T2.Name  =  'James Smith'
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN  =  T2.ISBN JOIN Orders AS T3 ON T2.IdOrder  =  T3.IdOrder JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T4.Name  =  'Peter Doe' EXCEPT SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN  =  T2.ISBN JOIN Orders AS T3 ON T2.IdOrder  =  T3.IdOrder JOIN Client AS T4 ON T3.IdClient = T4.IdClient WHERE T4.Name  =  'James Smith'
SELECT DISTINCT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder JOIN Book AS T4 ON T3.ISBN = T4.ISBN WHERE T4.Title = 'Pride and Prejudice'
SELECT DISTINCT T1.Name FROM Client AS T1 JOIN Orders AS T2 ON T1.IdClient = T2.IdClient JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder JOIN Book AS T4 ON T3.ISBN = T4.ISBN WHERE T4.Title = 'Pride and Prejudice'
SELECT COUNT(*) FROM book
SELECT Title FROM book ORDER BY Title ASC
SELECT Title FROM book ORDER BY Pages DESC
SELECT Type, Release FROM book
SELECT Book_ID, Title, max(Chapters), min(Chapters) FROM book GROUP BY Book_ID, Title
SELECT Title FROM book WHERE Type != 'Poet'
SELECT AVG(Rating) FROM review
SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID
SELECT T1.Rating FROM review AS T1 JOIN book AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Chapters  =  (SELECT max(Chapters) FROM book)
SELECT T1.Rank FROM review AS T1 JOIN book AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Pages  =  (SELECT min(Pages) FROM book)
SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rank LIMIT 1
SELECT avg(T1.Readers_in_Million) FROM review AS T1 JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Type = 'Novel'
SELECT Type ,  COUNT(*) FROM book GROUP BY Type
SELECT Type FROM book GROUP BY Type ORDER BY count(*) DESC LIMIT 1
SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3
SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC
SELECT T1.Title ,  T1.Audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Readers_in_Million DESC
SELECT COUNT(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
SELECT Type FROM book WHERE Type IN (SELECT Type FROM book WHERE Chapters > 75) AND Type IN (SELECT Type FROM book WHERE Chapters < 50)
SELECT COUNT(DISTINCT Type) FROM book
SELECT Type ,  Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
SELECT COUNT(*) FROM customer
SELECT COUNT(*) FROM customer
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Nationality, Card_Credit FROM customer
SELECT Nationality, Card_Credit FROM customer
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia')
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia')
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1
SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1
SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1
SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality
SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1
SELECT Nationality FROM customer WHERE Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit < 50) AND Nationality IN (SELECT Nationality FROM customer WHERE Card_Credit > 75)
SELECT Nationality FROM customer WHERE Card_Credit > 50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit < 75
SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID
SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC
SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC
SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name
SELECT sum(T1.Quantity) ,  T2.Name FROM customer_order AS T1 JOIN customer AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T2.Name
SELECT T1.* FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Customer_ID HAVING sum(T2.Quantity) > 1
SELECT T2.Name FROM customer_order AS T1 JOIN customer AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T2.Name HAVING sum(T1.Quantity) > 1
SELECT DISTINCT Manager FROM branch
SELECT DISTINCT Manager FROM branch
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT COUNT(*) FROM member
SELECT Name FROM member ORDER BY Age ASC
SELECT Name, Nationality FROM member
SELECT Name FROM member WHERE Nationality != 'England'
SELECT Name FROM member WHERE Age IN (19, 20)
SELECT Name FROM member ORDER BY Age DESC LIMIT 1
SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality
SELECT Nationality FROM member GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Member_ID) >= 2
SELECT T1.Name ,  T2.Club_Name FROM member AS T1 JOIN club_leader AS T3 ON T1.Member_ID  =  T3.Member_ID JOIN club AS T2 ON T3.Club_ID  =  T2.Club_ID
SELECT T1.Name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T2.Club_ID  =  T3.Club_ID WHERE T3.Overall_Ranking > 100
SELECT T1.Name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Year_Join < 2018
SELECT T1.Name FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID JOIN club AS T3 ON T2.Club_ID = T3.Club_ID WHERE T3.Club_Name = 'Houston' AND T3.Team_Leader = T1.Member_ID
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
SELECT Nationality FROM member WHERE Age > 22 INTERSECT SELECT Nationality FROM member WHERE Age < 19
SELECT avg(T1.Age) FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID  =  T2.Member_ID
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'
SELECT DISTINCT T2.Collection_Subset_Name  FROM Collection_Subset_Members AS T1  JOIN Collection_Subsets AS T2  ON T1.Collection_Subset_ID = T2.Collection_Subset_ID
SELECT Collection_Subset_Name FROM Collection_Subsets
SELECT Collection_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'
SELECT T1.*  FROM Collections AS T1  JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID  JOIN Collection_Subsets AS T3 ON T2.Collection_Subset_ID = T3.Collection_Subset_ID  WHERE T3.Collection_Subset_Name = 'Top collection'
SELECT DISTINCT Document_Subset_Name FROM Document_Subsets
SELECT Document_Subset_Name FROM Document_Subsets
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Object_ID FROM Document_Objects
SELECT Document_Object_ID FROM Document_Objects
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'
SELECT T1.Owner FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T3.Collection_Name = 'Braeden Collection'
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')
SELECT Owner FROM Document_Objects WHERE Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL
SELECT COUNT(*) FROM Document_Objects WHERE Owner = 'Marlin'
SELECT COUNT(Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID NOT IN (SELECT Parent_Document_Object_ID FROM Document_Objects)
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects GROUP BY Parent_Document_Object_ID
SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects GROUP BY Parent_Document_Object_ID
SELECT Collection_Name FROM Collections
SELECT Collection_Name FROM Collections
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_Name FROM Collections WHERE Collection_ID = (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')
SELECT Collection_Name FROM Collections WHERE Collection_ID IN (SELECT Parent_Collection_ID FROM Collections WHERE Collection_Name = 'Nice')
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections)
SELECT Collection_Name FROM Collections WHERE Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections)
SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(*) > 1
SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING count(*) > 1
SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT COUNT(*) FROM Collections WHERE Parent_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT T2.Related_Document_Object_ID  FROM Document_Objects AS T1  JOIN Document_Subset_Members AS T2  ON T1.Document_Object_ID = T2.Document_Object_ID  WHERE T1.Owner = 'Ransom'
SELECT Document_Subset_Members.Related_Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'
SELECT T1.Collection_Subset_ID, T1.Collection_Subset_Name, count(T2.Collection_ID)  FROM Collection_Subsets AS T1  JOIN Collection_Subset_Members AS T2  ON T1.Collection_Subset_ID = T2.Collection_Subset_ID  GROUP BY T1.Collection_Subset_ID, T1.Collection_Subset_Name
SELECT T1.Collection_Subset_ID, T1.Collection_Subset_Name, count(T2.Collection_ID)  FROM Collection_Subsets AS T1  JOIN Collection_Subset_Members AS T2  ON T1.Collection_Subset_ID = T2.Collection_Subset_ID  GROUP BY T1.Collection_Subset_ID, T1.Collection_Subset_Name
SELECT Parent_Document_Object_ID, COUNT(*) as child_count FROM Document_Objects GROUP BY Parent_Document_Object_ID ORDER BY child_count DESC LIMIT 1
SELECT Parent_Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects GROUP BY Parent_Document_Object_ID
SELECT T1.Document_Object_ID, COUNT(T2.Related_Document_Object_ID) AS related_docs  FROM Document_Objects AS T1  JOIN Document_Subset_Members AS T2  ON T1.Document_Object_ID = T2.Document_Object_ID  GROUP BY T1.Document_Object_ID  ORDER BY related_docs ASC  LIMIT 1
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID  =  T2.Document_Object_ID GROUP BY T1.Document_Object_ID ORDER BY count(*) ASC LIMIT 1
SELECT T1.Document_Object_ID, count(T2.Related_Document_Object_ID)  FROM Document_Objects AS T1  JOIN Document_Subset_Members AS T2  ON T1.Document_Object_ID = T2.Document_Object_ID  GROUP BY T1.Document_Object_ID  HAVING count(T2.Related_Document_Object_ID) BETWEEN 2 AND 4
SELECT T1.Document_Object_ID, count(T2.Related_Document_Object_ID)  FROM Document_Objects AS T1  JOIN Document_Subset_Members AS T2  ON T1.Document_Object_ID = T2.Document_Object_ID  GROUP BY T1.Document_Object_ID  HAVING count(T2.Related_Document_Object_ID) BETWEEN 2 AND 4
SELECT T1.Owner  FROM Document_Objects AS T1  JOIN Document_Subset_Members AS T2  ON T1.Document_Object_ID = T2.Related_Document_Object_ID  WHERE T2.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')
SELECT DISTINCT T1.Owner  FROM Document_Objects AS T1  JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Related_Document_Object_ID  WHERE T2.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden')
SELECT DISTINCT T3.Document_Subset_Name  FROM Document_Objects AS T1  JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID  JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID  WHERE T1.Owner = 'Braeden'
SELECT DISTINCT T1.Document_Subset_Name  FROM Document_Subsets AS T1  JOIN Document_Subset_Members AS T2  ON T1.Document_Subset_ID = T2.Document_Subset_ID  JOIN Document_Objects AS T3  ON T2.Document_Object_ID = T3.Document_Object_ID  WHERE T3.Owner = 'Braeden'
SELECT T1.Document_Subset_ID, T1.Document_Subset_Name, count(distinct T2.Document_Object_ID)  FROM Document_Subsets AS T1  JOIN Document_Subset_Members AS T2  ON T1.Document_Subset_ID = T2.Document_Subset_ID  GROUP BY T1.Document_Subset_ID, T1.Document_Subset_Name
SELECT T1.Document_Subset_ID, T1.Document_Subset_Name, count(distinct T2.Document_Object_ID)  FROM Document_Subsets AS T1  JOIN Document_Subset_Members AS T2  ON T1.Document_Subset_ID = T2.Document_Subset_ID  GROUP BY T1.Document_Subset_ID, T1.Document_Subset_Name
SELECT T1.Document_Subset_ID, T1.Document_Subset_Name, count(distinct T2.Document_Object_ID) FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID, T1.Document_Subset_Name ORDER BY count(distinct T2.Document_Object_ID) DESC LIMIT 1
SELECT T1.Document_Subset_ID, T1.Document_Subset_Name, T2.num_docs  FROM Document_Subsets AS T1  JOIN (     SELECT Document_Subset_ID, COUNT(DISTINCT Document_Object_ID) as num_docs      FROM Document_Subset_Members      GROUP BY Document_Subset_ID      ORDER BY num_docs DESC      LIMIT 1 ) AS T2  ON T1.Document_Subset_ID = T2.Document_Subset_ID
SELECT T2.Document_Object_ID FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T1.Document_Subset_Name = 'Best for 2000'
SELECT T2.Document_Object_ID FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID WHERE T1.Document_Subset_Name = 'Best for 2000'
SELECT T1.Document_Subset_Name ,  T2.Document_Object_ID  FROM Document_Subsets AS T1  JOIN Document_Subset_Members AS T2  ON T1.Document_Subset_ID  =  T2.Document_Subset_ID
SELECT T1.Document_Subset_Name ,  T2.Document_Object_ID  FROM Document_Subsets AS T1  JOIN Document_Subset_Members AS T2  ON T1.Document_Subset_ID  =  T2.Document_Subset_ID
SELECT T1.Collection_Name  FROM Collections AS T1  JOIN Documents_in_Collections AS T2  ON T1.Collection_ID = T2.Collection_ID  JOIN Document_Objects AS T3  ON T2.Document_Object_ID = T3.Document_Object_ID  WHERE T3.Owner = 'Ransom'
SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID WHERE T3.Owner = 'Ransom'
SELECT Document_Object_ID, count(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT Document_Object_ID, COUNT(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT count(T1.Document_Object_ID) FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best'
SELECT count(T1.Document_Object_ID) FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best'
SELECT Document_Object_ID FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best'
SELECT count(T1.Document_Object_ID) FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best'
SELECT T2.Collection_Name, T2.Collection_ID, count(T1.Document_Object_ID) FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Collection_ID, T2.Collection_Name ORDER BY count(T1.Document_Object_ID) DESC LIMIT 1
SELECT T1.Collection_Name, T1.Collection_ID, COUNT(T2.Document_Object_ID) as doc_count  FROM Collections AS T1  JOIN Documents_in_Collections AS T2  ON T1.Collection_ID = T2.Collection_ID  WHERE T1.Collection_Name = 'Best'  GROUP BY T1.Collection_ID  ORDER BY doc_count DESC  LIMIT 1
SELECT T1.Document_Object_ID  FROM Document_Objects AS T1  JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID  JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID  JOIN Documents_in_Collections AS T4 ON T1.Document_Object_ID = T4.Document_Object_ID  JOIN Collections AS T5 ON T4.Collection_ID = T5.Collection_ID  WHERE T3.Document_Subset_Name = 'Best for 2000' AND T5.Collection_Name = 'Best'
SELECT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name  =  'Best for 2000' UNION SELECT T1.Document_Object_ID FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name  =  'Best'
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000')
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'))
SELECT DISTINCT T1.Document_Object_ID  FROM Document_Objects AS T1  JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID  JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID  JOIN Documents_in_Collections AS T4 ON T1.Document_Object_ID = T4.Document_Object_ID  JOIN Collections AS T5 ON T4.Collection_ID = T5.Collection_ID  WHERE T3.Document_Subset_Name = 'Best for 2000' OR T5.Collection_Name = 'Best'
SELECT DISTINCT T1.Document_Object_ID  FROM Document_Subset_Members AS T1  JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID  JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID = T3.Document_Object_ID  JOIN Collections AS T4 ON T3.Collection_ID = T4.Collection_ID  WHERE T2.Document_Subset_Name = 'Best for 2000' OR T4.Collection_Name = 'Best'
SELECT DISTINCT T1.Collection_Name  FROM Collections AS T1  JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID  WHERE T2.Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT T3.Collection_Name  FROM Collections AS T1  JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID  JOIN Collections AS T3 ON T2.Related_Collection_ID = T3.Collection_ID  WHERE T1.Collection_Name = 'Best'
SELECT count(*) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Related_Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name  =  'Best'
SELECT count(DISTINCT T2.Related_Collection_ID) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best'
SELECT T3.Collection_Subset_Name  FROM Collection_Subsets AS T3  JOIN Collection_Subset_Members AS T2 ON T3.Collection_Subset_ID = T2.Collection_Subset_ID JOIN Collections AS T1 ON T2.Collection_ID = T1.Collection_ID WHERE T1.Collection_Name = 'Best'
SELECT T1.Collection_Subset_Name  FROM Collection_Subsets AS T1  JOIN Collection_Subset_Members AS T2  ON T1.Collection_Subset_ID = T2.Collection_Subset_ID  WHERE T2.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%'
SELECT name FROM songs ORDER BY name ASC
SELECT name, language FROM songs
SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score
SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'
SELECT id, language, original_artist FROM songs WHERE name != 'Love'
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love'
SELECT DISTINCT T1.stage_presence  FROM performance_score AS T1  JOIN songs AS T2  ON T1.songs_id  =  T2.id  WHERE T2.language  =  'English'
SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id, T1.name HAVING count(*) >= 2
SELECT T1.id ,  T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id GROUP BY T1.id ORDER BY count(T2.songs_id) DESC
SELECT T1.id, T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T2.voice_sound_quality = 5 OR T2.rhythm_tempo = 5
SELECT T1.voice_sound_quality  FROM performance_score AS T1  JOIN songs AS T2  ON T1.songs_id  =  T2.id  WHERE T2.name  =  'The Balkan Girls' AND T2.language  =  'English'
SELECT T1.id, T1.name FROM songs AS T1 WHERE T1.id = (SELECT T2.songs_id FROM performance_score AS T2 GROUP BY T2.songs_id ORDER BY COUNT(DISTINCT T2.participant_id) DESC LIMIT 1)
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9
SELECT COUNT(*) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score)
SELECT avg(T1.rhythm_tempo) ,  T2.language FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id GROUP BY T2.language
SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id = T2.participant_id JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language = 'English'
SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id JOIN songs AS T3 ON T2.songs_id  =  T3.id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id JOIN songs AS T3 ON T2.songs_id  =  T3.id WHERE T3.language  =  'English'
SELECT name FROM songs WHERE name LIKE '%Is%'
SELECT T1.original_artist FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T2.rhythm_tempo > 5 ORDER BY T2.voice_sound_quality DESC
SELECT COUNT(*) FROM City
SELECT COUNT(*) FROM City
SELECT DISTINCT state FROM City
SELECT DISTINCT state FROM City
SELECT COUNT(DISTINCT country) FROM City
SELECT COUNT(DISTINCT country) FROM City
SELECT city_name, city_code, state, country FROM City
SELECT city_name, city_code, state, country FROM City
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'
SELECT city_name FROM City WHERE state = 'PA'
SELECT city_name FROM City WHERE state = 'PA'
SELECT COUNT(*) FROM City WHERE country = 'Canada'
SELECT COUNT(*) FROM City WHERE country = 'Canada'
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude
SELECT state ,  COUNT(city_name) FROM City GROUP BY state
SELECT state, COUNT(DISTINCT city_name) FROM City GROUP BY state
SELECT country ,  COUNT(city_name) FROM City GROUP BY country
SELECT COUNT(DISTINCT city_name), country FROM City GROUP BY country
SELECT state FROM City GROUP BY state HAVING COUNT(DISTINCT city_name) >= 2
SELECT state FROM City GROUP BY state HAVING COUNT(DISTINCT city_name) >= 2
SELECT state FROM City GROUP BY state ORDER BY count(city_name) DESC LIMIT 1
SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1
SELECT country FROM City GROUP BY country ORDER BY count(city_name) ASC LIMIT 1
SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC LIMIT 1
SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.state = 'MD'
SELECT T1.Fname, T1.LName FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.state = 'MD'
SELECT count(T1.StuID) FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.country = 'China'
SELECT count(*) FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.country = 'China'
SELECT Fname , Major FROM Student JOIN City ON Student.city_code = City.city_code WHERE City.city_name = 'Baltimore'
SELECT T1.Fname, T1.Major FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = 'Baltimore'
SELECT count(T1.StuID), T2.country FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T2.country
SELECT count(T1.StuID) ,  T2.country FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code GROUP BY T2.country
SELECT count(T1.StuID), T2.city_name FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T2.city_name
SELECT count(T1.StuID), T2.city_name FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T2.city_name
SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1
SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state ORDER BY count(T2.StuID) DESC LIMIT 1
SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.country ORDER BY COUNT(*) ASC LIMIT 1
SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.country ORDER BY COUNT(T2.StuID) ASC LIMIT 1
SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_name HAVING count(*)  >=  3
SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_name HAVING count(T2.StuID) >= 3
SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state HAVING count(T2.StuID) > 5
SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state HAVING count(T2.StuID) > 5
SELECT StuID FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.country != 'USA'
SELECT T1.StuID FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.country != 'USA'
SELECT T1.StuID FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Sex = 'F' AND T2.state = 'PA'
SELECT StuID FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Sex = 'female' AND T2.state = 'PA'
SELECT T1.StuID FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Sex = 'male' AND T2.country != 'USA'
SELECT T1.StuID FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Sex = 'male' AND T2.country != 'USA'
SELECT distance FROM Direct_distance WHERE (city1_code = 'BAL' AND city2_code = 'CHI') OR (city1_code = 'CHI' AND city2_code = 'BAL')
SELECT distance FROM Direct_distance WHERE city1_code = 'BAL' AND city2_code = 'CHI'
SELECT distance FROM Direct_distance WHERE (city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')) OR (city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city1_code = (SELECT city_code FROM City WHERE city_name = 'Newark'))
SELECT distance FROM Direct_distance WHERE (city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')) OR (city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND city1_code = (SELECT city_code FROM City WHERE city_name = 'Newark'))
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance
SELECT city1_code, city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1
SELECT city1_code, city2_code FROM Direct_distance WHERE distance = (SELECT max(distance) FROM Direct_distance)
SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)
SELECT T1.city1_code, T1.city2_code FROM Direct_distance AS T1 WHERE T1.distance > (SELECT avg(distance) FROM Direct_distance)
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000
SELECT DISTINCT T1.city_code FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code  =  T2.city1_code OR T1.city_code  =  T2.city2_code WHERE T2.distance < 1000
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'
SELECT SUM(distance) FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL'
SELECT avg(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')
SELECT avg(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')
SELECT T1.city_name  FROM City AS T1  JOIN Direct_distance AS T2  ON T1.city_code = T2.city1_code OR T1.city_code = T2.city2_code  WHERE T2.distance = (SELECT min(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago') OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Chicago'))  AND T1.city_name != 'Chicago'
SELECT T1.city_name  FROM City AS T1  JOIN Direct_distance AS T2 ON T1.city_code = T2.city2_code  WHERE T2.distance = (SELECT min(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Chicago'))
SELECT T1.city_name  FROM City AS T1  JOIN Direct_distance AS T2  ON T1.city_code = T2.city1_code OR T1.city_code = T2.city2_code  WHERE T2.distance = (SELECT max(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') OR city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston'))
SELECT T1.city_name FROM City AS T1 JOIN Direct_distance AS T2 ON T1.city_code = T2.city2_code WHERE T1.city_name = 'Boston' ORDER BY T2.distance DESC LIMIT 1
SELECT City.city_code, SUM(Direct_distance.distance)  FROM City  JOIN Direct_distance  ON City.city_code = Direct_distance.city1_code  OR City.city_code = Direct_distance.city2_code  GROUP BY City.city_code
SELECT T1.city_code, sum(T2.distance)  FROM City AS T1  JOIN Direct_distance AS T2  ON T1.city_code = T2.city1_code OR T1.city_code = T2.city2_code  GROUP BY T1.city_code
SELECT T1.city_name ,  avg(T2.distance)  FROM City AS T1  JOIN Direct_distance AS T2  ON T1.city_code  =  T2.city1_code  GROUP BY T1.city_name
SELECT T1.city_name ,  avg(T2.distance)  FROM City AS T1  JOIN Direct_distance AS T2  ON T1.city_code  =  T2.city1_code  GROUP BY T1.city_name
SELECT distance FROM Direct_distance WHERE city1_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith') AND city2_code IN (SELECT city_code FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim')
SELECT distance FROM Direct_distance WHERE (city1_code IN (SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND city2_code IN (SELECT city_code FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy')) OR (city2_code IN (SELECT city_code FROM Student WHERE LName = 'Smith' AND Fname = 'Linda') AND city1_code IN (SELECT city_code FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy'))
SELECT Fname, Lname FROM Student WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND Lname = 'Smith') ORDER BY distance DESC LIMIT 1)
SELECT Fname, LName FROM Student WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE distance = (SELECT max(distance) FROM Direct_distance WHERE city1_code = (SELECT city_code FROM Student WHERE Fname = 'Linda' AND LName = 'Smith')))
SELECT T2.state FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Fname = 'Linda'
SELECT T2.state FROM Student AS T1 JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Fname = 'Linda'
SELECT * FROM Sailors WHERE age > 30
SELECT * FROM Sailors WHERE age > 30
SELECT name, age FROM Sailors WHERE age < 30
SELECT name, age FROM Sailors WHERE age < 30
SELECT T1.* FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid = T2.bid JOIN Sailors AS T3 ON T2.sid = T3.sid WHERE T3.sid = 1
SELECT DISTINCT bid FROM Reserves WHERE sid = 1
SELECT T2.name FROM Sailors AS T2 JOIN Reserves AS T1 ON T2.sid = T1.sid WHERE T1.bid = 102
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 102
SELECT DISTINCT T1.bid FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid = T2.bid
SELECT DISTINCT T1.bid FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid = T2.bid
SELECT name FROM Sailors WHERE name LIKE '%e%'
SELECT name FROM Sailors WHERE name LIKE '%e%'
SELECT DISTINCT sid FROM Sailors WHERE age = (SELECT max(age) FROM Sailors)
SELECT DISTINCT sid FROM Sailors WHERE age > (SELECT min(age) FROM Sailors)
SELECT DISTINCT name FROM Sailors WHERE age > (SELECT MAX(age) FROM Sailors WHERE rating > 7)
SELECT DISTINCT S1.name FROM Sailors S1 WHERE S1.age > ANY (SELECT S2.age FROM Sailors S2 WHERE S2.rating > 7)
SELECT DISTINCT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid
SELECT DISTINCT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid
SELECT T1.sid, T1.name FROM Sailors AS T1 WHERE T1.sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING count(DISTINCT bid) > 1)
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T1.name HAVING count(DISTINCT T2.bid)  >=  2
SELECT DISTINCT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = 'red' OR T2.color = 'blue'
SELECT DISTINCT T1.sid FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.color = 'red' OR T2.color = 'blue'
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'red' OR T3.color = 'blue'
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'red' OR T3.color = 'blue'
SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T2.bid  =  T3.bid WHERE T3.color  =  'red' INTERSECT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T2.bid  =  T3.bid WHERE T3.color  =  'blue'
SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'red' INTERSECT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'blue'
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'red' INTERSECT SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'blue'
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'red' INTERSECT SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'blue'
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid, name FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103
SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')
SELECT name FROM Sailors WHERE rating > (SELECT max(rating) FROM Sailors WHERE name = 'Luis')
SELECT T1.name, T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T1.rating > 2
SELECT Sailors.name, Sailors.sid  FROM Sailors  JOIN Reserves ON Sailors.sid = Reserves.sid  WHERE Sailors.rating >= 3
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT COUNT(*) FROM Sailors
SELECT COUNT(*) FROM Sailors
SELECT AVG(age) FROM Sailors WHERE rating = 7
SELECT AVG(age) FROM Sailors WHERE rating = 7
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'
SELECT AVG(rating), MAX(age) FROM Sailors
SELECT AVG(rating), MAX(age) FROM Sailors
SELECT T2.name, count(T1.bid) FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid = T2.bid GROUP BY T2.name
SELECT count(T1.bid) ,  T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid GROUP BY T2.name
SELECT count(*), T1.bid FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid = T2.bid WHERE T1.bid > 50 GROUP BY T1.bid
SELECT count(*), T1.bid FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid = T2.bid WHERE T1.bid > 50 GROUP BY T1.bid
SELECT Boats.bid, COUNT(*)  FROM Reserves  JOIN Boats ON Reserves.bid = Boats.bid  GROUP BY Boats.bid  HAVING COUNT(*) > 1
SELECT bid, count(*) FROM Reserves GROUP BY bid HAVING count(*) > 1
SELECT count(T1.sid), T3.bid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T1.bid = T3.bid WHERE T2.sid > 1 GROUP BY T3.bid
SELECT count(T1.bid), T1.bid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.sid > 1 GROUP BY T1.bid
SELECT T1.rating, avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'red' GROUP BY T1.rating
SELECT T1.rating, AVG(T1.age)  FROM Sailors AS T1  JOIN Reserves AS T2 ON T1.sid = T2.sid  JOIN Boats AS T3 ON T2.bid = T3.bid  WHERE T3.color = 'red'  GROUP BY T1.rating
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT COUNT(*) FROM Boats
SELECT COUNT(*) FROM Boats
SELECT COUNT(*) FROM Boats WHERE color = 'red'
SELECT COUNT(*) FROM Boats WHERE color = 'red'
SELECT DISTINCT T1.name FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T3.age BETWEEN 20 AND 30
SELECT DISTINCT T1.name FROM Boats AS T1 JOIN Reserves AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T3.age BETWEEN 20 AND 30
SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T2.bid  =  T3.bid WHERE T3.color  =  'red')
SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T2.bid  =  T3.bid WHERE T3.color  =  'red')
SELECT MAX(rating) FROM Sailors
SELECT MAX(rating) FROM Sailors
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.name = 'Melon'
SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.name = 'Melon'
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC
SELECT DISTINCT Model FROM headphone ORDER BY Model
SELECT Class FROM headphone GROUP BY Class ORDER BY count(*) DESC LIMIT 1
SELECT T1.Class FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID  =  T2.Headphone_ID GROUP BY T1.Class ORDER BY count(T2.Headphone_ID) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Headphone_ID) > 2
SELECT Class FROM headphone WHERE Class NOT IN (SELECT T1.Class FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID  =  T2.Headphone_ID GROUP BY T1.Class HAVING count(*)  >  2)
SELECT count(*) ,  Class FROM headphone WHERE Price  >  200 GROUP BY Class
SELECT count(Headphone_ID) ,  Class FROM headphone WHERE Price  >  200 GROUP BY Class
SELECT COUNT(DISTINCT Earpads) FROM headphone
SELECT COUNT(DISTINCT Earpads) FROM headphone
SELECT T1.Earpads FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID  =  T2.Headphone_ID GROUP BY T1.Earpads ORDER BY sum(T2.Quantity) DESC LIMIT 2
SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY count(Headphone_ID) DESC LIMIT 2
SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1
SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1
SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction
SELECT AVG(Price), Construction FROM headphone GROUP BY Construction
SELECT Class FROM headphone WHERE Class IN (SELECT Class FROM headphone WHERE Earpads  =  'Bowls') AND Class IN (SELECT Class FROM headphone WHERE Earpads  =  'Comfort Pads')
SELECT Class FROM headphone WHERE Earpads  =  'Bowls' INTERSECT SELECT Class FROM headphone WHERE Earpads  =  'Comfort Pads'
SELECT DISTINCT Earpads FROM headphone WHERE Construction != 'plastic'
SELECT Earpads FROM headphone WHERE Construction != 'plastic'
SELECT Model FROM headphone WHERE Price < (SELECT avg(Price) FROM headphone)
SELECT Model FROM headphone WHERE Price < (SELECT avg(Price) FROM headphone)
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'
SELECT COUNT(DISTINCT Neighborhood) FROM store
SELECT COUNT(DISTINCT Neighborhood) FROM store
SELECT COUNT(*) ,  Neighborhood FROM store GROUP BY Neighborhood
SELECT COUNT(DISTINCT Store_ID), Neighborhood FROM store GROUP BY Neighborhood
SELECT T1.Name ,  sum(T2.Quantity) FROM store AS T1 JOIN stock AS T2 ON T1.Store_ID  =  T2.Store_ID GROUP BY T1.Name ORDER BY sum(T2.Quantity) DESC LIMIT 1
SELECT T2.Name ,  sum(T1.Quantity)  FROM stock AS T1  JOIN store AS T2  ON T1.Store_ID  =  T2.Store_ID  GROUP BY T2.Name
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock WHERE Quantity > 0)
SELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
SELECT T1.Model FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID  =  T2.Headphone_ID GROUP BY T1.Model ORDER BY sum(T2.Quantity) DESC LIMIT 1
SELECT T1.Model FROM headphone AS T1 JOIN stock AS T2 ON T1.Headphone_ID  =  T2.Headphone_ID GROUP BY T1.Model ORDER BY sum(T2.Quantity) DESC LIMIT 1
SELECT sum(Quantity) FROM stock AS T1 JOIN store AS T2 ON T1.Store_ID  =  T2.Store_ID WHERE T2.Name  =  'Woodman'
SELECT sum(Quantity) FROM stock AS T1 JOIN store AS T2 ON T1.Store_ID  =  T2.Store_ID WHERE T2.Name  =  'Woodman'
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)
SELECT Neighborhood FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock WHERE Quantity > 0)
SELECT COUNT(*) FROM Author
SELECT COUNT(author_id) FROM Author
SELECT COUNT(*) FROM Paper
SELECT COUNT(paper_id) FROM Paper
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000
SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL' AND year = 2000
SELECT count(T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T1.year = 2009 AND T3.name = 'Columbia University'
SELECT count(T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T1.year = 2009 AND T3.name = 'Columbia University'
SELECT name, address FROM Affiliation
SELECT name, address FROM Affiliation
SELECT venue, year FROM Paper ORDER BY year
SELECT DISTINCT venue FROM Paper ORDER BY year
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Harvard University'
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Harvard University'
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown'
SELECT T1.title, T1.paper_id  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  WHERE T3.name = 'Mckeown'
SELECT T1.paper_id, T1.title  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id  WHERE T3.name IN ('Stanford University', 'Columbia University')  GROUP BY T1.paper_id, T1.title  HAVING COUNT(DISTINCT T3.name) = 2
SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  'Stanford' INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  'Columbia University'
SELECT T1.paper_id, T1.title  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  WHERE T3.name IN ('Mckeown, Kathleen', 'Rambow, Owen')  GROUP BY T1.paper_id, T1.title  HAVING COUNT(DISTINCT T3.name) = 2
SELECT T2.title, T2.paper_id FROM Author AS T1 JOIN Author_list AS T3 ON T1.author_id = T3.author_id JOIN Paper AS T2 ON T3.paper_id = T2.paper_id WHERE T1.name IN ('Mckeown, Kathleen', 'Rambow, Owen') GROUP BY T2.paper_id HAVING COUNT(DISTINCT T1.name) = 2
SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name  =  'Mckeown' EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name  =  'Rambow'
SELECT T1.paper_id, T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown' EXCEPT SELECT T1.paper_id, T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Rambow'
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen' OR T3.name = 'Rambow, Owen'
SELECT T1.title, T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen' OR T3.name = 'Rambow, Owen'
SELECT T1.name ,  count(T2.paper_id)  FROM Author AS T1  JOIN Author_list AS T2  ON T1.author_id  =  T2.author_id  GROUP BY T1.name  ORDER BY count(T2.paper_id) DESC
SELECT count(T1.paper_id) ,  T2.name FROM Author_list AS T1 JOIN Author AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.name ORDER BY count(T1.paper_id) DESC
SELECT T1.name, COUNT(T2.paper_id) FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.name ORDER BY COUNT(T2.paper_id) ASC
SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.name ORDER BY count(T2.paper_id) DESC
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name HAVING count(T2.paper_id) > 50
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name HAVING count(T2.paper_id) > 50
SELECT name FROM Author WHERE author_id IN (SELECT author_id FROM Author_list GROUP BY author_id HAVING count(*) = 1)
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name HAVING count(T2.paper_id) = 1
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1
SELECT venue FROM Paper GROUP BY venue ORDER BY count(paper_id) ASC LIMIT 1
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'
SELECT COUNT(*) FROM Citation WHERE paper_id = 'D12-1027'
SELECT cited_paper_id, COUNT(*) as num_citations FROM Citation GROUP BY cited_paper_id ORDER BY num_citations DESC LIMIT 1
SELECT cited_paper_id, COUNT(*) as num_citations FROM Citation GROUP BY cited_paper_id ORDER BY num_citations DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.title ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1
SELECT cited_paper_id, COUNT(*) as citation_count FROM Citation GROUP BY cited_paper_id ORDER BY citation_count DESC LIMIT 10
SELECT T2.title ,  count(T1.cited_paper_id) FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id ORDER BY count(T1.cited_paper_id) DESC LIMIT 10
SELECT count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown , Kathleen'
SELECT count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id = T2.paper_id JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown , Kathleen'
SELECT count(DISTINCT T1.cited_paper_id) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name  =  'Mckeown , Kathleen'
SELECT count(DISTINCT T1.cited_paper_id) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name  =  'Mckeown , Kathleen'
SELECT T3.name, T1.citation_count FROM (SELECT T1.author_id, COUNT(*) as citation_count FROM Author_list AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.author_id) AS T1 JOIN Author AS T3 ON T1.author_id = T3.author_id ORDER BY T1.citation_count DESC LIMIT 1
SELECT T3.name ,  count(*) FROM Author_list AS T1 JOIN Citation AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T1.author_id  =  T3.author_id GROUP BY T3.name ORDER BY count(*) DESC LIMIT 1
SELECT T1.venue ,  T1.year FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name  =  'Mckeown , Kathleen'
SELECT T1.venue ,  T1.year FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name  =  'Mckeown , Kathleen'
SELECT DISTINCT T1.venue ,  T1.year FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  'Columbia University'
SELECT T1.venue, T1.year FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Columbia University'
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.name ORDER BY count(T2.paper_id) DESC LIMIT 1
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id = T2.author_id JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.name ORDER BY count(T2.paper_id) DESC LIMIT 1
SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id JOIN Paper AS T3 ON T2.paper_id  =  T3.paper_id WHERE T3.year  =  2009 GROUP BY T1.name ORDER BY count(T2.paper_id) DESC LIMIT 3
SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id JOIN Paper AS T3 ON T2.paper_id  =  T3.paper_id WHERE T3.year  =  2009 GROUP BY T1.name ORDER BY count(T2.paper_id) DESC LIMIT 3
SELECT count(DISTINCT T1.paper_id) FROM Author_list AS T1 JOIN Affiliation AS T2 ON T1.affiliation_id  =  T2.affiliation_id JOIN Paper AS T3 ON T1.paper_id  =  T3.paper_id WHERE T2.name  =  'Columbia University' AND T3.year <= 2009
SELECT count(DISTINCT T1.paper_id) FROM Author_list AS T1 JOIN Affiliation AS T2 ON T1.affiliation_id  =  T2.affiliation_id JOIN Paper AS T3 ON T1.paper_id  =  T3.paper_id WHERE T2.name  =  'Columbia University' AND T3.year <= 2009
SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T1.year BETWEEN 2000 AND 2009 AND T3.name = 'Stanford University'
SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  'Stanford University' AND T1.year BETWEEN 2000 AND 2009
SELECT T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.title ORDER BY COUNT(T2.author_id) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.title ORDER BY COUNT(T2.author_id) DESC LIMIT 1
SELECT count(DISTINCT T2.author_id) FROM Author_list AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T1.author_id  =  T3.author_id WHERE T3.name  =  'Mckeown , Kathleen' AND T1.author_id != T2.author_id
SELECT count(DISTINCT T2.author_id)  FROM Author AS T1  JOIN Author_list AS T2 ON T1.author_id = T2.author_id  JOIN Author_list AS T3 ON T2.paper_id = T3.paper_id  WHERE T1.name = 'Mckeown , Kathleen' AND T3.author_id != T1.author_id
SELECT T4.name, COUNT(*) FROM Author_list AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T1.author_id  =  T3.author_id JOIN Author AS T4 ON T2.author_id  =  T4.author_id WHERE T3.name  =  'Mckeown , Kathleen' AND T1.author_id != T2.author_id GROUP BY T4.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T3.name FROM (SELECT T2.author_id, COUNT(*) AS count FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id WHERE T1.name  =  'Mckeown , Kathleen' GROUP BY T2.author_id) AS T4 JOIN Author AS T3 ON T4.author_id  =  T3.author_id ORDER BY T4.count DESC LIMIT 1
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)
SELECT T1.name  FROM Affiliation AS T1  JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T1.address LIKE '%China%'  GROUP BY T2.affiliation_id  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE '%China%' GROUP BY T1.name ORDER BY count(T2.paper_id) DESC LIMIT 1
SELECT count(paper_id) ,  venue ,  year FROM Paper GROUP BY venue ,  year
SELECT count(*) ,  venue ,  year FROM Paper GROUP BY venue ,  year
SELECT count(T1.paper_id) ,  T2.name FROM Author_list AS T1 JOIN Affiliation AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T2.name
SELECT count(T1.paper_id) ,  T2.name FROM Author_list AS T1 JOIN Affiliation AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T2.name
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.title HAVING count(*) > 50
SELECT T1.title  FROM Paper AS T1  JOIN Citation AS T2  ON T1.paper_id = T2.paper_id  GROUP BY T1.title  HAVING count(*) > 50
SELECT count(*) FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Citation AS T2 ON T1.paper_id  =  T2.cited_paper_id GROUP BY T1.author_id HAVING count(*)  >  50)
SELECT count(*) FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Citation AS T2 ON T1.paper_id  =  T2.cited_paper_id GROUP BY T1.author_id HAVING count(*)  >  50)
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id JOIN Paper AS T3 ON T2.paper_id  =  T3.paper_id WHERE T3.venue  =  'NAACL' AND T3.year  =  2009 INTERSECT SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id JOIN Paper AS T3 ON T2.paper_id  =  T3.paper_id WHERE T3.venue  =  'ACL' AND T3.year  =  2009
SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id JOIN Paper AS T3 ON T2.paper_id  =  T3.paper_id WHERE T3.venue  =  'NAACL' AND T3.year  =  2009 INTERSECT SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id JOIN Paper AS T3 ON T2.paper_id  =  T3.paper_id WHERE T3.venue  =  'ACL' AND T3.year  =  2009
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id  =  Paper.paper_id WHERE Paper.venue  =  'ACL')
SELECT name FROM Author WHERE author_id NOT IN (SELECT author_id FROM Author_list JOIN Paper ON Author_list.paper_id  =  Paper.paper_id WHERE Paper.venue  =  'ACL')
SELECT COUNT(*) FROM conference
SELECT COUNT(*) FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT T1.Conference_Name ,  count(T2.Conference_ID) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_Name
SELECT Conference_Name, COUNT(Conference_ID) FROM conference GROUP BY Conference_Name
SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year
SELECT Year, COUNT(DISTINCT Conference_ID) as Conferences FROM conference GROUP BY Year
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Conference_ID) ASC LIMIT 1
SELECT Year FROM conference GROUP BY Year ORDER BY count(Conference_ID) ASC LIMIT 1
SELECT Location FROM conference GROUP BY Location HAVING count(*) >= 2
SELECT Location FROM conference GROUP BY Location HAVING count(Conference_ID) >= 2
SELECT Institution_Name, Location, Founded FROM institution
SELECT Institution_Name, Location, Founded FROM institution
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1
SELECT T1.Institution_Name ,  count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Founded > 1800 GROUP BY T1.Institution_ID
SELECT T1.Institution_ID ,  count(T2.staff_ID) ,  GROUP_CONCAT(T2.name) FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Founded > 1800 GROUP BY T1.Institution_ID
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT name FROM staff WHERE Age > (SELECT avg(Age) FROM staff)
SELECT name FROM staff WHERE Age > (SELECT avg(Age) FROM staff)
SELECT max(Age) ,  min(Age) FROM staff AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Location  =  'United States'
SELECT max(Age) ,  min(Age) FROM staff
SELECT DISTINCT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID JOIN staff AS T3 ON T2.staff_ID  =  T3.staff_ID WHERE T3.Nationality  =  'Canada'
SELECT DISTINCT T1.Conference_Name  FROM conference AS T1  JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID  JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID  WHERE T3.Nationality = 'Canada'
SELECT name FROM staff WHERE staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role  =  'speaker') AND staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role  =  'sponsor')
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID  =  T2.staff_ID WHERE T2.role  =  'speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID  =  T2.staff_ID WHERE T2.role  =  'sponsor'
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID  =  T2.staff_ID JOIN conference AS T3 ON T2.Conference_ID  =  T3.Conference_ID WHERE T3.Conference_Name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID  =  T2.staff_ID JOIN conference AS T3 ON T2.Conference_ID  =  T3.Conference_ID WHERE T3.Conference_Name  =  'Naccl'
SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID  =  T2.staff_ID JOIN conference AS T3 ON T2.Conference_ID  =  T3.Conference_ID WHERE T3.Conference_Name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID  =  T2.staff_ID JOIN conference AS T3 ON T2.Conference_ID  =  T3.Conference_ID WHERE T3.Conference_Name  =  'NACCL'
SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Year = 2003 OR T3.Year = 2004
SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Year IN (2003, 2004)
SELECT T1.Conference_Name, T1.Year, count(T2.staff_ID)  FROM conference AS T1  JOIN conference_participation AS T2  ON T1.Conference_ID = T2.Conference_ID  GROUP BY T1.Conference_ID, T1.Conference_Name, T1.Year
SELECT T1.Conference_ID ,  T1.Conference_Name ,  T1.Year ,  count(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_ID, T1.Conference_Name, T1.Year
SELECT T1.Conference_Name  FROM conference AS T1  JOIN conference_participation AS T2  ON T1.Conference_ID  =  T2.Conference_ID  GROUP BY T1.Conference_Name  ORDER BY count(*) DESC  LIMIT 2
SELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_Name ORDER BY count(*) DESC LIMIT 2
SELECT name ,  Nationality FROM staff WHERE staff_ID NOT IN (SELECT T1.staff_ID FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID WHERE T2.Conference_Name  =  'ACL')
SELECT name ,  Nationality FROM staff WHERE staff_ID NOT IN (SELECT T1.staff_ID FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID WHERE T2.Conference_Name  =  'ACL')
SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT T1.Institution_ID FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID JOIN conference_participation AS T3 ON T2.staff_ID = T3.staff_ID JOIN conference AS T4 ON T3.Conference_ID = T4.Conference_ID WHERE T4.Year = 2004)
SELECT Institution_Name, Location FROM institution WHERE Institution_ID NOT IN (SELECT T1.Institution_ID FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID JOIN conference_participation AS T3 ON T2.staff_ID = T3.staff_ID JOIN conference AS T4 ON T3.Conference_ID = T4.Conference_ID WHERE T4.Year = 2004)
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT avg(age) FROM PilotSkills) ORDER BY age
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT avg(age) FROM PilotSkills) ORDER BY age ASC
SELECT * FROM PilotSkills WHERE age < 30
SELECT * FROM PilotSkills WHERE age < 30
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age < 35 AND T2.plane_name = 'Piper Cub'
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'
SELECT COUNT(DISTINCT location) FROM Hangar
SELECT COUNT(DISTINCT location) FROM Hangar
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32
SELECT COUNT(*) FROM PilotSkills WHERE age > 40
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40
SELECT COUNT(plane_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35
SELECT COUNT(*)  FROM PilotSkills  JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name  WHERE PilotSkills.plane_name = 'B-52 Bombers' AND PilotSkills.age < 35
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1
SELECT count(DISTINCT T1.pilot_name) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Chicago'
SELECT count(DISTINCT T1.pilot_name) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills
SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'
SELECT count(T1.plane_name) FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.pilot_name = 'Smith'
SELECT COUNT(DISTINCT PilotSkills.plane_name)  FROM PilotSkills  WHERE age > 40
SELECT COUNT(DISTINCT PilotSkills.plane_name)  FROM PilotSkills  WHERE age > 40
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT location, plane_name FROM Hangar ORDER BY plane_name
SELECT location, plane_name FROM Hangar ORDER BY plane_name
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name ASC
SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'B-52 Bomber'
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'B-52 Bomber'
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'B-52 Bomber'
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'B-52 Bomber'
SELECT AVG(age), MIN(age) FROM PilotSkills
SELECT AVG(age), MIN(age) FROM PilotSkills
SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Boston'
SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Austin') INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name IN (SELECT plane_name FROM Hangar WHERE location = 'Boston')
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
SELECT AVG(age), plane_name FROM PilotSkills GROUP BY plane_name
SELECT AVG(age), plane_name FROM PilotSkills GROUP BY plane_name
SELECT count(*) ,  plane_name FROM Hangar GROUP BY plane_name
SELECT COUNT(*), plane_name FROM Hangar GROUP BY plane_name
SELECT T1.plane_name, T1.pilot_name FROM PilotSkills AS T1 JOIN (SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name) AS T2 ON T1.plane_name = T2.plane_name AND T1.age = T2.max_age ORDER BY T1.plane_name
SELECT T1.plane_name, T2.pilot_name  FROM Hangar AS T1  JOIN (     SELECT plane_name, pilot_name, MAX(age) as max_age      FROM PilotSkills      GROUP BY plane_name ) AS T2  ON T1.plane_name = T2.plane_name  ORDER BY T1.plane_name
SELECT T1.pilot_name, T1.plane_name FROM PilotSkills AS T1 JOIN (SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name) AS T2 ON T1.plane_name = T2.plane_name AND T1.age = T2.max_age
SELECT T1.plane_name ,  T2.pilot_name  FROM Hangar AS T1  JOIN PilotSkills AS T2  ON T1.plane_name  =  T2.plane_name  GROUP BY T1.plane_name  HAVING T2.age  =  max(T2.age)
SELECT max(age) ,  pilot_name FROM PilotSkills GROUP BY pilot_name
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name
SELECT count(T2.pilot_name) ,  avg(T2.age) ,  T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T1.location
SELECT T1.location ,  count(DISTINCT T2.pilot_name) ,  avg(T2.age) FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T1.location
SELECT Hangar.plane_name, COUNT(PilotSkills.pilot_name)  FROM PilotSkills  JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name  GROUP BY Hangar.plane_name  HAVING avg(PilotSkills.age) < 35
SELECT PilotSkills.plane_name, COUNT(PilotSkills.pilot_name)  FROM PilotSkills  JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name  GROUP BY PilotSkills.plane_name  HAVING avg(PilotSkills.age) < 35
SELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T2.age = (SELECT min(age) FROM PilotSkills)
SELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.age  =  (SELECT min(age) FROM PilotSkills)
SELECT PilotSkills.pilot_name, PilotSkills.age FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Austin'
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'
SELECT DISTINCT pilot_name FROM PilotSkills WHERE age  >  (SELECT MAX(age) FROM PilotSkills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name ASC
SELECT pilot_name FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name
SELECT count(pilot_name) FROM PilotSkills WHERE age  <  (SELECT min(age) FROM PilotSkills WHERE plane_name  =  'F-14 Fighter')
SELECT count(*) FROM PilotSkills WHERE age  <  (SELECT min(age) FROM PilotSkills WHERE plane_name  =  'F-14 Fighter')
SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
SELECT count(DISTINCT pilot_name) FROM PilotSkills WHERE age  >  (SELECT age FROM PilotSkills WHERE plane_name  =  'Piper Cub')
SELECT count(*) FROM PilotSkills WHERE age > (SELECT min(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')
SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1
SELECT Area_km, Government_website FROM district ORDER BY Population ASC LIMIT 1
SELECT Name ,  Population FROM district WHERE Area_km  >  (SELECT avg(Area_km) FROM district)
SELECT max(Area_km) ,  avg(Area_km) FROM district
SELECT SUM(Population) FROM district WHERE Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3)
SELECT District_ID, Name, Government_website FROM district ORDER BY Population
SELECT Name FROM district WHERE Government_website LIKE '%.gov%'
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000
SELECT Name, Speach_title FROM spokesman
SELECT AVG(Points), AVG(Age) FROM spokesman WHERE Rank_position = 1
SELECT Name, Points FROM spokesman WHERE Age < 40
SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1
SELECT Name FROM spokesman WHERE Points < (SELECT avg(Points) FROM spokesman)
SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID GROUP BY T2.District_ID ORDER BY count(T2.Spokesman_ID) DESC LIMIT 1
SELECT DISTINCT T1.Name FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T2.Start_year < 2004
SELECT count(T1.Spokesman_ID) ,  T2.Name FROM spokesman_district AS T1 JOIN district AS T2 ON T1.District_ID  =  T2.District_ID GROUP BY T2.Name
SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID JOIN spokesman AS T3 ON T2.Spokesman_ID  =  T3.Spokesman_ID WHERE T3.Rank_position  =  1 INTERSECT SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID JOIN spokesman AS T3 ON T2.Spokesman_ID  =  T3.Spokesman_ID WHERE T3.Rank_position  =  2
SELECT Name FROM district WHERE District_ID IN (SELECT District_ID FROM spokesman_district GROUP BY District_ID HAVING count(*) > 1)
SELECT COUNT(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
SELECT sum(T1.Population) ,  avg(T1.Population) FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID WHERE T2.District_ID IS NOT NULL
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1
SELECT title FROM Sculptures WHERE location = 'gallery 226'
SELECT title FROM Sculptures WHERE location = '226'
SELECT title, location FROM Paintings
SELECT title, location FROM Paintings
SELECT title, location FROM Sculptures
SELECT title, location FROM Sculptures
SELECT medium FROM Paintings WHERE paintingID = 80
SELECT medium FROM Paintings WHERE paintingID = 80
SELECT fname, lname FROM Artists WHERE birthYear > 1850
SELECT fname, lname FROM Artists WHERE birthYear > 1850
SELECT title, year FROM Sculptures WHERE location != 'gallery 226'
SELECT title, year FROM Sculptures WHERE location != 'gallery 226'
SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900
SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900
SELECT DISTINCT T1.birthYear FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920
SELECT DISTINCT T1.birthYear FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920
SELECT fname, lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)
SELECT fname, lname FROM Artists WHERE (deathYear - birthYear) = (SELECT MAX(deathYear - birthYear) FROM Artists)
SELECT (deathYear - birthYear) as age FROM Artists ORDER BY age ASC LIMIT 1
SELECT MIN(deathYear - birthYear) FROM Artists
SELECT fname, (deathYear - birthYear) as age FROM Artists ORDER BY age DESC LIMIT 1
SELECT fname, (deathYear - birthYear) as age FROM Artists ORDER BY age DESC LIMIT 1
SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240'
SELECT COUNT(*) FROM Paintings WHERE location = 'gallery 240'
SELECT COUNT(paintingID) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)
SELECT COUNT(*) FROM Paintings WHERE painterID = (SELECT artistID FROM Artists ORDER BY (deathYear - birthYear) DESC LIMIT 1)
SELECT T1.title, T1.year FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = 'Mary'
SELECT T1.title, T1.year FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = 'Mary'
SELECT T1.width_mm FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.birthYear < 1850
SELECT T1.width_mm FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.birthYear < 1850
SELECT T1.location, T1.medium FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = 'Pablo'
SELECT T1.location, T1.medium FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = 'Pablo'
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID IN (SELECT sculptorID FROM Sculptures)
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings INTERSECT SELECT sculptorID FROM Sculptures)
SELECT T1.fname ,  T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  'oil' INTERSECT SELECT T1.fname ,  T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  'lithographic'
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'lithographic'
SELECT T1.birthYear FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884 AND T2.mediumOn = 'canvas'
SELECT T1.birthYear FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884
SELECT DISTINCT T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' AND T2.location = 'gallery 241'
SELECT DISTINCT T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' AND T2.location = 'gallery 241'
SELECT count(*) ,  medium FROM Paintings GROUP BY medium UNION SELECT count(*) ,  medium FROM Sculptures GROUP BY medium
SELECT Paintings.medium, COUNT(*) FROM Paintings GROUP BY Paintings.medium UNION ALL SELECT Sculptures.medium, COUNT(*) FROM Sculptures GROUP BY Sculptures.medium
SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium
SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium
SELECT count(paintingID) ,  location FROM Paintings WHERE year  <  1900 GROUP BY location
SELECT count(*) ,  location FROM Paintings WHERE year  <  1900 GROUP BY location
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'
SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910
SELECT DISTINCT painterID FROM Paintings WHERE medium = 'oil' AND location = 'gallery 240'
SELECT DISTINCT T1.artistID FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' AND T2.location = 'gallery 240'
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE mediumOn = 'canvas')
SELECT DISTINCT title FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE mediumOn = 'canvas')
SELECT DISTINCT paintingID FROM Paintings WHERE year < (SELECT year FROM Paintings WHERE location = 'gallery 240')
SELECT DISTINCT paintingID FROM Paintings WHERE year  <  (SELECT min(year) FROM Paintings WHERE location  =  '240')
SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1
SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1
SELECT fname, lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'
SELECT DISTINCT title FROM Paintings ORDER BY title ASC
SELECT DISTINCT title FROM Paintings ORDER BY title ASC
SELECT DISTINCT title FROM Paintings ORDER BY length_mm
SELECT DISTINCT title FROM Paintings ORDER BY height_mm ASC
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950
SELECT T1.title, T2.title FROM Paintings AS T1 JOIN Artists AS T3 ON T1.painterID = T3.artistID JOIN Sculptures AS T2 ON T2.sculptorID = T3.artistID WHERE T3.artistID = 222
SELECT T1.title, T2.title FROM Paintings AS T1 JOIN Artists AS T3 ON T1.painterID = T3.artistID JOIN Sculptures AS T2 ON T2.sculptorID = T3.artistID WHERE T3.artistID = 222
SELECT T1.artistID FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year < 1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1
SELECT T1.artistID FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year < 1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1
SELECT T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T1.fname ORDER BY count(*) DESC LIMIT 1
SELECT T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T1.fname ORDER BY count(*) DESC LIMIT 1
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT DISTINCT location FROM Paintings WHERE mediumOn IN ('on panel', 'on canvas')
SELECT DISTINCT location FROM Paintings WHERE mediumOn IN ('panels', 'canvas')
SELECT location FROM Paintings WHERE year  <  1885 UNION SELECT location FROM Paintings WHERE year  >  1930
SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930
SELECT AVG(height_mm) ,  AVG(width_mm) FROM Paintings WHERE medium  =  'oil' AND location  =  'gallery 241'
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'gallery 241'
SELECT max(height_mm), paintingID FROM Paintings WHERE year < 1900 GROUP BY paintingID
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1
SELECT year, max(height_mm), max(width_mm) FROM Paintings GROUP BY year
SELECT year, max(height_mm), max(width_mm) FROM Paintings GROUP BY year
SELECT avg(T1.height_mm), avg(T1.width_mm), T2.lname, T2.fname FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID GROUP BY T2.artistID ORDER BY T2.lname, T2.fname
SELECT avg(T1.height_mm), avg(T1.width_mm), T2.lname, T2.fname FROM Paintings AS T1 JOIN Artists AS T2 ON T1.painterID = T2.artistID GROUP BY T2.artistID, T2.lname, T2.fname ORDER BY T2.lname, T2.fname
SELECT T1.fname, COUNT(*) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.fname HAVING COUNT(*) >= 2
SELECT T1.fname ,  count(*) FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T1.fname HAVING count(*) >= 2
SELECT deathYear FROM Artists WHERE artistID NOT IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING count(*) > 3)
SELECT lname, fname, deathYear FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings GROUP BY painterID HAVING count(*) < 4)
SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)
SELECT deathYear FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures GROUP BY sculptorID ORDER BY COUNT(*) ASC LIMIT 1)
SELECT paintingID, height_mm FROM Paintings WHERE location = '240' ORDER BY width_mm DESC LIMIT 1
SELECT height_mm, paintingID FROM Paintings WHERE location = '240' ORDER BY width_mm DESC LIMIT 1
SELECT paintingID FROM Paintings WHERE year  <  (SELECT min(year) FROM Paintings WHERE location  =  'gallery 240')
SELECT paintingID FROM Paintings WHERE year  <  (SELECT min(year) FROM Paintings WHERE location  =  '240')
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT max(height_mm) FROM Paintings WHERE year > 1900)
SELECT paintingID FROM Paintings WHERE height_mm > (SELECT max(height_mm) FROM Paintings WHERE year > 1900)
SELECT T1.artistID, T1.lname, T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 3
SELECT T1.fname, T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' GROUP BY T1.artistID ORDER BY COUNT(T2.painterID) DESC LIMIT 1
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title
SELECT fname, lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)
SELECT fname ,  lname FROM Artists WHERE artistID IN (SELECT painterID FROM Paintings) AND artistID NOT IN (SELECT sculptorID FROM Sculptures)
SELECT DISTINCT location FROM Paintings WHERE year < 1885 EXCEPT SELECT DISTINCT location FROM Paintings WHERE mediumOn = 'canvas'
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas'
SELECT COUNT(*) FROM race
SELECT COUNT(*) FROM race
SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC
SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
SELECT Winning_driver FROM race WHERE Winning_driver NOT IN (SELECT Winning_driver FROM race WHERE Pole_Position  =  'Junior Strous')
SELECT Constructor FROM driver ORDER BY Age ASC
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20
SELECT MAX(Age), MIN(Age) FROM driver
SELECT max(Age), min(Age) FROM driver
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20
SELECT COUNT(DISTINCT Engine)  FROM driver  WHERE Age > 30 OR Age < 20
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID
SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID
SELECT T1.Driver_Name ,  count(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_Name
SELECT count(*) ,  T2.Driver_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T2.Driver_Name
SELECT T1.Age FROM driver AS T1 JOIN (SELECT Driver_ID, COUNT(*) as race_count FROM race GROUP BY Driver_ID ORDER BY race_count DESC LIMIT 1) AS T2 ON T1.Driver_ID = T2.Driver_ID
SELECT Age FROM driver WHERE Driver_ID = (SELECT Driver_ID FROM race GROUP BY Driver_ID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T1.Driver_Name, T1.Age FROM driver AS T1 WHERE T1.Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING COUNT(*) >= 2)
SELECT T1.Driver_Name, T1.Age FROM driver AS T1 WHERE T1.Driver_ID IN (SELECT Driver_ID FROM race GROUP BY Driver_ID HAVING count(*) >= 2)
SELECT DISTINCT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Age >= 26
SELECT DISTINCT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Age >= 26
SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti'
SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti'
SELECT Constructor ,  COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Constructor
SELECT Constructor, COUNT(DISTINCT Driver_ID) FROM driver GROUP BY Constructor
SELECT Engine FROM driver GROUP BY Engine ORDER BY count(*) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine ORDER BY count(*) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) >= 2
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(DISTINCT Driver_ID) > 1
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30
SELECT DISTINCT Constructor FROM driver WHERE Age < 20 AND Constructor IN (SELECT DISTINCT Constructor FROM driver WHERE Age > 30)
SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*) > 1
SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*) > 1
SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe') INTERSECT SELECT Driver_Name FROM driver WHERE Driver_ID IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'Carl Skerlong')
SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.Pole_Position  =  'James Hinchcliffe' INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.Pole_Position  =  'Carl Skerlong'
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position  =  'James Hinchcliffe')
SELECT Driver_Name FROM driver WHERE Driver_Name NOT IN (SELECT Winning_driver FROM race WHERE Pole_Position  =  'James Hinchcliffe')
SELECT COUNT(*) FROM languages
SELECT COUNT(*) FROM languages
SELECT name FROM languages ORDER BY name ASC
SELECT name FROM languages ORDER BY name ASC
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM countries ORDER BY overall_score DESC
SELECT name FROM countries ORDER BY overall_score DESC
SELECT AVG(justice_score) FROM countries
SELECT AVG(justice_score) FROM countries
SELECT max(health_score) ,  min(health_score) FROM countries WHERE name  !=  'Norway'
SELECT max(health_score) ,  min(health_score) FROM countries WHERE name  !=  'Norway'
SELECT COUNT(DISTINCT language_id) FROM official_languages
SELECT COUNT(DISTINCT language_id) FROM official_languages
SELECT name FROM countries ORDER BY education_score DESC
SELECT name FROM countries ORDER BY education_score DESC
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT T1.name ,  T2.name FROM countries AS T1 JOIN official_languages AS T3 ON T1.id  =  T3.country_id JOIN languages AS T2 ON T3.language_id  =  T2.id
SELECT T1.name ,  T2.name FROM countries AS T1 JOIN official_languages AS T3 ON T1.id  =  T3.country_id JOIN languages AS T2 ON T3.language_id  =  T2.id
SELECT T1.name ,  count(DISTINCT T2.country_id) FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T1.name
SELECT T1.name ,  count(DISTINCT T2.country_id) FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T1.name
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name HAVING count(T2.country_id) >= 2
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T1.name HAVING count(T2.country_id) >= 2
SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  'English'
SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  'English'
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 3
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 3
SELECT T1.name ,  avg(T2.overall_score)  FROM languages AS T1  JOIN official_languages AS T3 ON T1.id  =  T3.language_id  JOIN countries AS T2 ON T3.country_id  =  T2.id  GROUP BY T1.name  ORDER BY avg(T2.overall_score) DESC
SELECT T1.name ,  avg(T2.overall_score)  FROM languages AS T1  JOIN official_languages AS T3 ON T1.id  =  T3.language_id  JOIN countries AS T2 ON T3.country_id  =  T2.id  GROUP BY T1.name  ORDER BY avg(T2.overall_score) DESC
SELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
SELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T2.country_id ORDER BY count(*) DESC LIMIT 1
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  >  95 INTERSECT SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  <  90
SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  >  95 INTERSECT SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  <  90
SELECT DISTINCT country, town_city FROM Addresses
SELECT country, town_city FROM Addresses
SELECT T1.property_id ,  T2.county_state_province FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id
SELECT T2.property_id ,  T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id
SELECT feature_description FROM Features WHERE feature_name = 'rooftop'
SELECT feature_description FROM Features WHERE feature_name = 'rooftop'
SELECT T1.feature_name, T1.feature_description  FROM Features AS T1  WHERE T1.feature_id IN (     SELECT feature_id      FROM Property_Features      GROUP BY feature_id      ORDER BY COUNT(*) DESC      LIMIT 1)
SELECT T1.feature_name, T1.feature_description  FROM Features AS T1  WHERE T1.feature_id = (     SELECT T2.feature_id      FROM Property_Features AS T2      GROUP BY T2.feature_id      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT MIN(room_count) FROM Properties
SELECT MIN(room_count) FROM Properties
SELECT COUNT(*) FROM Properties WHERE garage_yn = 1 OR parking_lots = 1
SELECT COUNT(property_id) FROM Properties WHERE parking_lots = 1 OR garage_yn = '1'
SELECT DISTINCT age_category_description FROM Users  JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code  WHERE other_user_details LIKE '%Mother%'
SELECT T2.age_category_description  FROM Users AS T1  JOIN Ref_Age_Categories AS T2  ON T1.age_category_code = T2.age_category_code  WHERE T1.other_user_details LIKE '%Mother%'
SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.first_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T2.owner_user_id ORDER BY count(*) DESC LIMIT 1
SELECT avg(T1.room_count)  FROM Properties AS T1  JOIN Property_Features AS T2 ON T1.property_id = T2.property_id  JOIN Features AS T3 ON T2.feature_id = T3.feature_id  WHERE T3.feature_name = 'garden'
SELECT avg(room_count) FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id = T2.property_id JOIN Features AS T3 ON T2.feature_id = T3.feature_id WHERE T3.feature_name = 'garden'
SELECT DISTINCT T1.town_city  FROM Addresses AS T1  JOIN Properties AS T2 ON T1.address_id = T2.property_address_id  JOIN Property_Features AS T3 ON T2.property_id = T3.property_id  JOIN Features AS T4 ON T3.feature_id = T4.feature_id  WHERE T4.feature_name = 'swimming pool'
SELECT DISTINCT T1.town_city  FROM Addresses AS T1  JOIN Properties AS T2 ON T1.address_id = T2.property_address_id  JOIN Property_Features AS T3 ON T2.property_id = T3.property_id  JOIN Features AS T4 ON T3.feature_id = T4.feature_id  WHERE T4.feature_name = 'swimming pool'
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1
SELECT AVG(room_count) FROM Properties
SELECT avg(count) FROM (SELECT count(room_number) as count FROM Rooms GROUP BY property_id) as room_counts
SELECT COUNT(DISTINCT room_size) FROM Rooms
SELECT COUNT(DISTINCT room_size) FROM Rooms
SELECT T1.user_id, T1.search_string FROM User_Searches AS T1 WHERE T1.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2)
SELECT user_id, search_seq FROM User_Searches WHERE user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2)
SELECT MAX(search_datetime) FROM User_Searches
SELECT MAX(search_datetime) FROM User_Searches
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC
SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(property_id) <= 2))
SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) <= 2))
SELECT T1.user_category_code ,  T1.user_id  FROM Users AS T1  JOIN User_Searches AS T2  ON T1.user_id  =  T2.user_id  GROUP BY T1.user_id, T1.user_category_code  HAVING count(*) = 1
SELECT T1.user_id ,  T1.user_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id, T1.user_category_code HAVING count(*)  =  1
SELECT T3.age_category_description FROM Ref_Age_Categories AS T3 JOIN Users AS T1 ON T1.age_category_code = T3.age_category_code WHERE T1.user_id = (SELECT T2.user_id FROM User_Searches AS T2 ORDER BY T2.search_datetime ASC LIMIT 1)
SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id = T2.user_id ORDER BY T2.search_datetime ASC LIMIT 1
SELECT login_name FROM Users WHERE age_category_code = 'senior' ORDER BY first_name
SELECT login_name FROM Users WHERE age_category_code = 'senior' ORDER BY first_name ASC
SELECT count(*) FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = 1
SELECT count(*) FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T2.is_buyer = 1
SELECT date_registered FROM Users WHERE login_name = 'ratione'
SELECT date_registered FROM Users WHERE login_name = 'ratione'
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = 1
SELECT T2.line_1_number_building, T2.line_2_number_street, T2.town_city FROM Users AS T1 JOIN Addresses AS T2 ON T1.user_address_id = T2.address_id WHERE T1.age_category_code = 'Senior Citizens'
SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.age_category_code  =  'senior'
SELECT count(*) FROM (SELECT T1.property_id FROM Properties AS T1 JOIN Property_Features AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id HAVING count(*)  >=  2) AS T3
SELECT COUNT(DISTINCT property_id) FROM Property_Features GROUP BY property_id HAVING COUNT(feature_id) >= 2
SELECT property_id, COUNT(*) FROM Property_Photos GROUP BY property_id
SELECT count(*) ,  T1.property_id FROM Property_Photos AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id
SELECT T3.user_id, count(T1.property_id) FROM Property_Photos AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id JOIN Users AS T3 ON T2.owner_user_id  =  T3.user_id GROUP BY T3.user_id
SELECT T1.owner_user_id ,  count(T2.property_id) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id
SELECT sum(price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id = T2.user_id WHERE T2.user_category_code IN ('single mothers', 'students')
SELECT sum(price_max) FROM Properties JOIN Users ON Properties.owner_user_id = Users.user_id JOIN Ref_User_Categories ON Users.user_category_code = Ref_User_Categories.user_category_code WHERE Ref_User_Categories.user_category_description = 'single mothers' OR Ref_User_Categories.user_category_description = 'students'
SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.datestamp
SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.datestamp
SELECT T1.property_type_description ,  T1.property_type_code  FROM Ref_Property_Types AS T1  WHERE T1.property_type_code  =  (     SELECT property_type_code      FROM Properties      GROUP BY property_type_code      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT T1.property_type_code ,  T2.property_type_description  FROM Properties AS T1  JOIN Ref_Property_Types AS T2  ON T1.property_type_code  =  T2.property_type_code  GROUP BY T1.property_type_code, T2.property_type_description  ORDER BY count(*) DESC  LIMIT 1
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'
SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code = 'Over 60'
SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size
SELECT count(*) ,  room_size FROM Rooms GROUP BY room_size
SELECT T2.country FROM Users AS T1 JOIN Addresses AS T2 ON T1.user_address_id = T2.address_id WHERE T1.first_name = 'Robbie'
SELECT Addresses.country FROM Users JOIN Addresses ON Users.user_address_id = Addresses.address_id WHERE Users.first_name = 'Robbie'
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id WHERE T2.property_address_id = T1.user_address_id
SELECT Users.first_name, Users.middle_name, Users.last_name  FROM Users  JOIN Properties ON Users.user_id = Properties.owner_user_id  WHERE Users.user_address_id = Properties.property_address_id
SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties)
SELECT search_string FROM User_Searches WHERE user_id NOT IN (SELECT owner_user_id FROM Properties)
SELECT U.last_name, U.user_id FROM Users U WHERE U.user_id IN (SELECT P.owner_user_id FROM Properties P GROUP BY P.owner_user_id HAVING COUNT(*) >= 2) AND U.user_id IN (SELECT S.user_id FROM User_Searches S GROUP BY S.user_id HAVING COUNT(*) <= 2)
SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id, T1.last_name HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id, T3.last_name HAVING count(*)  >=  2
SELECT COUNT(*) FROM bike WHERE weight > 780
SELECT product_name, weight FROM bike ORDER BY price ASC
SELECT heat, name, nation FROM cyclist
SELECT max(weight), min(weight) FROM bike
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'
SELECT name, result FROM cyclist WHERE nation != 'Russia'
SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year > 2015
SELECT T1.id, T1.product_name FROM bike AS T1 WHERE T1.id IN (SELECT bike_id FROM cyclists_own_bikes GROUP BY bike_id HAVING count(*) >= 4)
SELECT T1.id, T1.name FROM cyclist AS T1 JOIN (SELECT cyclist_id, COUNT(*) AS bike_count FROM cyclists_own_bikes GROUP BY cyclist_id) AS T2 ON T1.id = T2.cyclist_id ORDER BY T2.bike_count DESC LIMIT 1
SELECT DISTINCT T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id  =  T3.id WHERE T3.nation  =  'Russia' OR T3.nation  =  'Great Britain'
SELECT COUNT(DISTINCT heat) FROM cyclist
SELECT COUNT(*) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)
SELECT DISTINCT T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id  =  T3.id WHERE T3.result < '4:21.558'
SELECT T1.product_name, T1.price FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.name = 'Bradley Wiggins' INTERSECT SELECT T1.product_name, T1.price FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.name = 'Antonio Tauler'
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name LIKE '%racing%'))
SELECT product_name FROM bike WHERE material LIKE '%fiber%'
SELECT cyclist_id, COUNT(bike_id) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id
SELECT Flavor, Food, MAX(Price) FROM goods WHERE Food = 'cake'
SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1
SELECT Flavor, Food, MIN(Price) FROM goods WHERE Food = 'cookie' GROUP BY Flavor, Food
SELECT Id, Flavor FROM goods WHERE Food = 'cookie' ORDER BY Price ASC LIMIT 1
SELECT Id FROM goods WHERE Flavor = 'apple'
SELECT Id FROM goods WHERE Flavor = 'apple'
SELECT Id FROM goods WHERE Price < 3
SELECT Id FROM goods WHERE Price < 3
SELECT DISTINCT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item = T4.Id WHERE T4.Flavor = 'lemon' AND T4.Food = 'cake'
SELECT DISTINCT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item = T4.Id WHERE T4.Flavor = 'lemon' AND T4.Food = 'cake'
SELECT T1.Food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.Food
SELECT T2.Food ,  count(DISTINCT T1.CustomerId) FROM receipts AS T1 JOIN items AS T3 ON T1.ReceiptNumber  =  T3.Receipt JOIN goods AS T2 ON T3.Item  =  T2.Id GROUP BY T2.Food
SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id  =  T2.CustomerId GROUP BY T1.Id HAVING count(*)  >=  15
SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id  =  T2.CustomerId GROUP BY T1.Id HAVING count(*)  >=  15
SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*) > 10)
SELECT LastName FROM customers WHERE Id IN (SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*) > 10)
SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'Cake'
SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'cake'
SELECT Flavor FROM goods WHERE Food = 'Croissant'
SELECT DISTINCT Flavor FROM goods WHERE Food = 'croissant'
SELECT DISTINCT T2.Food FROM goods AS T2 JOIN items AS T1 ON T2.Id = T1.Item JOIN receipts AS T3 ON T1.Receipt = T3.ReceiptNumber WHERE T3.CustomerId = 15
SELECT DISTINCT T2.Food FROM goods AS T2 JOIN items AS T1 ON T2.Id = T1.Item JOIN receipts AS T3 ON T1.Receipt = T3.ReceiptNumber WHERE T3.CustomerId = 15
SELECT Food, AVG(Price), MAX(Price), MIN(Price) FROM goods GROUP BY Food
SELECT AVG(Price), MIN(Price), MAX(Price), Food FROM goods GROUP BY Food
SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cake') INTERSECT SELECT Receipt FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cookie')
SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.Item  =  T2.Id WHERE T2.Food  =  'cakes' INTERSECT SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.Item  =  T2.Id WHERE T2.Food  =  'cookies'
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId = T2.Id JOIN items AS T3 ON T1.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item = T4.Id WHERE T2.LastName = 'LOGAN' AND T4.Food = 'Croissant'
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.Id JOIN items AS T3 ON T1.ReceiptNumber  =  T3.Receipt JOIN goods AS T4 ON T3.Item  =  T4.Id WHERE T2.LastName  =  'Logan' AND T4.Food  =  'croissant'
SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.Receipt JOIN goods AS T3 ON T2.Item  =  T3.Id WHERE T3.Price  =  (SELECT max(Price) FROM goods)
SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.Receipt JOIN goods AS T3 ON T2.Item  =  T3.Id WHERE T3.Price  =  (SELECT max(Price) FROM goods)
SELECT T2.Food FROM items AS T1 JOIN goods AS T2 ON T1.Item  =  T2.Id GROUP BY T1.Item ORDER BY count(*) ASC LIMIT 1
SELECT goods.Food FROM goods  JOIN items ON items.Item = goods.Id  GROUP BY goods.Food  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT COUNT(*) ,  Food FROM goods GROUP BY Food
SELECT count(*) ,  Food FROM goods GROUP BY Food
SELECT AVG(Price), Food FROM goods GROUP BY Food
SELECT AVG(Price), Food FROM goods GROUP BY Food
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5
SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10
SELECT Flavor FROM goods WHERE Food = 'cake' AND Price > 10
SELECT DISTINCT Id ,  Price FROM goods WHERE Price  <  (SELECT avg(Price) FROM goods)
SELECT DISTINCT Id ,  Price FROM goods WHERE Price  <  (SELECT avg(Price) FROM goods)
SELECT DISTINCT Id FROM goods WHERE Price  <  (SELECT MIN(Price) FROM goods WHERE Food  =  'Tart')
SELECT DISTINCT Id FROM goods WHERE Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Tart')
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.Receipt JOIN goods AS T3 ON T2.Item  =  T3.Id WHERE T3.Price > 13
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 13
SELECT T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.Receipt JOIN goods AS T3 ON T2.Item  =  T3.Id WHERE T3.Price > 15
SELECT T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.Receipt JOIN goods AS T3 ON T2.Item  =  T3.Id WHERE T3.Price > 15
SELECT Id FROM goods WHERE Id LIKE '%APP%'
SELECT Id FROM goods WHERE Id LIKE '%APP%'
SELECT Id, Price FROM goods WHERE Id LIKE '%70%'
SELECT Id, Price FROM goods WHERE Id LIKE '%70%'
SELECT LastName FROM customers ORDER BY LastName ASC
SELECT LastName FROM customers ORDER BY LastName
SELECT Id FROM goods ORDER BY Id
SELECT DISTINCT Id FROM goods ORDER BY Id
SELECT receipts.ReceiptNumber FROM receipts  JOIN items ON receipts.ReceiptNumber = items.Receipt  JOIN goods ON items.Item = goods.Id  JOIN customers ON receipts.CustomerId = customers.Id  WHERE (goods.Flavor = 'apple' AND goods.Food = 'pie') OR customers.Id = 12
SELECT T1.ReceiptNumber FROM receipts AS T1 LEFT JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt LEFT JOIN goods AS T3 ON T2.Item = T3.Id LEFT JOIN customers AS T4 ON T1.CustomerId = T4.Id WHERE (T3.Flavor = 'apple' AND T3.Food = 'pie') OR T4.Id = 12
SELECT ReceiptNumber ,  Date FROM receipts WHERE Date  =  (SELECT max(Date) FROM receipts)
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1
SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) UNION SELECT ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE goods.Price > 10
SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 10 UNION SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT min(Date) FROM receipts)
SELECT Id FROM goods WHERE Food IN ('Cookie', 'Cake') AND Price BETWEEN 3 AND 7
SELECT Id FROM goods WHERE (Food = 'Cookies' OR Food = 'Cakes') AND Price BETWEEN 3 AND 7
SELECT FirstName, LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY Date ASC LIMIT 1
SELECT FirstName, LastName FROM customers JOIN receipts ON customers.Id = receipts.CustomerId ORDER BY Date ASC LIMIT 1
SELECT AVG(Price) FROM goods WHERE Flavor IN ('blackberry', 'blueberry')
SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'
SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'
SELECT * FROM goods WHERE Flavor = 'cheese' ORDER BY Price ASC LIMIT 1
SELECT max(Price), min(Price), avg(Price), Flavor FROM goods GROUP BY Flavor ORDER BY Flavor
SELECT max(Price), min(Price), avg(Price), Flavor FROM goods GROUP BY Flavor ORDER BY Flavor
SELECT min(Price), max(Price), Food FROM goods GROUP BY Food ORDER BY Food
SELECT min(Price) ,  max(Price) ,  Food FROM goods GROUP BY Food ORDER BY Food
SELECT Date FROM receipts GROUP BY Date ORDER BY count(ReceiptNumber) DESC LIMIT 3
SELECT Date FROM receipts GROUP BY Date ORDER BY count(ReceiptNumber) DESC LIMIT 3
SELECT T1.Id, count(T2.ReceiptNumber) FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id ORDER BY count(T2.ReceiptNumber) DESC LIMIT 1
SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1
SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date
SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date
SELECT T1.FirstName, T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item = T4.Id WHERE T4.Flavor = 'apple' AND T4.Food = 'Tart'
SELECT T1.FirstName, T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item = T4.Id WHERE T4.Flavor = 'apple' AND T4.Food = 'Tarts'
SELECT Id FROM goods WHERE Food = 'Cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'Croissant')
SELECT Id FROM goods WHERE Food = 'cookies' AND Price < (SELECT MIN(Price) FROM goods WHERE Food = 'croissant')
SELECT Id FROM goods WHERE Food = 'Cakes' AND Price >= (SELECT avg(Price) FROM goods WHERE Food = 'Tart')
SELECT Id FROM goods WHERE Food = 'Cake' AND Price >= (SELECT avg(Price) FROM goods WHERE Food = 'Tart')
SELECT Id FROM goods WHERE Price > 2 * (SELECT avg(Price) FROM goods)
SELECT Id FROM goods WHERE Price > 2 * (SELECT avg(Price) FROM goods)
SELECT Id, Flavor, Food FROM goods ORDER BY Price
SELECT Id, Flavor, Food FROM goods ORDER BY Price
SELECT Id, Flavor FROM goods WHERE Food = 'Cakes' ORDER BY Flavor
SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Flavor
SELECT T1.Id FROM goods AS T1 WHERE T1.Flavor = 'chocolate' AND T1.Id NOT IN (SELECT Item FROM items GROUP BY Item HAVING count(*) > 10)
SELECT T1.Food FROM goods AS T1 JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Flavor = 'chocolate' GROUP BY T1.Food HAVING count(T2.Item) <= 10
SELECT Flavor FROM goods WHERE Food  =  'Cake' EXCEPT SELECT Flavor FROM goods WHERE Food  =  'Tart'
SELECT Flavor FROM goods WHERE Food = 'Cakes' AND Flavor NOT IN (SELECT Flavor FROM goods WHERE Food = 'Tart')
SELECT T2.Food FROM items AS T1 JOIN goods AS T2 ON T1.Item  =  T2.Id GROUP BY T2.Food ORDER BY count(*) DESC LIMIT 3
SELECT Item FROM items GROUP BY Item ORDER BY count(*) DESC LIMIT 3
SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item = T4.Id GROUP BY T1.Id HAVING sum(T4.Price) > 150
SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item = T4.Id GROUP BY T1.Id HAVING sum(T4.Price) > 150
SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id = T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt JOIN goods AS T4 ON T3.Item = T4.Id GROUP BY T1.Id HAVING avg(T4.Price) > 5
SELECT T1.Id FROM customers AS T1 JOIN receipts AS T2 ON T1.Id  =  T2.CustomerId JOIN items AS T3 ON T2.ReceiptNumber  =  T3.Receipt JOIN goods AS T4 ON T3.Item  =  T4.Id GROUP BY T1.Id HAVING avg(T4.Price)  >  5
SELECT T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id GROUP BY T1.Date HAVING sum(T3.Price) > 100
SELECT T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt JOIN goods AS T3 ON T2.Item = T3.Id GROUP BY T1.Date HAVING SUM(T3.Price) > 100
SELECT COUNT(*) FROM driver
SELECT COUNT(*) FROM driver
SELECT count(Driver_ID) ,  Make FROM driver WHERE Points  >  150 GROUP BY Make
SELECT Make, COUNT(*) FROM driver WHERE Points > 150 GROUP BY Make
SELECT AVG(Age), Make FROM driver GROUP BY Make
SELECT AVG(Age), Make FROM driver GROUP BY Make
SELECT AVG(Laps) FROM driver WHERE Age < 20
SELECT AVG(Laps) FROM driver WHERE Age < 20
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner
SELECT Make FROM team GROUP BY Make HAVING count(*) > 1
SELECT Make FROM team GROUP BY Make HAVING count(*) > 1
SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'
SELECT Make FROM team WHERE Car_Owner = 'Buddy Arrington'
SELECT max(Points), min(Points) FROM driver
SELECT max(Points), min(Points) FROM driver
SELECT COUNT(*) FROM driver WHERE Points < 150
SELECT COUNT(Driver_ID) FROM driver WHERE Points < 150
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT Driver ,  Country FROM driver
SELECT Driver, Country FROM driver
SELECT max(T1.Points) FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country WHERE T2.Capital  =  'Dublin'
SELECT max(T1.Points) FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country WHERE T2.Capital  =  'Dublin'
SELECT avg(T1.Age) FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country WHERE T2.Official_native_language  =  'English'
SELECT avg(T1.Age) FROM driver AS T1 JOIN country AS T2 ON T1.Country = T2.Country WHERE T2.Official_native_language = 'English'
SELECT DISTINCT Country FROM driver WHERE Points > 150
SELECT DISTINCT Country FROM country JOIN driver ON country.Country_Id = driver.Country_Id WHERE driver.Points > 150
SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country  =  T2.Country ORDER BY T2.Points DESC LIMIT 1
SELECT T2.Capital FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country WHERE T1.Points  =  (SELECT max(Points) FROM driver)
SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make
SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make
SELECT T1.Make FROM driver AS T1 JOIN team_driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Make ORDER BY count(T2.Driver_ID) DESC LIMIT 1
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Driver_ID) DESC LIMIT 1
SELECT T1.Make FROM driver AS T1 JOIN team_driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Make HAVING count(*)  >=  3
SELECT T1.Make FROM driver AS T1 JOIN team_driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Make HAVING count(*) >= 3
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT * FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT Country FROM driver WHERE Make  =  'Dodge' INTERSECT SELECT Country FROM driver WHERE Make  =  'Chevrolet'
SELECT Country FROM driver WHERE Make  =  'Dodge' INTERSECT SELECT Country FROM driver WHERE Make  =  'Chevrolet'
SELECT sum(Points), avg(Points) FROM driver
SELECT sum(Points), avg(Points) FROM driver
SELECT Country FROM country WHERE Country NOT IN (SELECT Country FROM driver)
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)
SELECT T1.Manager ,  T1.Sponsor FROM team AS T1 WHERE T1.Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T2.Manager ,  T2.Sponsor FROM team AS T2 WHERE T2.Team_ID = (SELECT T1.Team_ID FROM team_driver AS T1 GROUP BY T1.Team_ID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT Manager ,  Car_Owner FROM team WHERE Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING count(*) >= 2)
SELECT T1.Manager ,  T1.Car_Owner FROM team AS T1 WHERE T1.Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING count(Driver_ID) >= 2)
SELECT COUNT(*) FROM institution
SELECT COUNT(*) FROM institution
SELECT Name FROM institution ORDER BY Name ASC
SELECT Name FROM institution ORDER BY Name
SELECT Name FROM institution ORDER BY Founded ASC
SELECT Name FROM institution ORDER BY Founded
SELECT City, Province FROM institution
SELECT City, Province FROM institution
SELECT max(Enrollment) ,  min(Enrollment) FROM institution
SELECT max(Enrollment) ,  min(Enrollment) FROM institution
SELECT Affiliation FROM institution WHERE City != 'Vancouver'
SELECT Affiliation FROM institution WHERE City != 'Vancouver'
SELECT Stadium FROM institution ORDER BY Capacity DESC
SELECT Stadium FROM institution ORDER BY Capacity DESC
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
SELECT T1.Name ,  T2.Nickname FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID  =  T2.Institution_ID
SELECT T1.Name ,  T2.Nickname FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID  =  T2.Institution_ID
SELECT T2.Nickname FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment LIMIT 1
SELECT T1.Nickname FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1
SELECT T1.Name  FROM institution AS T1  JOIN Championship AS T2  ON T1.Institution_ID  =  T2.Institution_ID  GROUP BY T1.Name ORDER BY COUNT(T2.Number_of_Championships) DESC
SELECT T1.Name FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID  =  T2.Institution_ID GROUP BY T1.Name ORDER BY COUNT(T2.Number_of_Championships) DESC
SELECT T1.Name FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Number_of_Championships >= 1
SELECT T1.Name FROM institution AS T1 JOIN Championship AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Number_of_Championships >= 1
SELECT sum(Number_of_Championships) FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  'public'
SELECT sum(Number_of_Championships) FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Affiliation = 'Public'
SELECT Affiliation ,  COUNT (*) FROM institution GROUP BY Affiliation
SELECT count(*) ,  Affiliation FROM institution GROUP BY Affiliation
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY count(*) DESC LIMIT 1
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY count(*) DESC LIMIT 1
SELECT Founded FROM institution GROUP BY Founded HAVING count(*) > 1
SELECT Founded, COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*) > 1
SELECT T1.Nickname FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC
SELECT T1.Nickname FROM Championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC
SELECT sum(Enrollment) FROM institution WHERE City  =  'Vancouver' OR City  =  'Calgary'
SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'
SELECT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded < 1920) AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)
SELECT DISTINCT Province FROM institution WHERE Province IN (SELECT Province FROM institution WHERE Founded < 1920) AND Province IN (SELECT Province FROM institution WHERE Founded > 1950)
SELECT COUNT(DISTINCT Province) FROM institution
SELECT COUNT(DISTINCT Province) FROM institution
SELECT * FROM Warehouses
SELECT * FROM Warehouses
SELECT DISTINCT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'New York'
SELECT DISTINCT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'New York'
SELECT Contents FROM Boxes WHERE Value > 150
SELECT Contents FROM Boxes WHERE Value > 150
SELECT T1.Code ,  avg(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code  =  T2.Warehouse GROUP BY T1.Code
SELECT Warehouse ,  AVG (Value) FROM Boxes GROUP BY Warehouse
SELECT AVG(Value), SUM(Value) FROM Boxes
SELECT AVG(Value), SUM(Value) FROM Boxes
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses
SELECT avg(Value) ,  max(Value) ,  Contents FROM Boxes GROUP BY Contents
SELECT AVG(Value), MAX(Value), Contents FROM Boxes GROUP BY Contents
SELECT Contents FROM Boxes GROUP BY Contents ORDER BY sum(Value) DESC LIMIT 1
SELECT Contents FROM Boxes ORDER BY Value DESC LIMIT 1
SELECT AVG(Value) FROM Boxes
SELECT AVG(Value) FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT COUNT(DISTINCT Contents) FROM Boxes
SELECT COUNT(DISTINCT Contents) FROM Boxes
SELECT DISTINCT Location FROM Warehouses
SELECT DISTINCT Location FROM Warehouses
SELECT T1.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code WHERE T2.Location  =  'Chicago' OR T2.Location  =  'New York'
SELECT T1.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code WHERE T2.Location  =  'Chicago' OR T2.Location  =  'New York'
SELECT sum(T1.Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code WHERE T2.Location  =  'Chicago' OR T2.Location  =  'New York'
SELECT sum(Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code WHERE T2.Location  =  'Chicago' OR T2.Location  =  'New York'
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')
SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code WHERE T2.Location  =  'Chicago' INTERSECT SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code WHERE T2.Location  =  'New York'
SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code WHERE T2.Location  =  'New York')
SELECT DISTINCT Contents FROM Boxes WHERE Contents NOT IN (SELECT T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code WHERE T2.Location  =  'New York')
SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code  =  T2.Warehouse WHERE T2.Contents  =  'Rocks' EXCEPT SELECT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code  =  T2.Warehouse WHERE T2.Contents  =  'Scissors'
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks') EXCEPT SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Scissors')
SELECT DISTINCT T2.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = 'Rocks' OR T1.Contents = 'Scissors'
SELECT DISTINCT T2.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = 'Rocks' OR T1.Contents = 'Scissors'
SELECT Location FROM Warehouses WHERE Code IN (SELECT Warehouse FROM Boxes WHERE Contents = 'Rocks' OR Contents = 'Scissors')
SELECT DISTINCT T1.Location FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code  =  T2.Warehouse WHERE T2.Contents  IN ('Rocks', 'Scissors')
SELECT Code, Contents FROM Boxes ORDER BY Value
SELECT Code, Contents FROM Boxes ORDER BY Value
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT avg(Value) FROM Boxes)
SELECT DISTINCT Contents FROM Boxes WHERE Value > (SELECT avg(Value) FROM Boxes)
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents
SELECT Code FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = 'Rocks')
SELECT Code FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = 'Rocks')
SELECT Code, Contents FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = 'Scissors')
SELECT Code, Contents FROM Boxes WHERE Value > (SELECT max(Value) FROM Boxes WHERE Contents = 'Scissors')
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1)
SELECT Warehouse, avg(Value) FROM Boxes GROUP BY Warehouse HAVING avg(Value) > 150
SELECT Warehouse, avg(Value) FROM Boxes GROUP BY Warehouse HAVING avg(Value) > 150
SELECT sum(Value), count(*), Contents FROM Boxes GROUP BY Contents
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents
SELECT sum(Capacity) ,  avg(Capacity) ,  max(Capacity) ,  Location FROM Warehouses GROUP BY Location
SELECT Location, SUM(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses GROUP BY Location
SELECT SUM(Capacity) FROM Warehouses
SELECT SUM(Capacity) FROM Warehouses
SELECT max(T1.Value) ,  T2.Location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code GROUP BY T2.Location
SELECT T1.Location ,  max(T2.Value) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code  =  T2.Warehouse GROUP BY T1.Location
SELECT T1.Code ,  count(*) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code  =  T2.Warehouse GROUP BY T1.Code
SELECT count(*) ,  T2.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code GROUP BY T2.Code
SELECT count(DISTINCT T1.Location) FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks'
SELECT COUNT(DISTINCT Warehouse) FROM Boxes WHERE Contents = 'Rocks'
SELECT Boxes.Code ,  Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse  =  Warehouses.Code
SELECT T1.Code ,  T2.Location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code
SELECT T1.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'Chicago'
SELECT T1.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'Chicago'
SELECT count(*), T2.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Code
SELECT count(*) ,  T2.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code GROUP BY T2.Code
SELECT count(DISTINCT T1.Contents), T2.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Code
SELECT count(DISTINCT T1.Contents) ,  T2.Code FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code GROUP BY T2.Code
SELECT T1.Code FROM Warehouses AS T1 JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code HAVING COUNT(*) > T1.Capacity
SELECT T1.Code FROM Warehouses AS T1 JOIN (SELECT Warehouse, COUNT(*) as box_count FROM Boxes GROUP BY Warehouse) AS T2 ON T1.Code = T2.Warehouse WHERE T2.box_count > T1.Capacity
SELECT sum(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')
SELECT sum(T1.Value) FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.Warehouse  =  T2.Code WHERE T2.Location != 'Chicago'
SELECT University_Name, City, State FROM university ORDER BY University_Name
SELECT University_Name, City, State FROM university ORDER BY University_Name
SELECT COUNT(*) FROM university WHERE State = 'Illinois' OR State = 'Ohio'
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')
SELECT max(Enrollment) ,  avg(Enrollment) ,  min(Enrollment) FROM university
SELECT max(Enrollment) ,  avg(Enrollment) ,  min(Enrollment) FROM university
SELECT Team_Name FROM university WHERE Enrollment > (SELECT avg(Enrollment) FROM university)
SELECT Team_Name FROM university WHERE Enrollment  >  (SELECT avg(Enrollment) FROM university)
SELECT DISTINCT Home_Conference FROM university
SELECT DISTINCT Home_Conference FROM university
SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference
SELECT Home_Conference, COUNT(DISTINCT University_ID) FROM university GROUP BY Home_Conference
SELECT State FROM university GROUP BY State ORDER BY count(University_ID) DESC LIMIT 1
SELECT State FROM university GROUP BY State ORDER BY count(*) DESC LIMIT 1
SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING avg(Enrollment) > 2000
SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING avg(Enrollment) > 2000
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY sum(Enrollment) ASC LIMIT 1
SELECT Home_Conference, MIN(Enrollment)  FROM university  GROUP BY Home_Conference  ORDER BY MIN(Enrollment) ASC
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT T1.Major_Name, T2.Rank  FROM major AS T1  JOIN major_ranking AS T2 ON T1.Major_ID = T2.Major_ID  JOIN university AS T3 ON T2.University_ID = T3.University_ID  WHERE T3.University_Name = 'Augustana College'
SELECT T1.Rank, T2.Major_Name  FROM major_ranking AS T1  JOIN major AS T2 ON T1.Major_ID = T2.Major_ID  JOIN university AS T3 ON T1.University_ID = T3.University_ID  WHERE T3.University_Name = 'Augustana College'
SELECT T1.University_Name ,  T1.City ,  T1.State  FROM university AS T1  JOIN major_ranking AS T2 ON T1.University_ID  =  T2.University_ID  JOIN major AS T3 ON T2.Major_ID  =  T3.Major_ID  WHERE T2.Rank  =  1 AND T3.Major_Name  =  'Accounting'
SELECT T1.University_Name ,  T1.City ,  T1.State FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID  =  T2.University_ID JOIN major AS T3 ON T2.Major_ID  =  T3.Major_ID WHERE T2.Rank  =  1 AND T3.Major_Name  =  'Accounting'
SELECT T1.University_Name  FROM university AS T1  JOIN major_ranking AS T2  ON T1.University_ID  =  T2.University_ID  WHERE T2.Rank  =  1  GROUP BY T1.University_Name  ORDER BY count(T2.Rank) DESC  LIMIT 1
SELECT University_Name  FROM university  WHERE University_ID = (     SELECT University_ID      FROM major_ranking      WHERE Rank = 1      GROUP BY University_ID      ORDER BY COUNT(*) DESC      LIMIT 1)
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)
SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking WHERE Rank = 1)
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID  =  T2.University_ID JOIN major AS T3 ON T2.Major_ID  =  T3.Major_ID WHERE T3.Major_Name  =  'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID  =  T2.University_ID JOIN major AS T3 ON T2.Major_ID  =  T3.Major_ID WHERE T3.Major_Name  =  'Urban Education'
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID  =  T2.University_ID JOIN major AS T3 ON T2.Major_ID  =  T3.Major_ID WHERE T3.Major_Name  =  'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID  =  T2.University_ID JOIN major AS T3 ON T2.Major_ID  =  T3.Major_ID WHERE T3.Major_Name  =  'Urban Education'
SELECT T1.University_Name, T2.Rank  FROM university AS T1  JOIN overall_ranking AS T2  ON T1.University_ID = T2.University_ID  WHERE T1.State = 'Wisconsin'
SELECT T1.University_Name, T2.Rank  FROM university AS T1  JOIN overall_ranking AS T2  ON T1.University_ID = T2.University_ID  WHERE T1.State = 'Wisconsin'
SELECT T1.University_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID  =  T2.University_ID ORDER BY T2.Research_point DESC LIMIT 1
SELECT T1.University_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID  =  T2.University_ID ORDER BY T2.Research_point DESC LIMIT 1
SELECT T1.University_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID  =  T2.University_ID ORDER BY T2.Reputation_point ASC
SELECT T1.University_Name FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID  =  T2.University_ID ORDER BY T2.Reputation_point ASC
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' AND T2.Rank <= 3
SELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' AND T2.Rank <= 3
SELECT sum(T1.Enrollment) FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID  =  T2.University_ID WHERE T2.Rank <= 5
SELECT sum(T1.Enrollment) FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank <= 5
SELECT T1.University_Name ,  T2.Citation_point  FROM university AS T1  JOIN overall_ranking AS T2  ON T1.University_ID  =  T2.University_ID  WHERE T2.Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3)
SELECT T1.University_Name ,  T2.Citation_point FROM university AS T1 JOIN overall_ranking AS T2 ON T1.University_ID  =  T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2
SELECT Title FROM Movies WHERE Rating IS NULL
SELECT Title FROM Movies WHERE Rating IS NULL
SELECT Title FROM Movies WHERE Rating = 'G'
SELECT Title FROM Movies WHERE Rating = 'G'
SELECT Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'
SELECT Title FROM Movies AS M JOIN MovieTheaters AS MT ON M.Code = MT.Movie WHERE MT.Name = 'Odeon'
SELECT T1.Title ,  T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie
SELECT T1.Title ,  T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters
SELECT COUNT(DISTINCT Name) FROM MovieTheaters
SELECT COUNT(DISTINCT Name) FROM MovieTheaters
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'
SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating = 'G' OR T2.Rating = 'PG'
SELECT DISTINCT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating = 'G' OR T2.Rating = 'PG'
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Odeon' OR T2.Name = 'Imperial'
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Odeon' OR T2.Name = 'Imperial'
SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name  =  'Odeon' INTERSECT SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name  =  'Imperial'
SELECT Movie FROM MovieTheaters WHERE Name  =  'Odeon' INTERSECT SELECT Movie FROM MovieTheaters WHERE Name  =  'Imperial'
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')
SELECT Title FROM Movies WHERE Title NOT IN (SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'Odeon')
SELECT Title FROM Movies ORDER BY Title ASC
SELECT Title FROM Movies ORDER BY Title ASC
SELECT Title FROM Movies ORDER BY Rating
SELECT Title FROM Movies ORDER BY Rating
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY count(Movie) DESC LIMIT 1
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY count(Movie) DESC LIMIT 1
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie GROUP BY T1.Title ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie GROUP BY T1.Title ORDER BY COUNT(*) DESC LIMIT 1
SELECT count(*) ,  Rating FROM Movies GROUP BY Rating
SELECT count(*) ,  Rating FROM Movies GROUP BY Rating
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL
SELECT DISTINCT Name FROM MovieTheaters WHERE Movie IS NOT NULL
SELECT DISTINCT Name FROM MovieTheaters WHERE Movie IS NOT NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NULL
SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating = 'G'
SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T2.Rating = 'G'
SELECT Title FROM Movies
SELECT Title FROM Movies
SELECT DISTINCT Rating FROM Movies
SELECT DISTINCT Rating FROM Movies
SELECT * FROM Movies WHERE Rating = 'unrated'
SELECT * FROM Movies WHERE Rating = 'unrated'
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT T2.Name FROM Package AS T1 JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient ORDER BY T2.Weight DESC LIMIT 1
SELECT sum(Weight) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT sum(Weight) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT AVG(Salary) FROM Employee WHERE Position = 'intern'
SELECT AVG(Salary) FROM Employee WHERE Position = 'intern'
SELECT Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Name = 'Physician'
SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.Position = 'physician'
SELECT PackageNumber FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong'
SELECT count(*) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT PackageNumber FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'
SELECT PackageNumber FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name = 'Leo Wong'
SELECT T1.*  FROM Package AS T1  JOIN Client AS T2  ON T1.Recipient = T2.AccountNumber OR T1.Sender = T2.AccountNumber  WHERE T2.Name = 'Leo Wong'
SELECT DISTINCT PackageNumber FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') OR Recipient IN (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')
SELECT count(*) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong'
SELECT count(*) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber WHERE T2.Name = 'Ogden Wernstrom' AND T3.Name = 'Leo Wong'
SELECT T1.Contents FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'John Zoidfarb'
SELECT T1.Contents FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'John Zoidfarb'
SELECT T1.PackageNumber ,  T1.Weight FROM Package AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE '%John%' ORDER BY T1.Weight DESC LIMIT 1
SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name LIKE '%John%' ORDER BY T1.Weight DESC LIMIT 1
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3
SELECT T1.Name, count(T2.Sender) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY count(T2.Sender) DESC LIMIT 1
SELECT T1.Name ,  count(T2.PackageNumber)  FROM Client AS T1  JOIN Package AS T2  ON T1.AccountNumber  =  T2.Sender  GROUP BY T1.Name  ORDER BY count(T2.PackageNumber) DESC  LIMIT 1
SELECT T1.Name ,  count(*) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber  =  T2.Recipient GROUP BY T1.Name ORDER BY count(*) ASC LIMIT 1
SELECT T1.Name, COUNT(T2.Recipient) as package_count  FROM Client AS T1  JOIN Package AS T2  ON T1.AccountNumber = T2.Recipient  GROUP BY T1.Name  ORDER BY package_count ASC  LIMIT 1
SELECT T2.Name FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber GROUP BY T2.Name HAVING count(*) > 1
SELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber  =  T2.Sender GROUP BY T1.Name HAVING count(*)  >  1
SELECT Coordinates FROM Planet WHERE Name = 'Mars'
SELECT Coordinates FROM Planet WHERE Name = 'Mars'
SELECT Name, Coordinates FROM Planet ORDER BY Name
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC
SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J. Fry'
SELECT ShipmentID FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Employee.Name = 'Phillip J Fry'
SELECT Date FROM Shipment
SELECT Date FROM Shipment
SELECT ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name = 'Mars'
SELECT ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'
SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T1.Manager = T3.EmployeeID WHERE T2.Name = 'Mars' AND T3.Name = 'Turanga Leela'
SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID JOIN Employee ON Shipment.Manager = Employee.EmployeeID WHERE Planet.Name = 'Mars' AND Employee.Name = 'Turanga Leela'
SELECT Shipment.ShipmentID  FROM Shipment  JOIN Planet ON Shipment.Planet = Planet.PlanetID  JOIN Employee ON Shipment.Manager = Employee.EmployeeID  WHERE Planet.Name = 'Mars' OR Employee.Name = 'Turanga Leela'
SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T1.Manager = T3.EmployeeID WHERE T2.Name = 'Mars' AND T3.Name = 'Turanga Leela'
SELECT count(T1.ShipmentID), T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Name
SELECT count(T1.ShipmentID) ,  T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet  =  T2.PlanetID GROUP BY T2.Name
SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Name ORDER BY count(T1.ShipmentID) DESC LIMIT 1
SELECT T1.Name FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1
SELECT T1.Name ,  count(*)  FROM Employee AS T1  JOIN Shipment AS T2  ON T1.EmployeeID  =  T2.Manager  GROUP BY T1.Name
SELECT count(*) ,  T2.Name FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager  =  T2.EmployeeID GROUP BY T2.Name
SELECT sum(Weight) FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name  =  'Mars'
SELECT sum(T1.Weight) FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.ShipmentID JOIN Planet AS T3 ON T2.Planet  =  T3.PlanetID WHERE T3.Name  =  'Mars'
SELECT sum(T1.Weight) ,  T3.Name FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.ShipmentID JOIN Planet AS T3 ON T2.Planet  =  T3.PlanetID GROUP BY T3.Name
SELECT sum(T1.Weight) ,  T3.Name FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.ShipmentID JOIN Planet AS T3 ON T2.Planet  =  T3.PlanetID GROUP BY T3.Name
SELECT T1.Name FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T1.Name HAVING sum(T3.Weight) > 30
SELECT T1.Name FROM Planet AS T1 JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T1.Name HAVING sum(T3.Weight) > 30
SELECT Package.PackageNumber  FROM Package  JOIN Shipment ON Package.Shipment = Shipment.ShipmentID  JOIN Planet ON Shipment.Planet = Planet.PlanetID  JOIN Client ON Package.Sender = Client.AccountNumber  WHERE Planet.Name = 'Omicron Persei 8' AND Client.Name = 'Zapp Brannigan'
SELECT count(T1.PackageNumber) FROM Package AS T1 JOIN Client AS T2 ON T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = 'Zapp Brannigan' AND T4.Name = 'Omicron Persei 8'
SELECT T1.PackageNumber FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID JOIN Client AS T4 ON T1.Sender = T4.AccountNumber WHERE T3.Name = 'Omicron Persei 8' OR T4.Name = 'Zapp Brannigan'
SELECT count(*) FROM Package AS T1  JOIN Shipment AS T2 ON T1.Shipment  =  T2.ShipmentID  JOIN Planet AS T3 ON T2.Planet  =  T3.PlanetID  JOIN Employee AS T4 ON T2.Manager  =  T4.EmployeeID  JOIN Client AS T5 ON T1.Sender  =  T5.AccountNumber  WHERE T3.Name  =  'Omicron Persei 8' OR T5.Name  =  'Zapp Brannigan'
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT T1.EmployeeID FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = 'Mars')
SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = 'Omega III'
SELECT T1.Name FROM Employee AS T1 JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = 'Omega III'
SELECT T2.Name FROM Has_Clearance AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Name HAVING count(*) = 1
SELECT T1.Name FROM Planet AS T1 JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.Name HAVING count(T2.Employee) = 1
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary > (SELECT avg(Salary) FROM Employee) OR Salary > 5000
SELECT Name FROM Employee WHERE Salary > (SELECT avg(Salary) FROM Employee) OR Salary > 5000
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')
SELECT COUNT(*) FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars')
SELECT COUNT(*) FROM game
SELECT COUNT(*) FROM game
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'
SELECT Platform_name, Market_district FROM platform
SELECT Platform_name, Market_district FROM platform
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1
SELECT max(Rank_of_the_year), min(Rank_of_the_year) FROM player
SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3
SELECT COUNT(*) FROM player WHERE Rank_of_the_year <= 3
SELECT Player_name FROM player ORDER BY Player_name ASC
SELECT Player_name FROM player ORDER BY Player_name ASC
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT T1.Player_name ,  T1.Rank_of_the_year  FROM player AS T1  JOIN game_player AS T2  ON T1.Player_ID  =  T2.Player_ID  JOIN game AS T3  ON T2.Game_ID  =  T3.Game_ID  WHERE T3.Title  =  'Super Mario World'
SELECT T1.Player_name, T1.Rank_of_the_year  FROM player AS T1  JOIN game_player AS T2  ON T1.Player_ID = T2.Player_ID  JOIN game AS T3  ON T2.Game_ID = T3.Game_ID  WHERE T3.Title = "Super Mario World"
SELECT DISTINCT T1.Developers  FROM game AS T1  JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID  JOIN player AS T3 ON T2.Player_ID = T3.Player_ID  WHERE T3.College = 'Auburn'
SELECT DISTINCT T1.Developers  FROM game AS T1  JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID  JOIN player AS T3 ON T2.Player_ID = T3.Player_ID  WHERE T3.College = 'Auburn'
SELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position = 'Guard'
SELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position = 'Guard'
SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID
SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID
SELECT T1.Title  FROM game AS T1  JOIN platform AS T2  ON T1.Platform_ID = T2.Platform_ID  WHERE T2.Market_district IN ('Asia', 'USA')
SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  'Asia' OR T2.Market_district  =  'USA'
SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise
SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise
SELECT Franchise FROM game GROUP BY Franchise ORDER BY count(Game_ID) DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise ORDER BY count(Game_ID) DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise HAVING count(Game_ID) >= 2
SELECT Franchise FROM game GROUP BY Franchise HAVING count(Game_ID) >= 2
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  'Oklahoma' INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  'Auburn'
SELECT DISTINCT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Oklahoma' OR T3.College = 'Auburn'
SELECT DISTINCT Franchise FROM game
SELECT DISTINCT Franchise FROM game
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT T1.Game_ID FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID  =  T2.Player_ID WHERE T2.Position  =  'Guard')
SELECT Title FROM game WHERE Game_ID NOT IN (SELECT T1.Game_ID FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  'Guard')
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM press
SELECT AVG(Year_Profits_billion), MAX(Year_Profits_billion), Press_ID FROM press GROUP BY Press_ID
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 UNION SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1
SELECT Name FROM press WHERE Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press)
SELECT COUNT(*) FROM author WHERE Age < 30
SELECT COUNT(*) FROM author WHERE Age < 30
SELECT AVG(Age), Gender FROM author GROUP BY Gender
SELECT Gender ,  AVG (Age) FROM author GROUP BY Gender
SELECT count(*) ,  Gender FROM author WHERE Age  >  30 GROUP BY Gender
SELECT COUNT(*) ,  Gender FROM author WHERE Age  >  30 GROUP BY Gender
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Book_Series, count(Book_ID) FROM book GROUP BY Book_Series
SELECT count(Book_ID) ,  Book_Series FROM book GROUP BY Book_Series
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5
SELECT Title ,  Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5
SELECT DISTINCT Book_Series FROM book WHERE Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount > 1000) AND Book_Series IN (SELECT Book_Series FROM book WHERE Sale_Amount < 500)
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < 500
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID  =  T2.Author_ID WHERE T2.Book_Series  =  'MM' INTERSECT SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID  =  T2.Author_ID WHERE T2.Book_Series  =  'LT'
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID  =  T2.Author_ID WHERE T2.Book_Series  =  'MM' INTERSECT SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID  =  T2.Author_ID WHERE T2.Book_Series  =  'LT'
SELECT Name ,  Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name HAVING count(*) > 1
SELECT T2.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID  =  T2.Author_ID GROUP BY T2.Name HAVING count(*)  >  1
SELECT T1.Title ,  T2.Name ,  T3.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID  =  T2.Author_ID JOIN press AS T3 ON T1.Press_ID  =  T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3
SELECT T1.Title ,  T2.Name ,  T3.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID  =  T2.Author_ID JOIN press AS T3 ON T1.Press_ID  =  T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3
SELECT T1.Name ,  sum(T2.Sale_Amount)  FROM press AS T1  JOIN book AS T2  ON T1.Press_ID  =  T2.Press_ID  GROUP BY T1.Name
SELECT T1.Name ,  sum(T2.Sale_Amount)  FROM press AS T1  JOIN book AS T2  ON T1.Press_ID  =  T2.Press_ID  GROUP BY T1.Name
SELECT count(T1.Book_ID) ,  T2.Name FROM book AS T1 JOIN press AS T2 ON T1.Press_ID  =  T2.Press_ID WHERE T1.Sale_Amount > 1000 GROUP BY T2.Name
SELECT T1.Name ,  count(*)  FROM press AS T1  JOIN book AS T2  ON T1.Press_ID  =  T2.Press_ID  WHERE T2.Sale_Amount > 1000  GROUP BY T1.Press_ID, T1.Name
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID  =  T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1
SELECT T2.Name FROM book AS T1 JOIN author AS T2 ON T1.Author_ID  =  T2.Author_ID ORDER BY T1.Sale_Amount DESC LIMIT 1
SELECT T1.Name ,  T1.Gender  FROM author AS T1  JOIN book AS T2  ON T1.Author_ID  =  T2.Author_ID  GROUP BY T1.Name, T1.Gender  HAVING count(*)  =  (SELECT max(count(*)) FROM book GROUP BY Author_ID)
SELECT T2.Name ,  T2.Gender FROM book AS T1 JOIN author AS T2 ON T1.Author_ID  =  T2.Author_ID GROUP BY T2.Name ,  T2.Gender ORDER BY count(*) DESC LIMIT 1
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE press.Name = 'Accor')
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE press.Name = 'Accor')
SELECT T2.Name ,  T2.Year_Profits_billion  FROM press AS T2  WHERE T2.Press_ID IN (SELECT T1.Press_ID FROM book AS T1 GROUP BY T1.Press_ID HAVING count(*) > 2)
SELECT T2.Name ,  T2.Year_Profits_billion  FROM press AS T2  JOIN book AS T1  ON T1.Press_ID  =  T2.Press_ID  GROUP BY T2.Name, T2.Year_Profits_billion  HAVING count(*)  >  2
SELECT COUNT(DISTINCT author_name) FROM Authors
SELECT author_name FROM Authors
SELECT author_name, other_details FROM Authors
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'
SELECT COUNT(*) FROM Documents
SELECT author_name FROM Documents WHERE document_id = 4
SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil'
SELECT COUNT(document_id) FROM Documents WHERE author_name = 'Era Kerluke'
SELECT document_name, document_description FROM Documents
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'
SELECT T1.author_name, T1.other_details  FROM Authors AS T1  JOIN Documents AS T2  ON T1.author_name = T2.author_name  WHERE T2.document_name = "Travel to China"
SELECT T1.author_name ,  count(T2.document_id) FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name GROUP BY T1.author_name
SELECT T1.author_name  FROM Authors AS T1  JOIN Documents AS T2  ON T1.author_name  =  T2.author_name  GROUP BY T1.author_name  ORDER BY count(*) DESC  LIMIT 1
SELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name HAVING count(*) >= 2
SELECT COUNT(*) FROM Business_Processes
SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9
SELECT process_name FROM Business_Processes WHERE process_id = (SELECT next_process_id FROM Business_Processes WHERE process_id = 9)
SELECT COUNT(*) FROM Process_Outcomes
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'
SELECT COUNT(*) FROM Process_Status
SELECT process_status_code, process_status_description FROM Process_Status
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'
SELECT COUNT(*) FROM Staff
SELECT staff_id, staff_details FROM Staff
SELECT staff_details FROM Staff WHERE staff_id = 100
SELECT COUNT(*) FROM Ref_Staff_Roles
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'
SELECT COUNT(DISTINCT document_id) FROM Documents_Processes
SELECT DISTINCT process_id FROM Documents_Processes WHERE document_id IS NOT NULL
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes)
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes)
SELECT T1.process_outcome_description ,  T2.process_status_description  FROM Process_Outcomes AS T1  JOIN Documents_Processes AS T3 ON T1.process_outcome_code  =  T3.process_outcome_code  JOIN Process_Status AS T2 ON T3.process_status_code  =  T2.process_status_code  WHERE T3.document_id  =  0
SELECT T1.process_name FROM Business_Processes AS T1 JOIN Documents_Processes AS T2 ON T1.process_id  =  T2.process_id JOIN Documents AS T3 ON T2.document_id  =  T3.document_id WHERE T3.document_name  =  'Travel to Brazil'
SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id
SELECT count(DISTINCT T1.staff_id) FROM Staff_in_Processes AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id JOIN Documents_Processes AS T3 ON T1.document_id = T3.document_id AND T1.process_id = T3.process_id WHERE T1.document_id = 0 AND T1.process_id = 9
SELECT T1.staff_id, count(T2.document_id)  FROM Staff AS T1  JOIN Staff_in_Processes AS T2  ON T1.staff_id = T2.staff_id  GROUP BY T1.staff_id
SELECT T1.staff_role_code ,  count(T2.process_id)  FROM Staff_in_Processes AS T1  JOIN Documents_Processes AS T2  ON T1.document_id  =  T2.document_id AND T1.process_id  =  T2.process_id  JOIN Ref_Staff_Roles AS T3  ON T1.staff_role_code  =  T3.staff_role_code  GROUP BY T1.staff_role_code
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3
SELECT COUNT(*) FROM Agencies
SELECT COUNT(*) FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT COUNT(*) FROM Clients
SELECT COUNT(*) FROM Clients
SELECT client_id, client_details FROM Clients
SELECT client_id, client_details FROM Clients
SELECT T1.agency_id ,  count(T2.client_id) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id
SELECT count(T1.client_id) ,  T2.agency_id FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T2.agency_id
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  JOIN Clients AS T2  ON T1.agency_id = T2.agency_id  GROUP BY T1.agency_id, T1.agency_details  ORDER BY count(T2.client_id) DESC  LIMIT 1
SELECT A.agency_id, A.agency_details  FROM Agencies A  JOIN Clients C ON A.agency_id = C.agency_id  GROUP BY A.agency_id, A.agency_details  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  JOIN Clients AS T2  ON T1.agency_id  =  T2.agency_id  GROUP BY T1.agency_id, T1.agency_details  HAVING count(*)  >=  2
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  JOIN Clients AS T2  ON T1.agency_id  =  T2.agency_id  GROUP BY T1.agency_id, T1.agency_details  HAVING count(*)  >=  2
SELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = 'Mac'
SELECT T1.agency_details  FROM Agencies AS T1  JOIN Clients AS T2  ON T1.agency_id = T2.agency_id  WHERE T2.client_details = 'Mac'
SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
SELECT sic_code ,  COUNT (client_id) FROM Clients GROUP BY sic_code
SELECT COUNT(client_id), sic_code FROM Clients GROUP BY sic_code
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'
SELECT DISTINCT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id
SELECT DISTINCT T1.agency_id, T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id = T2.agency_id
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)
SELECT COUNT(*) FROM Invoices
SELECT COUNT(*) FROM Invoices
SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices
SELECT invoice_id, invoice_status, invoice_details FROM Invoices
SELECT T1.client_id ,  count(T2.invoice_id) FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id
SELECT COUNT(invoice_id), client_id FROM Invoices GROUP BY client_id
SELECT T2.client_id, T2.client_details FROM Clients AS T2 WHERE T2.client_id = (SELECT T1.client_id FROM Invoices AS T1 GROUP BY T1.client_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T1.client_id, T1.client_details  FROM Clients AS T1  WHERE T1.client_id = (     SELECT T2.client_id      FROM Invoices AS T2      GROUP BY T2.client_id      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT T1.client_id FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  >=  2
SELECT T1.client_id FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  >=  2
SELECT invoice_status ,  COUNT(*) FROM Invoices GROUP BY invoice_status
SELECT count(*) ,  invoice_status FROM Invoices GROUP BY invoice_status
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1
SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id
SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id
SELECT meeting_type, other_details FROM Meetings
SELECT meeting_type, other_details FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT DISTINCT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT T1.payment_id, T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.invoice_status = 'Working'
SELECT T1.payment_id, T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.invoice_status = 'Working'
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments)
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN (SELECT invoice_id FROM Payments)
SELECT COUNT(*) FROM Payments
SELECT COUNT(*) FROM Payments
SELECT T1.payment_id ,  T1.invoice_id ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id
SELECT payment_id ,  invoice_id ,  payment_details FROM Payments
SELECT DISTINCT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id
SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
SELECT T1.invoice_id ,  count(*) FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id
SELECT count(payment_id) ,  invoice_id FROM Payments GROUP BY invoice_id
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 WHERE T1.invoice_id = (SELECT T2.invoice_id FROM Payments AS T2 GROUP BY T2.invoice_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 WHERE T1.invoice_id IN (SELECT invoice_id FROM Payments GROUP BY invoice_id HAVING COUNT(*) = (SELECT COUNT(*) as payment_count FROM Payments GROUP BY invoice_id ORDER BY payment_count DESC LIMIT 1))
SELECT COUNT(*) FROM Staff
SELECT COUNT(*) FROM Staff
SELECT T1.agency_id ,  count(T2.staff_id) FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id
SELECT T1.agency_id ,  count(T2.staff_id) FROM Agencies AS T1 JOIN Staff AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  JOIN Staff AS T2  ON T1.agency_id = T2.agency_id  GROUP BY T1.agency_id, T1.agency_details  HAVING count(T2.staff_id) =  (SELECT max(count_staff)  FROM (SELECT count(staff_id) as count_staff  FROM Staff  GROUP BY agency_id) AS T3)
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  WHERE T1.agency_id = (     SELECT T2.agency_id      FROM Staff AS T2      GROUP BY T2.agency_id      ORDER BY COUNT(*) DESC      LIMIT 1 )
SELECT meeting_outcome ,  COUNT(*) FROM Meetings GROUP BY meeting_outcome
SELECT COUNT(meeting_id), meeting_outcome FROM Meetings GROUP BY meeting_outcome
SELECT T1.client_id ,  count(T2.meeting_id) FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id
SELECT COUNT(meeting_id), client_id FROM Meetings GROUP BY client_id
SELECT meeting_type ,  count(*) ,  client_id FROM Meetings GROUP BY meeting_type ,  client_id
SELECT count(meeting_id) ,  meeting_type FROM Meetings GROUP BY meeting_type
SELECT Meetings.meeting_id ,  Meetings.meeting_outcome ,  Meetings.meeting_type ,  Clients.client_details FROM Meetings JOIN Clients ON Meetings.client_id  =  Clients.client_id
SELECT Meetings.meeting_id ,  Meetings.meeting_outcome ,  Meetings.meeting_type ,  Clients.client_details FROM Meetings JOIN Clients ON Meetings.client_id  =  Clients.client_id
SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id
SELECT count(staff_id) ,  meeting_id FROM Staff_in_Meetings GROUP BY meeting_id
SELECT staff_id, COUNT(meeting_id) as attendance FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(meeting_id) = (SELECT MIN(COUNT(meeting_id)) FROM Staff_in_Meetings GROUP BY staff_id)
SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING count(meeting_id) > 0 ORDER BY count(meeting_id) ASC LIMIT 1
SELECT count(DISTINCT T1.staff_id) FROM Staff AS T1 JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)
SELECT DISTINCT T1.client_id ,  T1.client_details FROM Clients AS T1 LEFT JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id LEFT JOIN Invoices AS T3 ON T1.client_id  =  T3.client_id WHERE T2.client_id IS NOT NULL OR T3.client_id IS NOT NULL
SELECT client_id, client_details FROM Clients WHERE client_id IN (SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices)
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings) AND staff_details LIKE '%s%'
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings) AND staff_details LIKE '%s%'
SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id  FROM Clients AS T1  JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id  JOIN Invoices AS T3 ON T1.client_id  =  T3.client_id  GROUP BY T1.client_id, T1.sic_code, T1.agency_id  HAVING count(DISTINCT T2.meeting_id)  =  1 AND count(DISTINCT T3.invoice_id)  > 0
SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id  FROM Clients AS T1  JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id  JOIN Invoices AS T3 ON T1.client_id  =  T3.client_id  GROUP BY T1.client_id  HAVING count(DISTINCT T2.meeting_id)  =  1 AND count(DISTINCT T3.invoice_id)  >=  1
SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details  FROM Meetings  JOIN Clients ON Meetings.client_id = Clients.client_id  JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id  JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id
SELECT Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details  FROM Meetings  JOIN Clients ON Meetings.client_id = Clients.client_id  JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id  JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id
